<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Web vulnerabilities &amp; attacks on Offensive Security Cheatsheet</title>
    <link>/web-attacks/</link>
    <description>Recent content in Web vulnerabilities &amp; attacks on Offensive Security Cheatsheet</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="/web-attacks/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Headers Injections</title>
      <link>/web-attacks/headers_injections/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/web-attacks/headers_injections/</guid>
      <description>Security Headers HTTP Strict Transport Security (HSTS) --- Force HTTPS if enabled on the website Content Security Policy (CSP) --- Restrict/Whitelist some resources for some users X-XSS-Protection --- Protection for XSS X-Frame-Options --- Protect from clickjacking by removing iframes X-Content-Type-Options --- Protect from MIME sniffing # Cookie Set-Cookie Secure --- Prevent cookie stealing during transport Set-Cookie HttpOnly --- Prevent cookie stealing in the web browser Set-Cookie SameSite --- Prevent from CSRF (cookies will stay on the website)</description>
    </item>
    
    <item>
      <title>MISC &amp; Others</title>
      <link>/web-attacks/misc_others/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/web-attacks/misc_others/</guid>
      <description>Table of Content  MISC IDOR Hidden Parameters Apache Server Status Command Injection Server Side Template Injection (SSTI) Image Tragick Shellshock Heartbleed  
MISC # Security Headers https://securityheaders.com # /!\ HTTP POST Requests needs two carriage return at the end to be valid ! # Install files # You can check for backup files using the following extensions .backup, .bck, .old, .save, .bak, .sav, ~, .copy, .old, .orig, .</description>
    </item>
    
    <item>
      <title>BurpSuite</title>
      <link>/web-attacks/burpsuite/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/web-attacks/burpsuite/</guid>
      <description>WORK IN PROGRESS 
Notes / Tips # /!\ HTTP POST Requests needs two carriage return at the end to be valid ! 
Modules / Addons # Autorize # For Each Request you do, it will send an equal request # But with changed cookies of the session or any additional header used for authorization. # Just add cookies for user B and browse app using user A # Try accessing restricted ressources for user B and check for server responses # 200 --&amp;gt; Possible IDOR# JSON Beautifier # This extension adds a new tab to Burp&amp;#39;s HTTP message viewer to beautify JSON content.</description>
    </item>
    
    <item>
      <title>Postman</title>
      <link>/web-attacks/postman/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/web-attacks/postman/</guid>
      <description>https://www.guru99.com/postman-tutorial.html https://openclassrooms.com/fr/courses/4668056-construisez-des-microservices/5123020-testez-votre-api-grace-a-postman https://www.toolsqa.com/postman-tutorial/ https://amethyste16.wordpress.com/2016/02/24/tutoriel-postman/ 
User Interface Header # Import --&amp;gt; Used to import collection or environment. # Runner --&amp;gt; Automation tests can be executed through the Collection Runner. # Workspace --&amp;gt; You can divide work using workspaces Sidebar # History --&amp;gt; Past requests that you have sent will be displayed in History. # This makes it easy to track actions that you have done. # Organize --&amp;gt; your test suite by creating collections.</description>
    </item>
    
    <item>
      <title>Amazon Web Services (AWS)</title>
      <link>/web-attacks/amazon_web_services/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/web-attacks/amazon_web_services/</guid>
      <description>https://github.com/toniblyx/my-arsenal-of-aws-security-tools https://github.com/RhinoSecurityLabs/ccat https://github.com/RhinoSecurityLabs/pacu https://github.com/carnal0wnage/weirdAAL https://github.com/Static-Flow/CloudCopy GitLeaks (https://github.com/zricethezav/gitleaks) # Audit git repos for secrets keys ./gitleaks --repo=xxxxx --verbose --pretty 
Enumerate IAM (https://github.com/andresriancho/enumerate-iam) # Enumerate the permissions associated with AWS credential set ./enumerate-iam.py --access-key AKIA... --secret-key StF0q... # enumerate-iam.py tries to brute force all API calls allowed by the IAM policy. # The calls performed by this tool are all non-destructive (only get* and list* calls are performed). 
SQLmap proxy for AWS https://github.</description>
    </item>
    
  </channel>
</rss>