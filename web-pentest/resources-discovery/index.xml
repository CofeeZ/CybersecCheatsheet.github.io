<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Resources Discovery on Offensive Security Cheatsheet</title>
    <link>/web-pentest/resources-discovery/</link>
    <description>Recent content in Resources Discovery on Offensive Security Cheatsheet</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="/web-pentest/resources-discovery/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Content Discovery</title>
      <link>/web-pentest/resources-discovery/content_discovery/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/web-pentest/resources-discovery/content_discovery/</guid>
      <description>Resources # Fuzzing Wordlists https://github.com/fuzzdb-project/fuzzdb # Fuzzing and Content Discovery https://github.com/kaimi-io/web-fuzz-wordlists 
Tips # Fuzz non-printable characters in any user input # Could result in regex bypass, account takeover... 0x00, 0x2F, 0x3A, 0x40, 0x5B, 0x60, 0x7B, 0xFF %00, %2F, %3A, %40, %5B, %60, %7B, %FF 
JS extraction # Extract endpoint from JS files (https://github.com/jobertabma/relative-url-extractor) ruby extract.rb https://hackerone.com/some-file.js 
Broken Links # Check for broken links and domain takeover # For twitter, TwitterBFTD is great https://github.</description>
    </item>
    
    <item>
      <title>Parameters</title>
      <link>/web-pentest/resources-discovery/parameters/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/web-pentest/resources-discovery/parameters/</guid>
      <description>Hidden parameters # Sometimes hidden parameters are set on pages # You can use tools like Arjun to find them (https://github.com/s0md3v/Arjun) python3 arjun.py -u https://api.example.com/endpoint --get # Multi threading python3 arjun.py -u https://api.example.com/endpoint --get -t 22 # Delay between requests python3 arjun.py -u https://api.example.com/endpoint --get -d # You can also use patator # GET patator http_fuzz url=&amp;#39;url/FILE0=1&amp;#39; 0=parameters.txt -x ignore:fgrep=&amp;#39;error reflected content&amp;#39; # POST patator http_fuzz url=&amp;#39;url/&amp;#39; method=POST body=&amp;#39;FILE0=1&amp;#39; 0=wordlist.</description>
    </item>
    
    <item>
      <title>Sensitive Endpoints</title>
      <link>/web-pentest/resources-discovery/known_endpoints/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/web-pentest/resources-discovery/known_endpoints/</guid>
      <description>Apache Server Status # Apache server-status is an Apache monitoring instance # Available by default at http://example.com/server-status. # In normal cases, the server-status instance is not accessible by non-local IPs. # However, due to misconfiguration, it can be publicly accessible. # This leads anyone to view the great amount of data by server-status. # Data exposed : # - All URL requested by all hosts/vhosts, including obscure files/directories and session tokens # - All requested client&amp;#39;s IPs # Monitoring and exploiting Server Status https://github.</description>
    </item>
    
    <item>
      <title>IDOR</title>
      <link>/web-pentest/resources-discovery/idor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/web-pentest/resources-discovery/idor/</guid>
      <description> IDOR (Insecure Direct Object Reference) # Bypass restrictions using parameter pollution # You can use the same parameter several times api.example/profile?UserId=123 # Ok, your profile api.example/profile?UserId=456 # ERROR api.example/profile?UserId=456&amp;amp;UserId=123 # OK, it can work# Tips # - Some encoded/hashed IDs can be predictable --&amp;gt; Create accounts to see # - Try some id, user_id, message_id even if the application seems to not offer it (on API for ex) # - Parameter Polluttion (HPP) # - Switch between POST and PUT to bypass potential controls # - </description>
    </item>
    
    <item>
      <title>HTTP Request Smuggling</title>
      <link>/web-pentest/resources-discovery/http_request_smuggling/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/web-pentest/resources-discovery/http_request_smuggling/</guid>
      <description>HTTP Request Smuggling https://portswigger.net/web-security/request-smuggling # Smuggler.py is a small tool used to test that python smuggler.py -h _ ___ _ __ ___ _ _ __ _ __ _| | ___ _ __ _ __ _ _ / __| &amp;#39;_ ` _ \| | | |/ _` |/ _` | |/ _ \ &amp;#39;__| | &amp;#39;_ \| | | | \__ \ | | | | | |_| | (_| | (_| | | __/ | _ | |_) | |_| | |___/_| |_| |_|\__,_|\__, |\__, |_|\___|_| (_) | .</description>
    </item>
    
  </channel>
</rss>